"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –≤ –±–æ—Ç–µ.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç.
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.
- –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤.
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö.
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏(–∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏) —Å–µ—Ä–≤–µ—Ä–æ–≤.

"""

from aiogram import types
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
import re
from db.db import  ServerDatabase
from aiogram import Router
from log import logger
from bot import bot
from handlers.states import  AddServerState, ChangeServerIdsState, EditServerState, ServerGroupForm
from buttons.admin import BUTTON_TEXTS
from admin.servers_func import *
from dotenv import load_dotenv
import os

load_dotenv()

SERVEDATABASE = os.getenv("SERVEDATABASE")
router = Router()
server_db = ServerDatabase(SERVEDATABASE)


@router.message(lambda message: message.text == BUTTON_TEXTS["work_with_servers"])
async def start_handler(message: types.Message, state: FSMContext):
    await message.delete()

    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    keyboard = InlineKeyboardBuilder().add(
        InlineKeyboardButton(
            text=BUTTON_TEXTS["add_server"], 
            callback_data="add_server"
        ),
        InlineKeyboardButton(
            text=BUTTON_TEXTS["change_server_ids"], 
            callback_data="change_server_ids"
        ),
        InlineKeyboardButton(
            text=BUTTON_TEXTS["change_group_server"], 
            callback_data="change_group_server"
        ),
        InlineKeyboardButton(
            text=BUTTON_TEXTS["cluster_delete"], 
            callback_data="cluster_delete"
        ),
        InlineKeyboardButton(
            text=BUTTON_TEXTS["show_servers_info"], 
            callback_data="show_full_servers_info"
        ),
        InlineKeyboardButton(
            text=BUTTON_TEXTS["edit_server"],
            callback_data="edit_server"
        ),
        InlineKeyboardButton(
            text=BUTTON_TEXTS["d_server"],
            callback_data="d_server"
        )
    )

    sent_message = await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=keyboard.adjust(1).as_markup()
    )

    await state.update_data(
        sent_message_id=sent_message.message_id,
        chat_id=sent_message.chat.id
    )


@router.callback_query(lambda c: c.data == "add_server")
async def add_server_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    await callback_query.answer()
    cancel_button = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin")
    )
    user_data = await state.get_data()
    sent_message_id = user_data.get('sent_message_id')
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`id, total_slots, name, username, password, server_ip, base_url, subscription_base, sub_url, json_sub, inbound_ids`\n\n"
        "–ì–¥–µ:\n"
        "- `id`: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, `1`).\n"
        "- `total_slots`: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, `100`).\n"
        "- `name`: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è`).\n"
        "- `username`: –õ–æ–≥–∏–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `admin`).\n"
        "- `password`: –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `securepass`).\n"
        "- `server_ip`: IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫ `192.168.1.1` –∏–ª–∏ —Ç–∞–∫ `top.vpn.online`).\n"
        "- `base_url`: –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `https://top.vpn.online:22053`).\n"
        "- `subscription_base`: URL –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `https://top.vpn.online:2096`).\n"
        "- `sub_url`: –ü—É—Ç—å –¥–æ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/sub/`).\n"
        "- `json_sub`: –ü—É—Ç—å –¥–æ json –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/json/`).\n"
        "- `inbound_ids`: ID(–Ω–æ–º–µ—Ä) —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VLESS –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2`).\n\n"
        "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n"
        "`1, 100, üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è, admin, securepass, 192.168.1.1, https://top.vpn.online:22053, https://top.vpn.online:2096, /sub/, /json/, 2`\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
        parse_mode="Markdown", reply_markup=cancel_button.as_markup()
    )
    await state.update_data(sent_message_id=sent_message_id, chat_id=callback_query.message.chat.id)
    await state.set_state(AddServerState.waiting_for_data)


@router.callback_query(lambda c: c.data == "change_server_ids")
async def change_server_ids_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è server_ids(—Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤)"""
    await callback_query.answer()

    current_server_ids = get_current_server_ids()
    cancel_button = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin")
    )
    current_ids_text = ", ".join(map(str, current_server_ids)) if current_server_ids else "–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤"
    user_data = await state.get_data()
    sent_message_id = user_data.get('sent_message_id')
    sent_message = await callback_query.message.edit_text(
        f"–¢–µ–∫—É—â–∏–µ server_ids: `{current_ids_text}`\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ server_ids –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∑–∞–ø—è—Ç—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1,2,3`):",parse_mode="Markdown",
        reply_markup=cancel_button.as_markup()
    )
    await state.update_data(sent_message_id=sent_message.message_id, chat_id=callback_query.message.chat.id)
    await state.set_state(ChangeServerIdsState.waiting_for_server_ids)

@router.message(ChangeServerIdsState.waiting_for_server_ids)
async def process_server_ids(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è server_ids"""
    try:
        server_ids = list(map(int, message.text.split(',')))
        update_server_ids_in_db(server_ids)
        user_data = await state.get_data()
        sent_message_id = user_data.get('sent_message_id')
        chat_id = user_data.get('chat_id')
        if sent_message_id and chat_id:
            await message.bot.delete_message(chat_id=chat_id, message_id=sent_message_id)
        await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ server_ids —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {', '.join(map(str, server_ids))}")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è server_ids: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è server_ids. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(AddServerState.waiting_for_data)
async def process_server_data(msg: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        data = msg.text.split(", ")
        server_data = {
            "id": int(data[0]),
            "total_slots": int(data[1]),
            "name": data[2],
            "username": data[3],
            "password": data[4],
            "server_ip": data[5],
            "base_url": data[6],
            "subscription_base": data[7],
            "subscription_urls": {
                "sub_url": data[8],
                "json_sub": data[9],
            },
            "inbound_ids": list(map(int, data[10].split(";"))),
        }
        server_db.add_server(server_data)

        await msg.answer("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data == "show_full_servers_info")
async def show_full_servers_info_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö(–≥—Ä—É–ø–ø–∞—Ö)."""
    await callback_query.answer()

    server_info = get_full_server_info()
    if server_info:
        servers_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö:\n\n"
        for server in server_info:
            servers_text += (
                f"ID: {server['id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {server['name']}\n"
                f"–ú–µ—Å—Ç: {server['total_slots']}\n"
                f"–õ–æ–≥–∏–Ω: {server['username']}\n"
                f"–ü–∞—Ä–æ–ª—å: {server['password']}\n"
                f"IP: {server['server_ip']}\n"
                f"Base URL: {server['base_url']}\n"
                f"Subscription Base: {server['subscription_base']}\n"
                f"Sub URL: {server['sub_url']}\n"
                f"JSON Sub: {server['json_sub']}\n"
                f"Inbound VLESS ID: {server['inbound_ids']}\n\n"
            )
    else:
        servers_text = "–°–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"

    server_groups = get_server_groups()
    if server_groups:
        clusters_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö:\n\n"
        for group in server_groups:
            clusters_text += (
                f"–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞: {group['group_name']}\n"
                f"–°–µ—Ä–≤–µ—Ä—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ: {group['server_ids']}\n\n"
            )
    else:
        clusters_text = "–ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
    await callback_query.message.answer(f"{servers_text}\n{clusters_text}")
    
@router.callback_query(lambda c: c.data == "edit_server")
async def edit_server_select(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback_query.answer()
    servers = get_servers()
    if not servers:
        await callback_query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    keyboard = InlineKeyboardBuilder()
    for server in servers:
        server_id, server_name = server
        keyboard.add(InlineKeyboardButton(text=f"{server_name} (ID: {server_id})", callback_data=f"select_server_{server_id}"))
    keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin"))
    sent_message = await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=keyboard.adjust(1).as_markup()
    )
    await state.update_data(sent_message_id=sent_message.message_id, chat_id=callback_query.message.chat.id)


@router.callback_query(lambda c: c.data.startswith("select_server_"))
async def select_server_for_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    await callback_query.answer()
    server_id = int(callback_query.data.split("_")[-1])

    await state.update_data(server_id=server_id)
    cancel_button = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin")
    )
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å ID: {server_id}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n"
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: `total_slots`, `name`, `username`, `password`, `server_ip`, `base_url`, `subscription_base`, `sub_url`, `json_sub`, `inbound_ids`\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `total_slots`) –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π.\n"
        "–ü—Ä–∏–º–µ—Ä: `total_slots, 150`",
        parse_mode="Markdown",
        reply_markup=cancel_button.as_markup()
    )

    await state.set_state(EditServerState.waiting_for_param)

@router.message(EditServerState.waiting_for_param)
async def process_edit_server_param(msg: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        data = msg.text.split(", ")
        if len(data) != 2:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π.\n–ü—Ä–∏–º–µ—Ä: `total_slots, 150`", parse_mode="Markdown")
            return

        param = data[0].strip()
        new_value = data[1].strip()

        user_data = await state.get_data()
        server_id = user_data.get("server_id")

        valid_params = ["total_slots", "name", "username", "password", "server_ip", "base_url", "subscription_base", "sub_url", "json_sub", "inbound_ids"]
        if param not in valid_params:
            await msg.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(valid_params)}.")
            return
        success = update_server_data(server_id, param, new_value)

        if success:
            await msg.answer(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä '{param}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{new_value}'.")
        else:
            await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(lambda c: c.data == "d_server")
async def delete_server_select(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await callback_query.answer()
    servers = get_servers()
    if not servers:
        await callback_query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardBuilder()
    for server in servers:
        server_id, server_name = server
        keyboard.add(InlineKeyboardButton(text=f"{server_name} (ID: {server_id})", callback_data=f"select_delete_server_{server_id}"))

    keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin"))

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=keyboard.adjust(1).as_markup()
    )

@router.callback_query(lambda c: c.data.startswith("select_delete_server_"))
async def confirm_delete_server(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    await callback_query.answer()
    server_id = int(callback_query.data.split("_")[-1])

    await state.update_data(server_id=server_id)

    keyboard = InlineKeyboardBuilder().add(
        InlineKeyboardButton(text=BUTTON_TEXTS["confirm_delete"], callback_data=f"server_confirm_{server_id}"),
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"],callback_data="cancel_admin")
    )

    await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å ID {server_id}?",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(lambda c: c.data.startswith("server_confirm"))
async def process_delete_server(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    await callback_query.answer()

    server_id = int(callback_query.data.split("_")[-1])
    success = delete_server(server_id)
    if success:
        await callback_query.message.edit_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Å ID {server_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        await callback_query.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å ID {server_id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()


def is_valid_server_ids(server_ids: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.
    –§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1,2,3").
    """
    return bool(re.match(r"^\d+(,\d+)*$", server_ids))


@router.callback_query(lambda c: c.data.startswith("change_group_server"))
async def add_or_update_server_group(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–æ–≤.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin"))

    sent_message = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É –≤–∞—Å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1', '2', 'random'):",
        reply_markup=keyboard.as_markup()
    )
    await state.update_data(
        sent_message_id=sent_message.message_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
        chat_id=callback.message.chat.id,
        previous_message_id=callback.message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    )
    await state.set_state(ServerGroupForm.waiting_for_group_name)
    await callback.answer()


@router.message(ServerGroupForm.waiting_for_group_name)
async def process_group_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≥—Ä—É–ø–ø—ã.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.
    """
    user_data = await state.get_data()
    sent_message_id = user_data.get('sent_message_id')  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
    chat_id = user_data.get('chat_id')

    if sent_message_id and chat_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=sent_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin"))

    await state.update_data(group_name=message.text)
    sent_message = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ID —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1,3,5'):\n\n"
        "–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞ –±–æ—Ç –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–µ—Ä '1', –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç, —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö 1, 2 –∏ 3, "
        "–∏ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
        reply_markup=keyboard.as_markup()
    )
    await state.update_data(
        sent_message_id=sent_message.message_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        previous_message_id=message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    )
    await state.set_state(ServerGroupForm.waiting_for_server_ids)


@router.message(ServerGroupForm.waiting_for_server_ids)
async def process_server(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    user_data = await state.get_data()
    group_name = user_data["group_name"]
    server_ids = message.text
    sent_message_id = user_data.get('sent_message_id')
    chat_id = user_data.get('chat_id')
    previous_message_id = user_data.get('previous_message_id')
    if sent_message_id and chat_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=sent_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if not is_valid_server_ids(server_ids):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤. "
            "–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1,3,5')."
        )
        return

    try:
        connection = sqlite3.connect(SERVEDATABASE)
        cursor = connection.cursor()

        cursor.execute(
            "INSERT OR REPLACE INTO server_groups (group_name, server_ids) VALUES (?, ?)",
            (group_name, server_ids),
        )
        connection.commit()

        await message.answer(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ '{group_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n\n"
            f"–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤: {server_ids}"
        )
    except Exception as e:
        if sent_message_id and chat_id:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=sent_message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}"
            )
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}"
            )
    finally:
        connection.close()
        await state.clear()
        