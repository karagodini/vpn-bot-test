"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞ –≤ Telegram, –≤–∫–ª—é—á–∞—è:
- –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞).
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤, —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.
- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ —á–µ—Ä–µ–∑ FSM (Finite State Machine) –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ aiogram.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
2. –ú–µ—Ö–∞–Ω–∏–∑–º —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º.
5. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
"""

import sqlite3, asyncio, os, shutil, aiosqlite
from datetime import datetime
from aiogram import types
import io
import pandas as pd
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import InlineKeyboardButton
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from db.db import Database, get_server_ids_as_list
from aiogram.types.input_file import FSInputFile
from aiogram import Router, F
from aiogram.types import ContentType, Message
from aiogram.fsm.state import State, StatesGroup
import random
import string
import logging
import aiohttp
import json
from db.db import get_referral_info_by_code
from aiogram.types import InlineKeyboardMarkup
from client.upd_sub import update_client_subscription

logger = logging.getLogger(__name__)

from log import logger
from admin.delete_clients import get_inactive_clients, delete_depleted_clients
from bot import bot
from client.add_client import login
from handlers.config import get_server_data
from admin.sub_check import scheduled_check_subscriptions, get_server_ids_as_list_for_days_left
from handlers.states import BroadcastState, AddPromoCodeState, ManagePromoCodeState, ManageServerGroupState
from buttons.admin import BUTTON_TEXTS
from admin.delete_clients import scheduled_delete_clients
from dotenv import load_dotenv
import os

load_dotenv()
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))
USERSDATABASE = os.getenv("USERSDATABASE")
SERVEDATABASE = os.getenv("SERVEDATABASE")
DATABASE_PATH = os.getenv("DATABASE_PATH")
BACKUP_DIR = os.getenv("BACKUP_DIR")
router = Router()

@router.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    chat_id = message.chat.id
    await message.answer(f"Chat ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode="Markdown")

@router.callback_query(lambda query: query.data == "cancel_admin")
async def cancel_action(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
    data = await state.get_data()
    sent_message_id = data.get('sent_message_id')

    cancel_message = await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=sent_message_id,
        text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    
    await asyncio.sleep(0.5)
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=cancel_message.message_id
    )

    await state.clear()
    await callback_query.answer()

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await message.delete()

    user_id = message.from_user.id
    username = message.from_user.username or "(–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"

    if user_id not in ADMIN_IDS:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: User ID: {user_id}, Username: {username}")
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} (ID: {user_id}) –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    keyboard = ReplyKeyboardBuilder()
    keyboard.row(
        types.KeyboardButton(text=BUTTON_TEXTS["broadcast"]),
        types.KeyboardButton(text=BUTTON_TEXTS["send_message"])
    )
    keyboard.row(
        types.KeyboardButton(text=BUTTON_TEXTS["add_promo_code"]),
        types.KeyboardButton(text=BUTTON_TEXTS["delete_promo_code"])
    )
    keyboard.row(
        types.KeyboardButton(text=BUTTON_TEXTS["delete_clients"])
    )
    keyboard.row(
        types.KeyboardButton(text=BUTTON_TEXTS["top_referrers"]),
        types.KeyboardButton(text=BUTTON_TEXTS["statistics"])
    )
    keyboard.row(
        types.KeyboardButton(text=BUTTON_TEXTS["work_with_servers"]),
        types.KeyboardButton(text=BUTTON_TEXTS["referrals"])
    )
    keyboard.row(
        types.KeyboardButton(text=BUTTON_TEXTS["days_sub"]),
        types.KeyboardButton(text=BUTTON_TEXTS["edit_users"])
    )
    keyboard.row(
        types.KeyboardButton(text=BUTTON_TEXTS["backup"]),
        types.KeyboardButton(text=BUTTON_TEXTS["restart_bot"])
    )
    await message.answer(
        "**–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n",
        reply_markup=keyboard.as_markup(resize_keyboard=True),
        parse_mode="Markdown"
    )

@router.message(Command("referal"))
async def referal_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="üìä –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ Excel",
            callback_data="export_referrals"
        )]
    ])

    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.",
        reply_markup=keyboard
    )




@router.callback_query(lambda c: c.data == "export_referrals")
async def export_referrals_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...", show_alert=False)

    try:
        async with aiosqlite.connect("users.db") as conn:
            cursor = await conn.execute("SELECT id, telegram_user FROM referal_tables")
            rows = await cursor.fetchall()

        if not rows:
            return await callback_query.message.answer("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")

        df = pd.DataFrame(rows, columns=["ID", "Telegram User"])
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='Referrals')
        output.seek(0)

        file = BufferedInputFile(output.read(), filename="referal_tables.xlsx")
        await callback_query.message.answer_document(file)

    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")






class BroadcastState(StatesGroup):
    waiting_for_message = State()
    waiting_for_audience = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏

@router.message(F.text == BUTTON_TEXTS["send_message"])
async def start_broadcast(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await message.delete()

    if message.chat.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    audience_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="broadcast_audience:trial"),
            InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="broadcast_audience:paid")
        ],
        [
            InlineKeyboardButton(text="–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="broadcast_audience:no_sub"),
            InlineKeyboardButton(text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="broadcast_audience:all")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å", callback_data="send_to_expired")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")
        ]
    ])

    sent_message = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=audience_keyboard
    )
    
    await state.update_data(sent_message_id=sent_message.message_id, chat_id=sent_message.chat.id)
    await state.set_state(BroadcastState.waiting_for_audience)

@router.callback_query(BroadcastState.waiting_for_audience, F.data.startswith("broadcast_audience:"))
async def select_audience(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    audience_type = callback.data.split(":")[1]
    await state.update_data(audience_type=audience_type)
    
    cancel_button = InlineKeyboardBuilder()
    cancel_button.add(
        InlineKeyboardButton(
            text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin"
        )
    )

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(BroadcastState.waiting_for_message)
    await callback.answer()


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ "–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"
class ExpiredSubscriptionBroadcast(StatesGroup):
    waiting_for_message_zero = State()

@router.callback_query(F.data == "send_to_expired")
async def start_broadcast_expired(call: CallbackQuery, state: FSMContext):
    await call.answer()

    if call.from_user.id not in ADMIN_IDS:
        await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    await call.message.edit_text(
        "üì¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å <b>–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π</b>.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(ExpiredSubscriptionBroadcast.waiting_for_message_zero)

@router.message(
    F.content_type.in_({'text', 'photo', 'document', 'video', 'audio'}),
    ExpiredSubscriptionBroadcast.waiting_for_message_zero
)
async def broadcast_to_expired_subscribers(message: Message, state: FSMContext):
    content_type = message.content_type

    if content_type == ContentType.TEXT and message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        return

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö days_left <= 0
    async with aiosqlite.connect("users.db") as conn:
        # –ù–∞–º –Ω—É–∂–Ω–æ:
        # users.telegram_id
        # WHERE —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å email –≤ user_emails
        # –ò —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω user_configs.days_left <= 0
        query = """
            SELECT DISTINCT u.telegram_id
            FROM users u
            JOIN user_emails ue ON u.id = ue.user_id
            JOIN user_configs uc ON ue.email = uc.email
            WHERE uc.days_left <= 0
        """
        async with conn.execute(query) as cursor:
            rows = await cursor.fetchall()
            users_data = [(row[0],) for row in rows]  # telegram_id

    await state.clear()

    if not users_data:
        await message.answer("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")
        return

    audience_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"
    await message.answer(
        f"üì¨ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è <b>{audience_name}</b> –Ω–∞ <b>{len(users_data)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        parse_mode="HTML"
    )

    good_send, bad_send = await broadcast_message(
        users_data=users_data,
        text=message.text if content_type == ContentType.TEXT else None,
        photo_id=message.photo[-1].file_id if content_type == ContentType.PHOTO else None,
        document_id=message.document.file_id if content_type == ContentType.DOCUMENT else None,
        video_id=message.video.file_id if content_type == ContentType.VIDEO else None,
        audio_id=message.audio.file_id if content_type == ContentType.AUDIO else None,
        caption=message.caption,
        content_type=content_type
    )

    def pluralize(count):
        if 11 <= count % 100 <= 19:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        if count % 10 == 1:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if 2 <= count % 10 <= 4:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"üì¨ –ü–æ–ª—É—á–∏–ª–∏: <b>{good_send}</b> {pluralize(good_send)}\n"
        f"‚õî –ù–µ –ø–æ–ª—É—á–∏–ª–∏: <b>{bad_send}</b> {pluralize(bad_send)}",
        parse_mode="HTML"
    )

@router.message(F.content_type.in_({'text', 'photo', 'document', 'video', 'audio'}), BroadcastState.waiting_for_message)
async def universe_broadcast(message: Message, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    data = await state.get_data()
    audience_type = data.get("audience_type", "all")
    
    # üîΩ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥ —Ç–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if audience_type == "trial":
        # –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–±–Ω—É—é, –Ω–æ –Ω–µ –ø–ª–∞—Ç–∏–ª
        query = "SELECT telegram_id FROM users WHERE has_trial = 1 AND sum_my = 0"
    elif audience_type == "paid":
        # –û–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: —á—Ç–æ-—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª
        query = "SELECT telegram_id FROM users WHERE sum_my > 0"
    elif audience_type == "no_sub":
        # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: –Ω–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–æ–±–Ω—É—é –∏ –Ω–µ –ø–ª–∞—Ç–∏–ª
        query = "SELECT telegram_id FROM users WHERE has_trial = 0 AND sum_my = 0"
    else:  # all
        query = "SELECT telegram_id FROM users"

    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query)
            users_data = await cursor.fetchall()

    content_type = message.content_type

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–û—Ç–º–µ–Ω–∞"
    if content_type == ContentType.TEXT and message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        return

    await state.clear()
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    audience_name = {
        "trial": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "paid": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        "no_sub": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    }.get(audience_type, "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    await message.answer(f'üì¨ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è <b>{audience_name}</b> –Ω–∞ <b>{len(users_data)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', parse_mode="HTML")

    good_send, bad_send = await broadcast_message(
        users_data=users_data,
        text=message.text if content_type == ContentType.TEXT else None,
        photo_id=message.photo[-1].file_id if content_type == ContentType.PHOTO else None,
        document_id=message.document.file_id if content_type == ContentType.DOCUMENT else None,
        video_id=message.video.file_id if content_type == ContentType.VIDEO else None,
        audio_id=message.audio.file_id if content_type == ContentType.AUDIO else None,
        caption=message.caption,
        content_type=content_type
    )

    def pluralize_users(count):
        if 11 <= count % 100 <= 19:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        if count % 10 == 1:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if 2 <= count % 10 <= 4:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"üì¨ –ü–æ–ª—É—á–∏–ª–∏: <b>{good_send}</b> {pluralize_users(good_send)}\n"
        f"‚õî –ù–µ –ø–æ–ª—É—á–∏–ª–∏: <b>{bad_send}</b> {pluralize_users(bad_send)}",
        parse_mode="HTML"
    )


async def broadcast_message(users_data, text=None, photo_id=None, document_id=None, video_id=None, audio_id=None, caption=None, content_type=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    successful, failed = 0, 0

    for user in users_data:
        user_id = user[0]
        try:
            if content_type == ContentType.TEXT:
                await bot.send_message(user_id, text)
            elif content_type == ContentType.PHOTO:
                await bot.send_photo(user_id, photo_id, caption=caption)
            elif content_type == ContentType.DOCUMENT:
                await bot.send_document(user_id, document_id, caption=caption)
            elif content_type == ContentType.VIDEO:
                await bot.send_video(user_id, video_id, caption=caption)
            elif content_type == ContentType.AUDIO:
                await bot.send_audio(user_id, audio_id, caption=caption)

            successful += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    return successful, failed

@router.message(F.text == BUTTON_TEXTS["broadcast"])
async def check_subscription_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Ö –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."""
    await message.delete()
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await scheduled_check_subscriptions()
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@router.message(F.text == BUTTON_TEXTS["statistics"])
@router.message(Command("stats"))
async def show_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID."""
    await message.delete()

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (/stats <telegram_id>)
    args = message.text.split()
    user_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    conn = sqlite3.connect(USERSDATABASE)
    cursor = conn.cursor()

    if user_id:
        cursor.execute(
            """
            SELECT telegram_link, telegram_id, referral_count, sum_my, sum_ref, entry_date
            FROM users WHERE telegram_id = ?
            """,
            (user_id,)
        )
        user_data = cursor.fetchone()

        if user_data:
            telegram_link, telegram_id, referral_count, sum_my, sum_ref, entry_date = user_data
            user_stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üë§ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º:</b> {telegram_link or 'N/A'}\n"
                f"üÜî <b>Telegram ID:</b> <code>{telegram_id}</code>\n"
                f"üóì <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {entry_date or 'N/A'}\n\n"
                f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {referral_count}\n"
                f"üí∞ <b>–ü–æ—Ç—Ä–∞—Ç–∏–ª —Å–∞–º:</b> {sum_my or 0} ‚ÇΩ\n"
                f"üí∏ <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏:</b> {sum_ref or 0} ‚ÇΩ\n"
            )
            await message.answer(user_stats_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        else:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

    else:
        # –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute("SELECT COUNT(*) FROM users")
        total_bot_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE sum_my != 0")
        total_bot_userssum = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM user_emails")
        total_clients = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE has_trial = 1")
        users_with_trial = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE has_trial = 0 OR sum_my = 0")
        users_bez_podpiski = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM users WHERE promo_code_usage > 0")
        users_with_promo = cursor.fetchone()[0]

        cursor.execute("SELECT SUM(referral_count) FROM users")
        total_referrals = cursor.fetchone()[0] or 0

        cursor.execute("SELECT MIN(entry_date), MAX(entry_date) FROM users")
        first_user_date, last_user_date = cursor.fetchone()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:</b> {total_bot_users}\n"
            f"üë• <b>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ–¥–ø–∏—Å–æ–∫):</b> {total_bot_users}\n"
            f"üéÅ <b>–ü—Ä–æ–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {users_with_trial}\n"
            f"üë• <b>–û–ø–ª–∞—á–µ–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {total_bot_userssum}\n"
            f"üë• <b>–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {users_bez_podpiski}\n"
            f"üè∑ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:</b> {users_with_promo}\n\n"
            f"üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {total_referrals}\n"
            f"üìà <b>–°—Ä–µ–¥–Ω–µ–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {total_referrals / total_bot_users if total_bot_users else 0:.2f}\n"
            f"üóì <b>–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {first_user_date or 'N/A'}\n"
            f"üóì <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {last_user_date or 'N/A'}\n\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(stats_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cursor.close()
    conn.close()


@router.message(F.text == BUTTON_TEXTS["top_referrers"])
@router.message(Command("top"))
async def show_top_referrers(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await message.delete()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ë–î
    if not os.path.exists(USERSDATABASE):
        logger.error("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("‚ö†Ô∏è –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        conn = sqlite3.connect(USERSDATABASE)
        cursor = conn.cursor()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users';")
        if not cursor.fetchone():
            await message.answer("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ó–∞–ø—Ä–æ—Å —Ç–æ–ø-100 —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤
        cursor.execute("""
            SELECT 
                telegram_link, 
                telegram_id, 
                referral_count, 
                sum_my, 
                sum_ref 
            FROM users 
            WHERE referral_count > 0 
            ORDER BY referral_count DESC 
            LIMIT 100
        """)
        top_referrers = cursor.fetchall()

        if not top_referrers:
            await message.answer("ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–æ–≤–æ–¥–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üèÜ <b>–¢–æ–ø-100 —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤</b>\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

        for i, (telegram_link, telegram_id, referral_count, sum_my, sum_ref) in enumerate(top_referrers, 1):
            link = telegram_link or f"<a href='tg://user?id={telegram_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}</a>"
            sum_my_display = sum_my or 0
            sum_ref_display = sum_ref or 0
            text += (
                f"{i}. {link} (<code>{telegram_id}</code>) ‚Äî "
                f"{referral_count} —Ä–µ—Ñ., "
                f"–ø–æ—Ç—Ä–∞—Ç–∏–ª {sum_my_display} ‚ÇΩ, "
                f"—Ä–µ—Ñ–µ—Ä–∞–ª—ã ‚Äî {sum_ref_display} ‚ÇΩ\n"
            )

        await message.answer(text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ø-100 —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ: {len(top_referrers)})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–æ–ø–∞ —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤.")

    finally:
        try:
            cursor.close()
            conn.close()
        except:
            pass


@router.message(F.text == BUTTON_TEXTS["delete_clients"])
async def cmd_delete_clients(message: types.Message):
    await message.delete()
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")

    server_ids = await get_server_ids_as_list(SERVEDATABASE)
    results = []

    for server_selection in server_ids:
        server_data = await get_server_data(server_selection)
        
        if not server_data:
            results.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞: {server_selection}.")
            continue

        try:
            session_id = await login(server_data['login_url'], {
                "username": server_data['username'],
                "password": server_data['password']
            })

            inactive_clients = await get_inactive_clients(server_data['list_clients_url'], session_id)
            results.append(f"–°–µ—Ä–≤–µ—Ä {server_data['name']}:\n{inactive_clients}")
            await scheduled_delete_clients()
            deleted_clients = await delete_depleted_clients(server_data['delete_depleted_clients_url'], session_id)
            results.append(f"–°–µ—Ä–≤–µ—Ä {server_data['name']}: {deleted_clients}")
        except Exception as e:
            results.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data['name']}: {str(e)}")

    await message.answer("\n".join(results))


@router.message(F.text == BUTTON_TEXTS["restart_bot"])
async def restart_bot(message: types.Message):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await message.delete()
    await message.answer(
        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode=ParseMode.HTML
    )

    restart_command = ['sudo', 'systemctl', 'restart', 'bot.service']

    await asyncio.create_subprocess_exec(
        *restart_command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )


@router.message(F.text == BUTTON_TEXTS["backup"])
async def create_backup(message: types.Message):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞–¥–º–∏–Ω—É."""
    await message.delete()
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    backup_filename = f"backup_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.db"
    backup_path = os.path.join(BACKUP_DIR, backup_filename)

    try:
        shutil.copy(DATABASE_PATH, backup_path)
        logger.info(f"–ë–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: {backup_path}")
        await message.answer_document(
            document=FSInputFile(backup_path),
            caption=f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: `{backup_filename}`",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if os.path.exists(backup_path):
            os.remove(backup_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∫–∞–ø–∞ —É–¥–∞–ª–µ–Ω: {backup_path}")
            

class AddPromoCodeState(StatesGroup):
    WaitingForCode = State()
    WaitingForDiscount = State()
    WaitingForDays = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–Ω–µ–π

@router.message(F.text == BUTTON_TEXTS["add_promo_code"])
async def start_adding_promo_code(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—è —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    await message.delete()
    try:
        db = Database(USERSDATABASE) 
        db.cursor.execute('''SELECT code, discount, days FROM promo_codes WHERE is_active = 1''')
        promo_codes = db.cursor.fetchall()

        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_admin")
        )

        if promo_codes:
            promo_codes_list = "\n".join(
                [f"ü§ë –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code[0]} - –°–∫–∏–¥–∫–∞: {promo_code[1]}% - –î–Ω–µ–π: {promo_code[2]}" 
                 for promo_code in promo_codes]
            )
            sent_message = await message.answer(
                f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n{promo_codes_list}\n\n–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:",
                reply_markup=keyboard.adjust(1).as_markup()
            )
        else:
            sent_message = await message.answer(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤. –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:",
                reply_markup=keyboard.adjust(1).as_markup()
            )

        await state.set_state(AddPromoCodeState.WaitingForCode)
        await state.update_data(sent_message_id=sent_message.message_id, chat_id=sent_message.chat.id)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")

@router.message(AddPromoCodeState.WaitingForCode)
async def process_promo_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏."""
    promo_code = message.text.strip()
    if not promo_code:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
        
    await state.update_data(promo_code=promo_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è 10%):")
    await state.set_state(AddPromoCodeState.WaitingForDiscount)

@router.message(AddPromoCodeState.WaitingForDiscount)
async def process_discount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å–∫–∏–¥–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."""
    try:
        discount = int(message.text)
        if not (0 < discount <= 100):
            raise ValueError("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            
        await state.update_data(discount=discount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:")
        await state.set_state(AddPromoCodeState.WaitingForDays)
        
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100).")

@router.message(AddPromoCodeState.WaitingForDays)
async def process_days(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥."""
    try:
        days = int(message.text)
        if days <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            
        data = await state.get_data()
        promo_code = data["promo_code"]
        discount = data["discount"]

        try:
            db = Database(USERSDATABASE)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                db.cursor.execute("ALTER TABLE promo_codes ADD COLUMN days INTEGER DEFAULT 30")
            except sqlite3.OperationalError:
                pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
            db.cursor.execute('''
                INSERT INTO promo_codes (code, discount, days, is_active)
                VALUES (?, ?, ?, 1)
            ''', (promo_code, discount, days))
            db.connection.commit()
            
            await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                f"–°–∫–∏–¥–∫–∞: {discount}%\n"
                f"–î–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {days}"
            )
        except sqlite3.IntegrityError:
            await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        finally:
            await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")

@router.message(F.text == BUTTON_TEXTS["delete_promo_code"])
async def start_deleting_promo_code(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—è —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    await message.delete()
    try:
        db = Database(USERSDATABASE)
        db.cursor.execute('''SELECT code, discount FROM promo_codes WHERE is_active = 1''')
        promo_codes = db.cursor.fetchall()

        if promo_codes:
            keyboard = InlineKeyboardBuilder()
            for promo_code in promo_codes:
                keyboard.add(
                    InlineKeyboardButton(
                        text=f"ü§ë {promo_code[0]} - {promo_code[1]}%",
                        callback_data=f"delete_{promo_code[0]}"
                    )
                )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.adjust(1).as_markup())
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def confirm_delete_promo_code(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    promo_code = callback_query.data.split("_")[1]
    await state.update_data(promo_code_to_delete=promo_code)

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text=BUTTON_TEXTS["confirm_delete"], callback_data="confirm_delete"),
        InlineKeyboardButton(text=BUTTON_TEXTS["no_delete"], callback_data="cancel_admin")
    )

    sent_message = await callback_query.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ '{promo_code}'?",
        reply_markup=keyboard.adjust(2).as_markup()
    )
    await state.update_data(sent_message_id=sent_message.message_id, chat_id=callback_query.message.chat.id)
    await state.set_state(ManagePromoCodeState.WaitingForDeleteConfirmation)


@router.callback_query(lambda c: c.data == "confirm_delete")
async def delete_promo_code(callback_query: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    await state.set_state(ManagePromoCodeState.WaitingForDeleteConfirmation)

    data = await state.get_data()
    promo_code_to_delete = data.get("promo_code_to_delete")
    try:
        db = Database(USERSDATABASE)
        db.cursor.execute('''
            DELETE FROM promo_codes
            WHERE code = ?
        ''', (promo_code_to_delete,))
        db.connection.commit()
        await callback_query.message.edit_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
    finally:
        await state.clear()
   
        
@router.message(Command("reset_ref"))
async def reset_referral_sum(message: types.Message):
    """–û–±–Ω—É–ª—è–µ—Ç —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ (sum_ref) —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await message.delete()

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä:\n<code>/reset_ref 123456789</code>", parse_mode=ParseMode.HTML)
        return

    user_id = int(args[1])

    conn = sqlite3.connect(USERSDATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_link, sum_ref FROM users WHERE telegram_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    else:
        telegram_link, sum_ref = user_data
        cursor.execute("UPDATE users SET sum_ref = 0 WHERE telegram_id = ?", (user_id,))
        conn.commit()

        await message.answer(
            f"‚úÖ <b>–û–±–Ω—É–ª–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—É–º–º–∞</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {telegram_link or 'N/A'} (<code>{user_id}</code>)\n"
            f"üí∏ <b>–ë—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ:</b> {sum_ref or 0} ‚ÇΩ",
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

    cursor.close()
    conn.close()
    
    
@router.callback_query(lambda c: c.data == "cluster_delete")
async def start_deleting_server_group(callback_query: types.CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞—è —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø."""
    await callback_query.message.delete()

    db = Database(SERVEDATABASE)
    try:
        db.cursor.execute('SELECT group_name FROM server_groups')
        server_groups = db.cursor.fetchall()
        db.connection.close()

        if server_groups:
            keyboard = InlineKeyboardBuilder()
            for group in server_groups:
                keyboard.add(
                    InlineKeyboardButton(
                        text=f"üóÇ {group[0]}",
                        callback_data=f"cluster_delete_{group[0]}"
                    )
                )
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=keyboard.adjust(1).as_markup()
            )
        else:
            await callback_query.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    except Exception as e:
        db.connection.close()
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")


@router.callback_query(lambda c: c.data.startswith("cluster_delete_"))
async def delete_server_group(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    group_name = callback_query.data.split("_", 2)[2]

    db = Database(SERVEDATABASE)
    try:
        db.cursor.execute('DELETE FROM server_groups WHERE group_name = ?', (group_name,))
        db.connection.commit()
        db.connection.close()

        await callback_query.message.edit_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ '{group_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    except Exception as e:
        db.connection.close()
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")

#–≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
class AddReferal(StatesGroup):
    waiting_for_name = State()

@router.message(F.text == BUTTON_TEXTS["referrals"])
async def show_referral_options(message: types.Message):
    kb = ReplyKeyboardBuilder()
    kb.row(
        types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª"),
        types.KeyboardButton(text="üìã –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup(resize_keyboard=True))

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª")
async def ask_for_referral_name(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:")
    await state.set_state(AddReferal.waiting_for_name)

@router.message(AddReferal.waiting_for_name)
async def create_referral(message: types.Message, state: FSMContext, bot):
    name = message.text.strip()
    user_id = message.from_user.id
    code = ''.join(random.choices(string.ascii_letters + string.digits, k=10))

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO referals (user_id, name, code) VALUES (?, ?, ?)", (user_id, name, code))
    conn.commit()
    conn.close()

    bot_username = (await bot.get_me()).username
    link = f"https://t.me/{bot_username}?start={code}"

    await message.answer(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª —Å–æ–∑–¥–∞–Ω: <b>{name}</b>\n–°—Å—ã–ª–∫–∞: {link}", parse_mode="HTML")
    await state.clear()

@router.message(F.text == "üìã –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
async def list_all_referrals(message: types.Message):
    user_id = message.from_user.id

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, code FROM referals WHERE user_id = ?", (user_id,))
    referals = cursor.fetchall()
    conn.close()

    if not referals:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
        return

    kb = InlineKeyboardBuilder()
    for name, code in referals:
        kb.add(InlineKeyboardButton(text=name, callback_data=f"ref_link:{code}"))

    await message.answer("–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:", reply_markup=kb.adjust(1).as_markup())

@router.callback_query(F.data.startswith("ref_link:"))
async def show_referral_details(callback: types.CallbackQuery):
    code = callback.data.split(":")[1]

    referral = await get_referral_info_by_code(code)
    
    if referral:
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ‚Ä¶", show_alert=False)
        name, code, clicks = referral

        async with aiosqlite.connect("users.db") as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã referals
            cursor = await conn.execute(
                "SELECT amount FROM referals WHERE code = ?",
                (code,)
            )
            referral_data = await cursor.fetchone()
            total_amount = referral_data[0] if referral_data else 0

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
            cursor = await conn.execute("""
                SELECT 
                    SUM(CASE WHEN has_trial = 1 AND (sum_my = 0 OR sum_my IS NULL) THEN 1 ELSE 0 END) as free_subs,
                    SUM(CASE WHEN sum_my > 0 THEN 1 ELSE 0 END) as paid_subs,
                    SUM(CASE WHEN has_trial = 0 AND (sum_my = 0 OR sum_my IS NULL) THEN 1 ELSE 0 END) as no_subs
                FROM users
                WHERE referrer_code = ?
            """, (code,))
            
            stats = await cursor.fetchone()
            free_count = stats[0] or 0
            paid_count = stats[1] or 0
            no_sub_count = stats[2] or 0

        bot_username = (await callback.bot.get_me()).username
        link = f"https://t.me/{bot_username}?start={code}"

        await callback.message.edit_text(
            f"<b>üë§ –†–µ—Ñ–µ—Ä–∞–ª:</b> {name}\n\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞:</b> <code>{link}</code>\n"
            f"<b>üîó –†–µ—Ñ –∫–æ–¥:</b> <code>{code}</code>\n"
            f"<b>üë£ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {clicks}\n"
            f"<b>üí∏ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {total_amount} —Ä—É–±.\n\n"
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–±–Ω—ã–µ: {free_count}\n"
            f"‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ: {paid_count}\n"
            f"‚Ä¢ –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {no_sub_count}",
            parse_mode="HTML",
            reply_markup=create_ref_stats_keyboard()
        )
    else:
        await callback.answer("‚ùå –†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)



def create_ref_stats_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_ref_stats")
    return kb.as_markup()



async def sync_days_left_from_servers():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç days_left –≤ user_configs —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤.
    –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, —Ç–∞–∫ –∏ –ø–æ –∫–Ω–æ–ø–∫–µ.
    """
    logger.info("üîÑ [sync_days_left_from_servers] –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

    try:
        async with aiosqlite.connect("users.db") as conn:
            async with conn.execute("SELECT email FROM user_configs") as cursor:
                rows = await cursor.fetchall()
                emails = [row[0] for row in rows]
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(emails)} email'–æ–≤ –≤ user_configs.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è user_configs: {e}")
        return

    if not emails:
        logger.info("üì≠ –ù–µ—Ç email'–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
        return

    try:
        server_ids = await get_server_ids_as_list_for_days_left("servers.db")
        if not server_ids:
            logger.warning("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
            return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        return

    updated_count = 0

    for server_id in server_ids:
        server_data = await get_server_data(server_id)
        if not server_data:
            continue

        async with aiohttp.ClientSession() as session:
            try:
                # –õ–æ–≥–∏–Ω
                login_resp = await session.post(
                    server_data["login_url"],
                    json={"username": server_data["username"], "password": server_data["password"]}
                )
                if login_resp.status != 200:
                    continue
                session_id = login_resp.cookies.get('3x-ui').value
                headers = {'Accept': 'application/json', 'Cookie': f'3x-ui={session_id}'}

                for inbound_id in server_data["inbound_ids"]:
                    inbound_url = f"{server_data['config_client_url']}/{inbound_id}"
                    resp = await session.get(inbound_url, headers=headers)
                    if resp.status != 200:
                        continue
                    data = await resp.json()
                    clients = json.loads(data['obj']['settings']).get('clients', [])

                    for client in clients:
                        email = client.get('email')
                        if not email or email not in emails:
                            continue

                        expiry_time = client.get('expiryTime')
                        if not expiry_time or expiry_time <= 0:
                            days_left = -1
                        else:
                            expiry_dt = datetime.fromtimestamp(expiry_time / 1000)
                            days_left = (expiry_dt.date() - datetime.now().date()).days

                        async with aiosqlite.connect("users.db") as conn:
                            await conn.execute(
                                "UPDATE user_configs SET days_left = ? WHERE email = ?",
                                (days_left, email)
                            )
                            await conn.commit()
                        updated_count += 1

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")

    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –∑–∞–ø–∏—Å–µ–π.")

@router.message(F.text == BUTTON_TEXTS["days_sub"])
async def update_all_days_left_on_startup(message: types.Message):
    await message.delete()
    sent_message = await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–≤...")

    await sync_days_left_from_servers()  # ‚Üê –≤—ã–∑–æ–≤ –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏

    await sent_message.edit_text("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


"""
–ë–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

"""
class AdminUserSearch(StatesGroup):
    waiting_for_user_identifier = State()

@router.message(F.text == BUTTON_TEXTS["edit_users"])
async def edit_users_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ —Å—Å—ã–ª–∫—É)"""
    await message.delete()

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    sent_message = await message.answer(
        "üÜî –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:"
    )

    await state.update_data(sent_message_id=sent_message.message_id, chat_id=sent_message.chat.id)
    await state.set_state(AdminUserSearch.waiting_for_user_identifier)

@router.message(AdminUserSearch.waiting_for_user_identifier)
async def process_user_identifier(message: Message, state: FSMContext):
    identifier = message.text.strip().lower()

    if not identifier:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º username
    if identifier.startswith("@"):
        search_username = identifier[1:]
    elif "t.me/" in identifier:
        search_username = identifier.split("t.me/")[-1].split("?")[0]
    else:
        search_username = identifier.strip()

    if not search_username:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    pattern = f"%t.me/{search_username}%"

    async with aiosqlite.connect("users.db") as conn:
        cursor = await conn.cursor()
        await cursor.execute("SELECT * FROM users WHERE LOWER(telegram_link) LIKE ?", (pattern,))
        row = await cursor.fetchone()

        if row:
            columns = [desc[0] for desc in cursor.description]
            user_data = dict(zip(columns, row))
        else:
            user_data = None

    if not user_data:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å—Å—ã–ª–∫–æ–π <code>t.me/{search_username}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode="HTML"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(target_user=user_data)

    # –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ Telegram ID –∏ Username
    user_preview = (
        "üë§ <b>–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
        f"üîπ <b>Telegram ID:</b> <code>{user_data['telegram_id']}</code>\n"
        f"üîπ <b>Username:</b> @{user_data['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    )

    # üîÅ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ is_blocked
    user_actions_keyboard = get_user_actions_keyboard(user_data)

    await message.answer(user_preview, reply_markup=user_actions_keyboard, parse_mode="HTML")
    await state.set_state(None)

def get_user_actions_keyboard(target_user: dict) -> InlineKeyboardMarkup:
    is_blocked = target_user['is_blocked']

    buttons = [
        [InlineKeyboardButton(text=BUTTON_TEXTS["info_for_admin"], callback_data="user_info_for_admin")],
        [InlineKeyboardButton(text=BUTTON_TEXTS["prodlit_podpisku"], callback_data="prodlit_podpisku")],
        [InlineKeyboardButton(text=BUTTON_TEXTS["statistics_for_admin"], callback_data="user_stats_for_admin")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_blocked:
        buttons.append([InlineKeyboardButton(text=BUTTON_TEXTS["unblock_user"], callback_data="unblock_user")])
    else:
        buttons.append([InlineKeyboardButton(text=BUTTON_TEXTS["block_user"], callback_data="block_user")])

    buttons.append([InlineKeyboardButton(text=BUTTON_TEXTS["send_message_edit_user"], callback_data="send_message_edit_user")])

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text=BUTTON_TEXTS["udalit_user"], callback_data="udalit_user")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(lambda call: call.data == "user_info_for_admin")
async def user_info_callback_for_admin(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    user_data = data.get("target_user")

    if not user_data:
        await call.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    user_details = None
    configs = []

    async with aiosqlite.connect("users.db") as conn:
        cursor = await conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º email –∏ id_server –∏–∑ user_emails –ø–æ users.id
        await cursor.execute("""
            SELECT email, id_server 
            FROM user_emails 
            WHERE user_id = ?
        """, (user_data['id'],))
        emails_rows = await cursor.fetchall()

        if emails_rows:
            user_details = []
            for email, id_server in emails_rows:
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ email –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ user_configs
                await cursor.execute("""
                    SELECT config, days_left 
                    FROM user_configs 
                    WHERE email = ?
                """, (email,))
                configs_rows = await cursor.fetchall()

                user_details.append({
                    "email": email,
                    "id_server": id_server,
                    "configs": configs_rows or []
                })

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    full_info_text = (
        "üìò <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"üîπ <b>ID –≤ –ë–î:</b> {user_data['id']}\n"
        f"üîπ <b>Telegram ID:</b> <code>{user_data['telegram_id']}</code>\n"
        f"üîπ <b>Username:</b> @{user_data['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üîπ <b>–°—Å—ã–ª–∫–∞:</b> {user_data['telegram_link'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üîπ <b>–†–µ—Ñ. –∫–æ–¥:</b> <code>{user_data['referral_code']}</code>\n"
        f"üîπ <b>–ü–æ–ª—É—á–∞–ª –ø—Ä–æ–±–Ω—É—é:</b> {'–î–∞' if user_data['has_trial'] else '–ù–µ—Ç'}\n"
        f"üîπ <b>–î–æ—Ö–æ–¥ (sum_my):</b> {user_data['sum_my']:.2f} —Ä—É–±.\n"
        f"üîπ <b>–ü—Ä–∏–≥–ª–∞—Å–∏–ª (referrer_code):</b> {user_data['referrer_code'] or '‚Äî'}\n"
        f"üîπ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> {'–î–∞' if user_data['is_blocked'] else '–ù–µ—Ç'}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ email'–∞–º
    if user_details:
        full_info_text += "\nüìß <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ email –∏ –∫–æ–Ω—Ñ–∏–≥–∏:</b>\n"
        for idx, detail in enumerate(user_details, start=1):
            email = detail["email"]
            id_server = detail["id_server"]
            configs = detail["configs"]

            full_info_text += f"\n<b>üìß Email {idx}:</b> <code>{email}</code>\n"
            full_info_text += f"üîπ <b>–°–µ—Ä–≤–µ—Ä:</b> {id_server or '‚Äî'}\n"

            if configs:
                for i, (config, days_left) in enumerate(configs):
                    full_info_text += f"  üîπ <b>–ö–æ–Ω—Ñ–∏–≥ {i+1}:</b> <code>{config}</code>\n"
                    full_info_text += f"     üîπ <b>–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:</b> {days_left if days_left != -1 else '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}\n"
            else:
                full_info_text += "  üîπ <b>–ö–æ–Ω—Ñ–∏–≥–∏:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
    else:
        full_info_text += "\nüìß <b>Email –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])

    try:
        await call.message.edit_text(full_info_text, reply_markup=back_keyboard, parse_mode="HTML")
    except Exception as e:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–ª–∏ –¥–µ–ª–∏–º –Ω–∞ —á–∞—Å—Ç–∏
        if "too long" in str(e).lower():
            truncated_text = full_info_text[:3500] + "\n\n‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–µ–∑–∞–Ω–∞ –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã."
            await call.message.edit_text(truncated_text, reply_markup=back_keyboard, parse_mode="HTML")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", reply_markup=back_keyboard)

class AdminSubscriptionExtension(StatesGroup):
    waiting_for_days = State()

@router.callback_query(lambda call: call.data == "prodlit_podpisku")
async def prodlit_podpisku(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await call.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    await call.message.edit_text(
        f"üë§ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"<b>{target_user['username']}</b> (ID: <code>{target_user['telegram_id']}</code>)\n\n"
        "üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:",
        parse_mode="HTML"
    )

    await state.set_state(AdminSubscriptionExtension.waiting_for_days)
    await state.update_data(target_user=target_user)

@router.message(AdminSubscriptionExtension.waiting_for_days)
async def process_extension_days(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        return

    days = int(message.text)
    if days <= 0 or days > 3650:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3650.")
        return

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    telegram_id = target_user['telegram_id']
    user_id_in_db = target_user['id']

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect("users.db") as conn:
        cursor = await conn.cursor()

        await cursor.execute("SELECT email FROM user_emails WHERE user_id = ?", (user_id_in_db,))
        emails_rows = await cursor.fetchall()

        if not emails_rows:
            await message.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö email.")
            return

        emails = [row[0] for row in emails_rows]

        # üì¶ –û–±–Ω–æ–≤–ª—è–µ–º days_left –≤ user_configs (–µ—Å–ª–∏ –Ω–µ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π)
        updated_configs_count = 0
        for email in emails:
            await cursor.execute("""
                UPDATE user_configs 
                SET days_left = CASE 
                    WHEN days_left = -1 THEN -1 
                    ELSE COALESCE(days_left, 0) + ?
                END
                WHERE email = ?
            """, (days, email))
            updated_configs_count += cursor.rowcount

        await conn.commit()

    # üåê –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ email
    server_results = []
    for email in emails:
        try:
            result = await update_client_subscription(telegram_id, email, days)
            server_results.append(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è {email}: {e}")
            server_results.append(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {email}: {str(e)}")

    # üì¢ –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success_count = sum(1 for r in server_results if "—É—Å–ø–µ—à–Ω–æ" in r or "success" in r)
    failed_count = len(server_results) - success_count

    result_text = (
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>{days} –¥–Ω–µ–π</b>.\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        f"üîπ –í –ë–î –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: <b>{updated_configs_count}</b>\n"
        f"üîπ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
        f"üîπ –û—à–∏–±–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: <b>{failed_count}</b>\n"
    )

    if failed_count > 0:
        result_text += f"\n‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫:\n" + "\n".join(f"<code>{r}</code>" for r in server_results if "‚ùå" in r)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])

    await message.answer(result_text, reply_markup=back_keyboard, parse_mode="HTML")

    await state.set_state(None)


@router.callback_query(lambda call: call.data == "user_stats_for_admin")
async def user_stats_callback_for_admin(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await call.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    telegram_id = target_user['telegram_id']  # –≠—Ç–æ –∏ –µ—Å—Ç—å TARGET_USER_ID –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    try:
        async with aiosqlite.connect("users.db") as db:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            async with db.execute(
                "SELECT COUNT(*) FROM users WHERE referred_by = ?", (telegram_id,)
            ) as cursor:
                count_row = await cursor.fetchone()
                count_referrals = count_row[0] if count_row else 0

            # –°—É–º–º–∞ sum_my –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            async with db.execute(
                "SELECT COALESCE(SUM(sum_my), 0) FROM users WHERE referred_by = ?", (telegram_id,)
            ) as cursor:
                sum_row = await cursor.fetchone()
                total_sum = sum_row[0] if sum_row else 0.0

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        stats_text = (
            f"üìä <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üë§ <b>Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"üë• <b>–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <b>{count_referrals}</b>\n"
            f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (sum_my):</b> <b>{total_sum:.2f}</b> —Ä—É–±."
        )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
        ])

        await call.message.edit_text(stats_text, reply_markup=back_keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {telegram_id}: {e}")
        await call.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")]])
        )


@router.callback_query(lambda call: call.data == "block_user")
async def block_user(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await call.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    telegram_id = target_user['telegram_id']
    username = target_user['username'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    async with aiosqlite.connect("users.db") as conn:
        await conn.execute(
            "UPDATE users SET is_blocked = 1 WHERE telegram_id = ?", (telegram_id,)
        )
        await conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    target_user['is_blocked'] = 1
    await state.update_data(target_user=target_user)

    # üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await call.message.edit_text(
        f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{telegram_id}</code> (<i>@{username}</i>) <b>—É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>",
        parse_mode="HTML"
    )

    # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        await call.message.bot.send_message(
            telegram_id,
            "üîí –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")

    # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    await asyncio.sleep(2)
    user_preview = (
        "üë§ <b>–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
        f"üîπ <b>Telegram ID:</b> <code>{target_user['telegram_id']}</code>\n"
        f"üîπ <b>Username:</b> @{target_user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    )
    await call.message.edit_text(
        user_preview,
        reply_markup=get_user_actions_keyboard(target_user),
        parse_mode="HTML"
    )

@router.callback_query(lambda call: call.data == "unblock_user")
async def unblock_user(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await call.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    telegram_id = target_user['telegram_id']
    username = target_user['username'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    async with aiosqlite.connect("users.db") as conn:
        await conn.execute(
            "UPDATE users SET is_blocked = 0 WHERE telegram_id = ?", (telegram_id,)
        )
        await conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    target_user['is_blocked'] = 0
    await state.update_data(target_user=target_user)

    # üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await call.message.edit_text(
        f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{telegram_id}</code> (<i>@{username}</i>) <b>—É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>",
        parse_mode="HTML"
    )

    # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await call.message.bot.send_message(
            telegram_id,
            "üîì –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")

    # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    await asyncio.sleep(2)
    user_preview = (
        "üë§ <b>–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
        f"üîπ <b>Telegram ID:</b> <code>{target_user['telegram_id']}</code>\n"
        f"üîπ <b>Username:</b> @{target_user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    )
    await call.message.edit_text(
        user_preview,
        reply_markup=get_user_actions_keyboard(target_user),
        parse_mode="HTML"
    )


@router.callback_query(lambda call: call.data == "udalit_user")
async def delete_user_confirm(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await call.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    username = target_user['username'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    telegram_id = target_user['telegram_id']

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=BUTTON_TEXTS["confirm_delete_user_edit_user"], callback_data="confirm_delete_user_edit_user"),
            InlineKeyboardButton(text=BUTTON_TEXTS["cancel_delete_user_edit_user"], callback_data="cancel_admin")
        ]
    ])

    await call.message.edit_text(
        f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>\n\n"
        f"üîπ <b>ID:</b> <code>{telegram_id}</code>\n"
        f"üîπ <b>Username:</b> @{username}\n\n"
        f"‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>—É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</b> (email, –∫–æ–Ω—Ñ–∏–≥–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É).",
        reply_markup=confirm_kb,
        parse_mode="HTML"
    )

@router.callback_query(lambda call: call.data == "confirm_delete_user_edit_user")
async def delete_user_execute(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await call.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    telegram_id = target_user['telegram_id']
    username = target_user['username'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id_in_db = target_user['id']  # users.id

    deleted_emails = 0
    deleted_configs = 0

    try:
        async with aiosqlite.connect("users.db") as conn:
            cursor = await conn.cursor()

            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cursor.execute("SELECT email FROM user_emails WHERE user_id = ?", (user_id_in_db,))
            emails = [row[0] for row in await cursor.fetchall()]

            # 2. –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ email
            if emails:
                placeholders = ",".join(["?" for _ in emails])
                await cursor.execute(f"DELETE FROM user_configs WHERE email IN ({placeholders})", emails)
                deleted_configs = cursor.rowcount

            # 3. –£–¥–∞–ª—è–µ–º email
            await cursor.execute("DELETE FROM user_emails WHERE user_id = ?", (user_id_in_db,))
            deleted_emails = cursor.rowcount

            # 4. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cursor.execute("DELETE FROM users WHERE telegram_id = ?", (telegram_id,))
            await conn.commit()

        # üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        success_text = (
            f"üóë <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω:</b>\n\n"
            f"üîπ <b>ID:</b> <code>{telegram_id}</code>\n"
            f"üîπ <b>Username:</b> @{username}\n"
            f"üìß –£–¥–∞–ª–µ–Ω–æ email: <b>{deleted_emails}</b>\n"
            f"‚öôÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: <b>{deleted_configs}</b>"
        )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_actions")]
        ])

        await call.message.edit_text(success_text, reply_markup=back_keyboard, parse_mode="HTML")

        # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            await call.message.bot.send_message(
                telegram_id,
                "üóë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_data({})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await call.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")]
            ])
        )

class AdminSendMessage(StatesGroup):
    waiting_for_message_text = State()

@router.callback_query(lambda call: call.data == "send_message_edit_user")
async def send_message_to_user_prompt(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await call.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    await call.message.edit_text(
        BUTTON_TEXTS["enter_message_edit_user"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
        ])
    )

    await state.set_state(AdminSendMessage.waiting_for_message_text)

@router.message(AdminSendMessage.waiting_for_message_text)
async def send_message_to_user_execute(message: Message, state: FSMContext):
    admin_message = message.text
    data = await state.get_data()
    target_user = data.get("target_user")

    if not target_user:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–µ—Ä—è–Ω—ã.")
        return

    telegram_id = target_user['telegram_id']
    username = target_user['username'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.bot.send_message(
            chat_id=telegram_id,
            text=f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{admin_message}"
        )
        # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await message.answer(
            f"‚úÖ {BUTTON_TEXTS['message_sent_edit_user']} <code>{telegram_id}</code> (@{username})",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")]
            ]),
            parse_mode="HTML"
        )
    except Exception as e:
        error_msg = str(e)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {error_msg}")

        if "bot is not initialized" in error_msg:
            admin_reply = "‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
        elif "bot can't initiate conversation" in error_msg:
            admin_reply = (
                "‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, "
                "–ª–∏–±–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—Å–∞–ª –µ–º—É –ø–æ—Å–ª–µ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
        elif "user is deactivated" in error_msg or "kicked" in error_msg:
            admin_reply = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç."
        else:
            admin_reply = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}"

        await message.answer(
            admin_reply,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_actions")]
            ])
        )

    await state.set_state(None)

@router.callback_query(lambda call: call.data == "back_to_actions")
async def back_to_actions(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    user_data = data.get("target_user")

    if not user_data:
        await call.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    user_preview = (
        "üë§ <b>–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
        f"üîπ <b>Telegram ID:</b> <code>{user_data['telegram_id']}</code>\n"
        f"üîπ <b>Username:</b> @{user_data['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    )

    user_actions_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BUTTON_TEXTS["info_for_admin"], callback_data="user_info_for_admin")],
        [InlineKeyboardButton(text=BUTTON_TEXTS["prodlit_podpisku"], callback_data="prodlit_podpisku")],
        [InlineKeyboardButton(text=BUTTON_TEXTS["statistics_for_admin"], callback_data="user_stats_for_admin")],
        [InlineKeyboardButton(text=BUTTON_TEXTS["block_user"], callback_data="block_user")],
        [InlineKeyboardButton(text=BUTTON_TEXTS["udalit_user"], callback_data="udalit_user")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin")]
    ])

    await call.message.edit_text(user_preview, reply_markup=user_actions_keyboard, parse_mode="HTML")