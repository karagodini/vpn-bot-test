from apscheduler.triggers.cron import CronTrigger
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.schedulers import SchedulerAlreadyRunningError
from apscheduler.triggers.interval import IntervalTrigger
from contextlib import suppress
from db.db import clean_referal_table

from admin.sub_check import (
    check_subscription_expiry,
    send_no_trial_broadcast,
    send_promo_not_used_broadcast,
    send_inactive_users_broadcast,
    check_all_user_subscriptions,
    update_all_days_left_on_startup
)
from admin.delete_clients import scheduled_delete_clients

from log import logger

scheduler = AsyncIOScheduler()

task_names = {
    "delete_clients": "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º",
    "check_subscription_expiry": "–†–∞—Å—Å—ã–ª–∫–∞ –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
    "send_no_trial_broadcast": "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
    "send_promo_not_used_broadcast": "–†–∞—Å—Å—ã–ª–∫–∞ –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö",
    "send_inactive_users_broadcast": "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
}

tasks = {
    "check_subscription_expiry": {
        "function": check_all_user_subscriptions,
        "hour": 4,
        "minute": 37,
        "enabled": True,
        "days": "*"
    },
    
    # –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê: –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –ö–ê–ñ–î–£–Æ –ú–ò–ù–£–¢–£
    #"check_subscription_expiry_interval": {
    #    "function": check_all_user_subscriptions,
    #    "interval_minutes": 1,
    #    "enabled": True
    #},
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    "send_no_trial_broadcast": {
        "function": send_no_trial_broadcast,
        "hour": 5,
        "minute": 0,
        "enabled": True,
        "days": "mon,wed,fri"
    },
    "send_promo_not_used_broadcast": {
        "function": send_promo_not_used_broadcast,
        "hour": 5,
        "minute": 10,
        "enabled": True,
        "days": "sat,sun"
    },
    "send_inactive_users_broadcast": {
        "function": send_inactive_users_broadcast,
        "hour": 5,
        "minute": 20,
        "enabled": True,
        "days": "15"
    }
}

async def start_scheduler():
    logger.info("üïí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")

    for task_id, task in tasks.items():
        if not task["enabled"]:
            continue

        try:
            if "interval_minutes" in task:  # –î–ª—è –∑–∞–¥–∞—á —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                trigger = IntervalTrigger(minutes=task["interval_minutes"])
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞: '{task_names.get(task_id, task_id)}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {task['interval_minutes']} –º–∏–Ω—É—Ç.")
            else:  # –î–ª—è cron-–∑–∞–¥–∞—á
                days_config = parse_days(task["days"])
                trigger = CronTrigger(
                    hour=task.get("hour", "*"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get() —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    minute=task.get("minute", "*"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get() —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    **days_config
                )
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞: '{task_names.get(task_id, task_id)}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—Ä–µ–º—è: {task.get('hour', '*')}:{task.get('minute', '*'):02d}, –î–Ω–∏: {task['days']}.")
            
            scheduler.add_job(
                task["function"],
                trigger=trigger,
                id=task_id,
                name=task_names.get(task_id, task_id),
                replace_existing=True
            )
            
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '{task_id}': {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '{task_id}': {e}")

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    scheduler.add_job(
        clean_referal_table,
        CronTrigger(day=1, hour=0),
        id="clean_referal_table",
        name="–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
        replace_existing=True
    )
    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    try:
        if not scheduler.running:
            scheduler.start()
            logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        else:
            logger.info("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    except SchedulerAlreadyRunningError:
        logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    try:
        logger.info("üîÅ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è days_left –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞...")
        await update_all_days_left_on_startup()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ days_left –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")


        
def parse_days(days_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–Ω–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å CronTrigger.

    –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    - "*" ‚Üí –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    - "mon,wed,fri" ‚Üí —Ç–æ–ª—å–∫–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥—É –∏ –ø—è—Ç–Ω–∏—Ü—É
    - "1,15" ‚Üí 1-–≥–æ –∏ 15-–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
    """
    valid_week_days = {'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'}

    if days_str.strip() == "*":
        return {}

    parts = [part.strip().lower() for part in days_str.split(',')]

    if all(part in valid_week_days for part in parts):
        return {'day_of_week': ','.join(parts)}

    try:
        days = list(map(int, parts))
        if all(1 <= day <= 31 for day in days):
            return {'day': ','.join(map(str, days))}
    except ValueError:
        pass

    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π: {days_str}")

