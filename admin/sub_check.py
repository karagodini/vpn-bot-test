
from datetime import datetime, timedelta as td
import aiohttp
import json
import aiosqlite
from handlers.config import get_server_data
from bot import bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from db.db import get_server_ids_as_list
from buttons.client import BUTTON_TEXTS
from dotenv import load_dotenv
import os
from log import logger
load_dotenv()

USERSDATABASE = os.getenv("USERSDATABASE")
SERVEDATABASE = os.getenv("SERVEDATABASE")

async def check_all_user_subscriptions():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ user_configs.days_left
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ telegram_id –∏–∑ user_emails.
    """
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ days_left")

    async with aiosqlite.connect("users.db") as conn:
        # –í—ã–ø–æ–ª–Ω—è–µ–º JOIN –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        async with conn.execute("""
            SELECT 
                uc.email,
                uc.days_left,
                u.telegram_id,
                u.notified_after_3_days,
                u.notified_after_7_days
            FROM user_configs uc
            JOIN user_emails ue ON uc.email = ue.email
            JOIN users u ON ue.user_id = u.id
            WHERE u.telegram_id IS NOT NULL
        """) as cursor:
            rows = await cursor.fetchall()

    if not rows:
        logger.info("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    for email, days_left, telegram_id, notified_3d, notified_7d in rows:
        try:
            # === 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –î–û –æ–∫–æ–Ω—á–∞–Ω–∏—è 3 ===
            if days_left == 3:
                await send_subscription_notification(
                    telegram_id,
                    f"üõ° MoyVPN ‚Äî —Ç–≤–æ–π —â–∏—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n–õ–æ–≥–∏–Ω: {email}\n\n‚è≥ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è ‚Äî —Å–∞–π—Ç—ã –Ω–∞—á–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Å–∫–æ—Ä–æ—Å—Ç—å —É–ø–∞–¥—ë—Ç, –∞ —Å–ª–µ–∂–∫–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è.\n\nüí° –ü—Ä–æ–¥–ª–∏ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –∑–∞—â–∏—Ç—ã –¥–∞–∂–µ –Ω–∞ –º–∏–Ω—É—Ç—É.\n\nüí≥ –í—Å–µ–≥–æ 90 ‚ÇΩ / –º–µ—Å ‚Äî –∏ —Ç—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π.",
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
                )

            # === 2. –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == 2) ===
            elif days_left == 2:
                await send_subscription_notification(
                    telegram_id,
                    f"‚ö° MoyVPN: –æ—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è\n–õ–æ–≥–∏–Ω: {email}\n\n‚è≥ –ß–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤ –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è, —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Å—è–¥–µ—Ç, –∞ —Å–ª–µ–∂–∫–∞ —É—Å–∏–ª–∏—Ç—Å—è.\n\nüìå –ü—Ä–æ–¥–ª–∏ —Å–µ–π—á–∞—Å ‚Äî –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –≤ —Å–µ—Ç–∏ –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n\nüí≥ –í—Å–µ–≥–æ 90 ‚ÇΩ / –º–µ—Å ‚Äî –∏ –Ω–∏ –æ–¥–∏–Ω —Å–∞–π—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç.",
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
                )

            # === 2. –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == 1) ===
            elif days_left == 1:
                await send_subscription_notification(
                    telegram_id,
                    f"‚õî –ó–∞–≤—Ç—Ä–∞ MoyVPN –æ—Ç–∫–ª—é—á–∏—Ç—Å—è\n–õ–æ–≥–∏–Ω: {email}\n\n‚ö†Ô∏è –° –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è ‚Äî —Å–∞–π—Ç—ã –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–π, –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∑–∞—â–∏—Ç—ã.\nüî• –ù–µ –¥–∞–π –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ–π VPN ‚Äî –ø—Ä–æ–¥–ª–∏ —Å–µ–π—á–∞—Å –∏ –æ—Å—Ç–∞–Ω—å—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\nüí≥ –í—Å–µ–≥–æ 90 ‚ÇΩ / –º–µ—Å ‚Äî 30 –¥–Ω–µ–π —Å–≤–æ–±–æ–¥—ã –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.",
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
                )

            # === 2. –í –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == 0) ===
            elif days_left == -1:
                await send_subscription_notification(
                    telegram_id,
                    f"üöÄ MoyVPN —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é ‚Äî –¥–ª—è —Ç–µ–±—è –∑–∞ 90 ‚ÇΩ!\n\n‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ {email} —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n‚ö†Ô∏è –ë–µ–∑ VPN: —Å–∞–π—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è, –∏–≥—Ä—ã –ª–∞–≥–∞—é—Ç, —Å–ª–µ–∂–∫–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è.\n\nüî• –° VPN: –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞, —Å–∫–æ—Ä–æ—Å—Ç—å, –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.\n\nüí≥ –í—Å–µ–≥–æ 90 ‚ÇΩ / –º–µ—Å ‚Äî —ç—Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º —á–∞—à–∫–∞ –∫–æ—Ñ–µ, –Ω–æ –¥–∞—ë—Ç —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü.\n\nüëâ –ü—Ä–æ–¥–ª–∏—Ç—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–±–æ–¥—É!",
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
                )

            # === 2. –í –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == 0) ===
            elif days_left == 0:
                await send_subscription_notification(
                    telegram_id,
                    f"üöÄ MoyVPN —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é ‚Äî –¥–ª—è —Ç–µ–±—è –∑–∞ 90 ‚ÇΩ!\n\n‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ {email} —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n‚ö†Ô∏è –ë–µ–∑ VPN: —Å–∞–π—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è, –∏–≥—Ä—ã –ª–∞–≥–∞—é—Ç, —Å–ª–µ–∂–∫–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è.\n\nüî• –° VPN: –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞, —Å–∫–æ—Ä–æ—Å—Ç—å, –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.\n\nüí≥ –í—Å–µ–≥–æ 90 ‚ÇΩ / –º–µ—Å ‚Äî —ç—Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º —á–∞—à–∫–∞ –∫–æ—Ñ–µ, –Ω–æ –¥–∞—ë—Ç —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü.\n\nüëâ –ü—Ä–æ–¥–ª–∏—Ç—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–±–æ–¥—É!",
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
                )

            # === 3. –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == -3) –∏ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ===
            elif days_left == -3 and not notified_3d:
                await send_subscription_notification(
                    telegram_id,
                    f"–ú—ã —Å–∫—É—á–∞–µ–º! ü´Ç\n\n–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª MoyVPN —É–∂–µ 3 –¥–Ω—è.\n\n–í–æ–∑—å–º–∏ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                    InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial_go")
                )
                await update_notified_flag(telegram_id, "notified_after_3_days")

            # === 4. –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == -7) –∏ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ===
            elif days_left == -7 and not notified_7d:
                await send_subscription_notification(
                    telegram_id,
                    f"üì¢ MoyVPN –∂–¥—ë—Ç —Ç–µ–±—è –æ–±—Ä–∞—Ç–Ω–æ!\n–õ–æ–≥–∏–Ω: {email}\n\n‚è≥ –£–∂–µ 3 –¥–Ω—è —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –∑–∞—â–∏—Ç—ã: —Å–∞–π—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è, —Å–ª–µ–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–∞–µ—Ç.\n\nüî• –í–µ—Ä–Ω–∏ —Å–≤–æ–±–æ–¥—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –º—ã –¥–∞—Ä–∏–º —Ç–µ–±–µ 3 –¥–Ω–µ–π VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏.\n\nüí≥ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ ‚Äî –≤—Å–µ–≥–æ 90 ‚ÇΩ / –º–µ—Å, –∏ —Ç—ã —Å–Ω–æ–≤–∞ —Å —â–∏—Ç–æ–º –æ—Ç MoyVPN.",
                    InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial_7")
                )
                await update_notified_flag(telegram_id, "notified_after_7_days")

            else:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {email}: days_left={days_left}, —Ñ–ª–∞–≥–∏={notified_3d}/{notified_7d}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} ({email}): {e}")

async def scheduled_check_subscriptions():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º,
    –∞ —Ç–∞–∫–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    await check_subscription_expiry()
    await send_no_trial_broadcast()
    await send_promo_not_used_broadcast()
    await send_inactive_users_broadcast()

async def check_subscription_expiry():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    current_date = datetime.today().date()
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")

    async with aiohttp.ClientSession() as session:
        for server_id in await get_server_ids_as_list(SERVEDATABASE):
            server_data = await get_server_data(server_id)
            if not server_data:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ID {server_id}")
                continue
            await process_server_subscriptions(server_data, current_date, session)

async def process_server_subscriptions(server_data, current_date, session):
    """
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç.
    """
    login_data = {
        "username": server_data["username"],
        "password": server_data["password"],
    }

    try:
        async with session.post(server_data["login_url"], json=login_data) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_data['name']}: {await response.text()}")
                return

            cookies = response.cookies
            session_id = cookies.get('3x-ui').value
            headers = {'Accept': 'application/json', 'Cookie': f'3x-ui={session_id}'}

            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data['name']} —É—Å–ø–µ—à–Ω–∞.")
            for inbound_id in server_data["inbound_ids"]:
                await process_inbound_clients(inbound_id, server_data, headers, current_date, session)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º {server_data['name']}: {e}")

async def process_inbound_clients(inbound_id, server_data, headers, current_date, session):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ inbound.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    url = f"{server_data['config_client_url']}/{inbound_id}"
    try:
        async with session.get(url, headers=headers) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö inbound –¥–ª—è ID {inbound_id}: {await response.text()}")
                return

            data = await response.json()
            clients = json.loads(data['obj']['settings']).get('clients', [])
            for client in clients:
                await check_client_subscription(client, current_date)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inbound {inbound_id}: {e}")

async def check_client_subscription(client, current_date):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ days_left –∏–∑ user_configs.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
    - –∑–∞ 3, 2, 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left = 3,2,1)
    - –ø—Ä–∏ days_left = 0 (–≤ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è)
    - –ø—Ä–∏ days_left = -3, -7 (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏)
    """
    email = client.get('email')
    telegram_id = client.get('tgId')

    if not telegram_id:
        logger.warning(f"Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {email}")
        return

    async with aiosqlite.connect("users.db") as conn:
        # –ü–æ–ª—É—á–∞–µ–º days_left –∏–∑ user_configs –ø–æ email
        async with conn.execute(
            "SELECT days_left FROM user_configs WHERE email = ?", (email,)
        ) as cursor:
            result = await cursor.fetchone()
            if result is None:
                logger.warning(f"–ö–æ–Ω—Ñ–∏–≥ –¥–ª—è email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_configs.")
                return
            days_left = result[0]

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ has_trial –∏–∑ users
        async with conn.execute(
            "SELECT has_trial, sum_my, notified_after_3_days, notified_after_7_days FROM users WHERE telegram_id = ?",
            (telegram_id,)
        ) as cursor:
            result = await cursor.fetchone()
            if result is None:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            has_trial, sum_my, notified_3d, notified_7d = result

    # === 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –î–û –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∑–∞ 3, 2, 1 –¥–µ–Ω—å) ===
    if days_left in [3, 2, 1]:
        await send_subscription_notification(
            telegram_id,
            f"–•–∞–π! –≠—Ç–æ –Ω–µ –°–ü–ê–ú-—Å–æ–æ–±—â–µ–Ω–∏–µ ‚ÄºÔ∏è\n\n‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ {email} –æ—Å—Ç–∞–ª–æ—Å—å {days_left} {get_days_word(days_left)}!\n\n–ß—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –ª—é–±–∏–º—ã—Ö —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ!",
            InlineKeyboardButton(text=BUTTON_TEXTS["extend_subscription"], callback_data="extend_subscription")
        )

    # === 2. –í –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == 0) ===
    elif days_left == 0:
        await send_subscription_notification(
            telegram_id,
            f"–•—ç–π, –Ω–∞ —Å–≤—è–∑–∏ MoyVPN!\n\n–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞, c –ª–æ–≥–∏–Ω–æ–º {email}, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n–ù–æ —Ç—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª –Ω–∞—à —â–∏—Ç –æ—Ç —Å–ª–µ–∂–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.\n\n–ü—Ä–æ–¥–ª–∏ –∑–∞ 90 —Ä—É–±/–º–µ—Å ‚Äî –ø–æ–ª—É—á–∏ –∑–∞—â–∏—Ç—É, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥—É!",
            InlineKeyboardButton(text=BUTTON_TEXTS["extend_subscription_subscr"], callback_data="extend_subscription")
        )

    # === 3. –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == -3) –∏ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ===
    elif days_left == -3 and not notified_3d:
        await send_subscription_notification(
            telegram_id,
            f"–ú—ã —Å–∫—É—á–∞–µ–º! ü´Ç\n\n–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª MoyVPN —É–∂–µ 3 –¥–Ω—è.\n\n–í–æ–∑—å–º–∏ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
            InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial_go")
        )
        await conn.execute("UPDATE users SET notified_after_3_days = 1 WHERE telegram_id = ?", (telegram_id,))
        await conn.commit()

    # === 4. –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (days_left == -7) –∏ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ===
    elif days_left == -7 and not notified_7d:
        await send_subscription_notification(
            telegram_id,
            f"–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Å! üî•\n\n–¢—ã –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª.\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –≤–¥—Ä—É–≥ —Å–Ω–æ–≤–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è?",
            InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="trial_go")
        )
        await conn.execute("UPDATE users SET notified_after_7_days = 1 WHERE telegram_id = ?", (telegram_id,))
        await conn.commit()

    else:
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {email}, days_left = {days_left}")


async def send_subscription_notification(telegram_id, notification_text, button=None):
    try:
        keyboard = InlineKeyboardBuilder().add(button).as_markup() if button else None
        await bot.send_message(telegram_id, notification_text, reply_markup=keyboard)
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {telegram_id}: {e}")

async def update_notified_flag(telegram_id, column_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, notified_after_3_days) –≤ —Ç–∞–±–ª–∏—Ü–µ users"""
    async with aiosqlite.connect("users.db") as conn:
        await conn.execute(f"UPDATE users SET {column_name} = 1 WHERE telegram_id = ?", (telegram_id,))
        await conn.commit()
    logger.info(f"üìå –§–ª–∞–≥ {column_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

def get_days_word(days):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.
    """
    if 5 <= days <= 20 or days % 10 in [0, 5, 6, 7, 8, 9]:
        return '–¥–Ω–µ–π'
    elif days % 10 == 1:
        return '–¥–µ–Ω—å'
    else:
        return '–¥–Ω—è'

async def send_no_trial_broadcast():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ.
    –°–æ–æ–±—â–∞–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏.
    """
    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT u.telegram_id
                FROM users u
                LEFT JOIN user_emails ue ON u.id = ue.user_id
                WHERE u.has_trial = 0 AND ue.user_id IS NULL
                """
            )
            no_trial_users = await cursor.fetchall()

    successful, failed = 0, 0
    no_trial_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        "\n\n–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É VPN. üòî"
        "\n\n–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º –æ–±—ã—á–Ω–æ, –Ω–æ –ø–æ–≤–µ—Ä—å, —ç—Ç–æ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç! üòâ "
        "\n\n–ù–∞—à VPN –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã, –Ω–æ –∏ –æ—Ç–ª–∏—á–Ω—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å."
        "\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! ü§ù"
        "\n\n–ê –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏. "
        "\n\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∏ –º—ã –ø—Ä–∏—à–ª–µ–º —Ç–µ–±–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é üëá"
    )
    trialBuilder = InlineKeyboardBuilder()
    trialBuilder.add(InlineKeyboardButton(text=BUTTON_TEXTS["trial"], callback_data="trial_1"))

    for (user_id,) in no_trial_users:
        try:
            await bot.send_message(
                user_id,
                no_trial_message,
                reply_markup=trialBuilder.as_markup()
            )
            successful += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏): {successful}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")
    
async def send_promo_not_used_broadcast():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏.
    –°–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è.
    """
    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT telegram_id
                FROM users
                WHERE promo_code IS NOT NULL
                AND promo_code_usage = 0
                AND EXISTS (
                    SELECT 1
                    FROM promo_codes
                    WHERE promo_codes.code = users.promo_code
                )
                """
            )
            promo_not_used_users = await cursor.fetchall()

    successful, failed = 0, 0
    promo_not_used_message = (
        "üí° –í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–æ –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ. –°–∫–æ—Ä–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–æ–π!"
    )
    trial_button_builder = InlineKeyboardBuilder()
    trial_button_builder.add(InlineKeyboardButton(text=BUTTON_TEXTS["buy_vpn"], callback_data="buy_vpn"))

    for (user_id,) in promo_not_used_users:
        try:
            await bot.send_message(
                user_id,
                promo_not_used_message,
                reply_markup=trial_button_builder.as_markup()
            )
            successful += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥): {successful}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")
    
async def send_inactive_users_broadcast():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏.
    """
    current_date = datetime.now().date()
    inactive_threshold = current_date - td(days=15)  # –ü–æ—Ä–æ–≥ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (15 –¥–Ω–µ–π)

    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT telegram_id
                FROM users
                WHERE entry_date < ?
                """,
                (inactive_threshold.strftime('%Y-%m-%d'),)
            )
            inactive_users = await cursor.fetchall()

    successful, failed = 0, 0
    inactive_message = (
        "–≠–π! –£–∂–µ 7 –¥–Ω–µ–π –±–µ–∑ VPN"
        "\nYouTube —Å–Ω–æ–≤–∞ –ª–∞–≥–∞–µ—Ç? Discord —Ç–æ—Ä–º–æ–∑–∏—Ç? –°–∞–π—Ç—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è?"
        "\n\n–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫:"
        "\n–û—Ñ–æ—Ä–º–ª—è–µ—à—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –∞ –º—ã –¥–∞—ë–º —Ç–µ–±–µ +7 –¥–Ω–µ–π –≤ –ø–æ–¥–∞—Ä–æ–∫."
        "\n\n–ü—Ä–æ—Å—Ç–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –∫–ª–∞—Å—Å–Ω—ã–π."
        "\n\n–ù–∞–∂–∏–º–∞–π ‚Äî –≤–µ—Ä–Ω—ë–º —Å–≤–æ–±–æ–¥—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!"
    )
    for (user_id,) in inactive_users:
        try:
            await bot.send_message(
                user_id,
                inactive_message
            )
            successful += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏): {successful}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")

async def get_server_ids_as_list_for_days_left(db_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'servers' –≤ –ë–î.
    """
    try:
        async with aiosqlite.connect(db_path) as conn:
            async with conn.execute("SELECT id FROM servers") as cursor:
                rows = await cursor.fetchall()
                server_ids = [row[0] for row in rows]
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã server_ids –∏–∑ servers: {server_ids}")
                return server_ids
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ server_ids –∏–∑ —Ç–∞–±–ª–∏—Ü—ã servers: {e}")
        return []

