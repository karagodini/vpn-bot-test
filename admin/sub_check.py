
from datetime import datetime, timedelta as td
import aiohttp
import json
import aiosqlite
from handlers.config import get_server_data
from bot import bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from db.db import get_server_ids_as_list
from buttons.client import BUTTON_TEXTS
from dotenv import load_dotenv
import os
from log import logger
load_dotenv()

USERSDATABASE = os.getenv("USERSDATABASE")
SERVEDATABASE = os.getenv("SERVEDATABASE")

async def scheduled_check_subscriptions():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º,
    –∞ —Ç–∞–∫–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    await check_subscription_expiry()
    await send_no_trial_broadcast()
    await send_promo_not_used_broadcast()
    await send_inactive_users_broadcast()

async def check_subscription_expiry():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    current_date = datetime.today().date()
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")

    async with aiohttp.ClientSession() as session:
        for server_id in await get_server_ids_as_list(SERVEDATABASE):
            server_data = await get_server_data(server_id)
            if not server_data:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ID {server_id}")
                continue
            await process_server_subscriptions(server_data, current_date, session)

async def process_server_subscriptions(server_data, current_date, session):
    """
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç.
    """
    login_data = {
        "username": server_data["username"],
        "password": server_data["password"],
    }

    try:
        async with session.post(server_data["login_url"], json=login_data) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_data['name']}: {await response.text()}")
                return

            cookies = response.cookies
            session_id = cookies.get('3x-ui').value
            headers = {'Accept': 'application/json', 'Cookie': f'3x-ui={session_id}'}

            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data['name']} —É—Å–ø–µ—à–Ω–∞.")
            for inbound_id in server_data["inbound_ids"]:
                await process_inbound_clients(inbound_id, server_data, headers, current_date, session)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º {server_data['name']}: {e}")

async def process_inbound_clients(inbound_id, server_data, headers, current_date, session):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ inbound.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    url = f"{server_data['config_client_url']}/{inbound_id}"
    try:
        async with session.get(url, headers=headers) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö inbound –¥–ª—è ID {inbound_id}: {await response.text()}")
                return

            data = await response.json()
            clients = json.loads(data['obj']['settings']).get('clients', [])
            for client in clients:
                await check_client_subscription(client, current_date)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inbound {inbound_id}: {e}")

async def check_client_subscription(client, current_date):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
    - –∑–∞ 3, 2, 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    - –≤ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è
    - —á–µ—Ä–µ–∑ 3 –∏ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Å –∫–Ω–æ–ø–∫–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
    """
    expiry_time = client.get('expiryTime')
    email = client.get('email')
    telegram_id = client.get('tgId')

    if not telegram_id:
        logger.warning(f"Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {email}")
        return

    async with aiosqlite.connect("users.db") as conn:
        async with conn.execute(
            "SELECT has_trial, sum_my, notified_after_3_days, notified_after_7_days FROM users WHERE telegram_id = ?",
            (telegram_id,)
        ) as cursor:
            result = await cursor.fetchone()
            if result is None:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return
            has_trial, sum_my, notified_3d, notified_7d = result

    if expiry_time is None or expiry_time < 0:
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {email}, —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    expiry_date = datetime.fromtimestamp(expiry_time / 1000).date()
    logger.info(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {email}: {expiry_date}")

    # === 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –î–û –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∑–∞ 3, 2, 1 –¥–µ–Ω—å) ===
    for days_left in [3, 2, 1]:
        if current_date + td(days=days_left) == expiry_date:
            await send_subscription_notification(
                telegram_id,
                f"–•–∞–π! –≠—Ç–æ –Ω–µ –°–ü–ê–ú-—Å–æ–æ–±—â–µ–Ω–∏–µ ‚ÄºÔ∏è\n\n‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ {email} –æ—Å—Ç–∞–ª–æ—Å—å {days_left} {get_days_word(days_left)}!\n\n–ß—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –ª—é–±–∏–º—ã—Ö —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ!",
                InlineKeyboardButton(text=BUTTON_TEXTS["extend_subscription"], callback_data="extend_subscription")
            )

    # === 2. –í –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è ===
    if current_date == expiry_date:
        await send_subscription_notification(
            telegram_id,
            f"–•—ç–π, –Ω–∞ —Å–≤—è–∑–∏ MoyVPN!\n\n–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞, c –ª–æ–≥–∏–Ω–æ–º {email}, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n–ù–æ —Ç—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª –Ω–∞—à —â–∏—Ç –æ—Ç —Å–ª–µ–∂–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.\n\n–ü—Ä–æ–¥–ª–∏ –∑–∞ 80 —Ä—É–±/–º–µ—Å ‚Äî –ø–æ–ª—É—á–∏ –∑–∞—â–∏—Ç—É, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å–≤–æ–±–æ–¥—É!",
            InlineKeyboardButton(text=BUTTON_TEXTS["extend_subscription_subscr"], callback_data="extend_subscription")
        )

    # === 3. –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è ===
    if current_date == expiry_date + td(days=3) and not notified_3d:
        await send_subscription_notification(
            telegram_id,
            f"–ú—ã —Å–∫—É—á–∞–µ–º! ü´Ç\n\n–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª MoyVPN —É–∂–µ 3 –¥–Ω—è.\n\n–í–æ–∑—å–º–∏ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
            InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_trial_3days")
        )
        await conn.execute("UPDATE users SET notified_after_3_days = 1 WHERE telegram_id = ?", (telegram_id,))
        await conn.commit()

    # === 4. –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è ===
    if current_date == expiry_date + td(days=7) and not notified_7d:
        await send_subscription_notification(
            telegram_id,
            f"–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Å! üî•\n\n–¢—ã –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª.\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –≤–¥—Ä—É–≥ —Å–Ω–æ–≤–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è?",
            InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_trial_3days")
        )
        await conn.execute("UPDATE users SET notified_after_7_days = 1 WHERE telegram_id = ?", (telegram_id,))
        await conn.commit()


async def send_subscription_notification(telegram_id, notification_text, button=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ Telegram.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.
    """
    try:
        keyboard = InlineKeyboardBuilder().add(button) if button else None
        await bot.send_message(telegram_id, notification_text, reply_markup=keyboard.as_markup())
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {telegram_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

def get_days_word(days):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.
    """
    if 5 <= days <= 20 or days % 10 in [0, 5, 6, 7, 8, 9]:
        return '–¥–Ω–µ–π'
    elif days % 10 == 1:
        return '–¥–µ–Ω—å'
    else:
        return '–¥–Ω—è'

async def send_no_trial_broadcast():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ.
    –°–æ–æ–±—â–∞–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏.
    """
    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT u.telegram_id
                FROM users u
                LEFT JOIN user_emails ue ON u.id = ue.user_id
                WHERE u.has_trial = 0 AND ue.user_id IS NULL
                """
            )
            no_trial_users = await cursor.fetchall()

    successful, failed = 0, 0
    no_trial_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        "\n\n–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É VPN. üòî"
        "\n\n–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º –æ–±—ã—á–Ω–æ, –Ω–æ –ø–æ–≤–µ—Ä—å, —ç—Ç–æ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç! üòâ "
        "\n\n–ù–∞—à VPN –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã, –Ω–æ –∏ –æ—Ç–ª–∏—á–Ω—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å."
        "\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! ü§ù"
        "\n\n–ê –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏. "
        "\n\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∏ –º—ã –ø—Ä–∏—à–ª–µ–º —Ç–µ–±–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é üëá"
    )
    trialBuilder = InlineKeyboardBuilder()
    trialBuilder.add(InlineKeyboardButton(text=BUTTON_TEXTS["trial"], callback_data="trial_1"))

    for (user_id,) in no_trial_users:
        try:
            await bot.send_message(
                user_id,
                no_trial_message,
                reply_markup=trialBuilder.as_markup()
            )
            successful += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏): {successful}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")
    
async def send_promo_not_used_broadcast():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏.
    –°–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è.
    """
    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT telegram_id
                FROM users
                WHERE promo_code IS NOT NULL
                AND promo_code_usage = 0
                AND EXISTS (
                    SELECT 1
                    FROM promo_codes
                    WHERE promo_codes.code = users.promo_code
                )
                """
            )
            promo_not_used_users = await cursor.fetchall()

    successful, failed = 0, 0
    promo_not_used_message = (
        "üí° –í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–æ –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ. –°–∫–æ—Ä–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–æ–π!"
    )
    trial_button_builder = InlineKeyboardBuilder()
    trial_button_builder.add(InlineKeyboardButton(text=BUTTON_TEXTS["buy_vpn"], callback_data="buy_vpn"))

    for (user_id,) in promo_not_used_users:
        try:
            await bot.send_message(
                user_id,
                promo_not_used_message,
                reply_markup=trial_button_builder.as_markup()
            )
            successful += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥): {successful}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")
    
async def send_inactive_users_broadcast():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏.
    """
    current_date = datetime.now().date()
    inactive_threshold = current_date - td(days=15)  # –ü–æ—Ä–æ–≥ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (15 –¥–Ω–µ–π)

    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(
                """
                SELECT telegram_id
                FROM users
                WHERE entry_date < ?
                """,
                (inactive_threshold.strftime('%Y-%m-%d'),)
            )
            inactive_users = await cursor.fetchall()

    successful, failed = 0, 0
    inactive_message = (
        "–≠–π! –£–∂–µ 7 –¥–Ω–µ–π –±–µ–∑ VPN"
        "\nYouTube —Å–Ω–æ–≤–∞ –ª–∞–≥–∞–µ—Ç? Discord —Ç–æ—Ä–º–æ–∑–∏—Ç? –°–∞–π—Ç—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è?"
        "\n\n–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫:"
        "\n–û—Ñ–æ—Ä–º–ª—è–µ—à—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –∞ –º—ã –¥–∞—ë–º —Ç–µ–±–µ +7 –¥–Ω–µ–π –≤ –ø–æ–¥–∞—Ä–æ–∫."
        "\n\n–ü—Ä–æ—Å—Ç–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –∫–ª–∞—Å—Å–Ω—ã–π."
        "\n\n–ù–∞–∂–∏–º–∞–π ‚Äî –≤–µ—Ä–Ω—ë–º —Å–≤–æ–±–æ–¥—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!"
    )
    for (user_id,) in inactive_users:
        try:
            await bot.send_message(
                user_id,
                inactive_message
            )
            successful += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏): {successful}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")
