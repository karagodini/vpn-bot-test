import json
import random
import string
import uuid
from datetime import datetime as dt
import requests
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
from bot import bot, dp
from client.menu import get_instructions_button
from handlers.config import get_server_data
from handlers.states import AddClient
from pay.prices import get_expiry_time_keyboard, total_gb_values
from pay.prices import get_expiry_time_description
from buttons.client import BUTTON_TEXTS
from db.db import get_server_ids_as_list, save_config_to_new_table
from dotenv import load_dotenv
import os
import aiohttp
from log import logger
from handlers.select_server import get_optimal_server
import aiosqlite
from aiogram.types import Message

load_dotenv()

AUTOHIDDIFY = os.getenv("AUTOHIDDIFY")
AUTOSTREI = os.getenv("AUTOSTREI")
LINUX = os.getenv("LINUX")
WINDOWS = os.getenv("WINDOWS")
MAC = os.getenv("MAC")
LOGIN = os.getenv("LOGIN")
SERVEDATABASE = os.getenv("SERVEDATABASE")

USERSDATABASE = os.getenv("USERSDATABASE")

def generate_login(telegram_id):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ Telegram ID.
    –õ–æ–≥–∏–Ω —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π LOGIN –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 —Ü–∏—Ñ—Ä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä.
    –ü—Ä–∏–º–µ—Ä: 3x-ui-1111333
    """
    id_suffix = str(telegram_id)[-4:]
    random_digits = ''.join(random.choices('0123456789', k=3))
    return f"{LOGIN}-{id_suffix}{random_digits}"


"""async def start_add_client(callback_query: types.CallbackQuery, state: FSMContext):
    
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏. 
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã.
    
    telegram_id = callback_query.from_user.id
    generated_name = generate_login(telegram_id)
    await state.update_data(
        name = generated_name,
        sent_message_id = callback_query.message.message_id
    )
    countries_keyboard = await generate_countries_keyboard(callback_query)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:",
        reply_markup=countries_keyboard
    )
    await state.set_state(AddClient.WaitingForCountry)"""

async def start_add_client(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞.
    """
    telegram_id = callback_query.from_user.id
    generated_name = generate_login(telegram_id)
    await state.update_data(
        name=generated_name,
        sent_message_id=callback_query.message.message_id
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç—Ä–∞–Ω—É (—Å–µ—Ä–≤–µ—Ä)
    server_ids = await get_server_ids_as_list(SERVEDATABASE)
    if not server_ids:
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ üòî", show_alert=True)
        return

    first_server_id = server_ids[0]
    server_data = await get_server_data(first_server_id)
    country_name = server_data.get('name') if server_data else "üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
    await state.update_data(
        selected_country_id=first_server_id,
        selected_country_name=country_name
    )

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_expiry_time_keyboard(callback_query)
    )

    await state.set_state(AddClient.WaitingForExpiryTime)


async def generate_countries_keyboard(callback_query: types.CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–æ–≤.
    """
    keyboard = InlineKeyboardBuilder()
    for server_id in await get_server_ids_as_list(SERVEDATABASE):
        server_data = await get_server_data(server_id)
        if server_data:
            country_name = server_data['name']
            keyboard.add(types.InlineKeyboardButton(text=country_name, callback_data=f"select_country_{server_id}"))
    keyboard.add(types.InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel"))
    return keyboard.adjust(1).as_markup()


@dp.callback_query(lambda c: c.data and c.data.startswith('select_country_'), AddClient.WaitingForCountry)
async def country_selection_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    """
    server_selection = callback_query.data.split("_")[-1]
    server_data = await get_server_data(server_selection)
    country_name = server_data.get('name') if server_data else "üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"
    await state.update_data(
        selected_country_id = server_selection,
        selected_country_name = country_name
    )
    await callback_query.answer("–°—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=get_expiry_time_keyboard(callback_query)
    )
    await state.set_state(AddClient.WaitingForExpiryTime)

async def add_client(name, expiry_time, inbound_ids, telegram_id, ADD_CLIENT_URL, LOGIN_URL, LOGIN_DATA):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    session_id = await login(LOGIN_URL, LOGIN_DATA)
    if session_id:
        if name and expiry_time:
            client_id = ''.join(random.choices(string.ascii_letters + string.digits, k=20))
            add_client_result = await add_client_request(session_id, name, expiry_time, client_id, inbound_ids, ADD_CLIENT_URL, telegram_id)
            return add_client_result
        else:
            return "‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã."
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."

async def add_client_request(session_id, name, expiry_time, client_id, inbound_ids, ADD_CLIENT_URL, telegram_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. 
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π ID –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID {client_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å URL: {ADD_CLIENT_URL}")

    id_vless = random.choice(inbound_ids)
    sub_id = f"{LOGIN}-{uuid.uuid4().hex[:8]}"
    client_data = {
        "id": id_vless,
        "settings": json.dumps({
            "clients": [{
                "id": client_id,
                "alterId": 0,
                "email": name,
                "limitIp": 5,
                "totalGB": total_gb_values.get(int(expiry_time), 0),
                "expiryTime": expiry_time,
                "enable": True,
                "subId": sub_id,
                "tgId": telegram_id,
                "flow": "xtls-rprx-vision"
            }]
        })
    }
    headers = {"Accept": "application/json", "Content-Type": "application/json", "Cookie": f"3x-ui={session_id}"}
    async with aiohttp.ClientSession() as session:
        try:
            response = await session.post(ADD_CLIENT_URL, headers=headers, json=client_data)
            if response.status == 200:
                return "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. üéÜ."
            else:
                return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."
        except Exception as e:
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."
        
async def login(LOGIN_URL, LOGIN_DATA):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç session_id –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    response = requests.post(LOGIN_URL, data=LOGIN_DATA)
    if response.status_code == 200:
        session_id = response.cookies.get("3x-ui")
        return session_id
    return None

async def generate_config_from_pay(telegram_id, email, state):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    """
    data = await state.get_data()
    LOGIN_URL = data.get('login_url')
    LOGIN_DATA = data.get('login_data')
    CONFIG_CLIENT_URL = data.get('config_client_url')
    INBOUND_IDS = data.get('inbound_ids')
    session = requests.Session()
    login_response = session.post(LOGIN_URL, json=LOGIN_DATA)
    if login_response.status_code != 200:
        return "", ""
    
    userdata_list, config_list, config_list2, config_list3 = [], [], [], []
    for INBOUND_ID in INBOUND_IDS:
        try:
            inbound_url = f"{CONFIG_CLIENT_URL}/{INBOUND_ID}"
            inbound_response = session.get(inbound_url, headers={'Accept': 'application/json'})
            if inbound_response.status_code != 200:
                continue
            inbound_data = inbound_response.json().get('obj')
            if not inbound_data:
                continue
            port = inbound_data['port']
            settings = json.loads(inbound_data['settings'])
            stream_settings = json.loads(inbound_data['streamSettings'])
            client = next((client for client in settings['clients'] if client['email'].lower() == email), None)
            if not client:
                continue
            client_id = client['id']
            sub_id = client.get('subId', None)
            network = stream_settings['network']
            security = stream_settings['security']
            public_key = stream_settings['realitySettings']['settings']['publicKey']
            fingerprint = stream_settings['realitySettings']['settings']['fingerprint']
            sni = stream_settings['realitySettings']['serverNames'][0]
            short_id = stream_settings['realitySettings']['shortIds'][0]
            spider_x_encoded = stream_settings['realitySettings']['settings']['spiderX'].replace('/', '%2F')

            config_url = f"{data['sub_url']}{sub_id}"
            config_json = f"{data['json_sub']}{sub_id}"
            vless_config = f"vless://{client_id}@{data['server_ip']}:{port}?type={network}&security={security}&pbk={public_key}&fp={fingerprint}&sni={sni}&sid={short_id}&spx={spider_x_encoded}F&flow=xtls-rprx-vision#{email}\n"
            expiry_time_ms = client['expiryTime']
            expiry_text = "–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞." if int(expiry_time_ms) < 0 else dt.fromtimestamp(expiry_time_ms / 1000).strftime('%Y-%m-%d %H:%M:%S')
            userdata_list.append(f"{expiry_text}\n")
            config_list.append(config_url)
            config_list2.append(config_json)
            config_list3.append(vless_config)
        except Exception:
            continue

    return "\n".join(userdata_list), "\n\n".join(config_list), "\n\n".join(config_list2), "\n\n".join(config_list3)

GROUP_CHAT_ID = -4924146649
REFERRAL_CHAT_ID = -1003045150256

async def send_config_from_state(message: Message, state: FSMContext, telegram_id=None, email=None, edit=False, tickets_message=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã.
    –ï—Å–ª–∏ referrer_code == 'eb1a1788' ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ REFERRAL_CHAT_ID
    –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    """
    try:
        data = await state.get_data()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

        email_raw = email or data.get('email')
        email_lower = email_raw.lower() if email_raw else None
        telegram_id = telegram_id or message.from_user.id

        if not email_lower or not telegram_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –∏–ª–∏ Telegram ID.")
            return

        expiry_time = data.get('expiry_time')
        expiry_time_description = get_expiry_time_description(expiry_time)
        country_name = data.get('selected_country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        userdata, config, config2, config3 = await generate_config_from_pay(telegram_id, email_lower, state)
        await save_config_to_new_table(email_raw, config3)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        full_response = (
            f"‚è≥ {userdata}\n\n"
            f"<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–± —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:</b>\n\n"
            f"<pre><code>{config3}</code></pre>\n\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æüëá"
        )
        if tickets_message:
            full_response += f"\n\n–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, —É –≤–∞—Å üéüÔ∏è {tickets_message}"

        payment_method = data.get('payment_method')
        if payment_method in ["tgpay", "star"]:
            await message.answer(full_response, parse_mode="HTML", disable_web_page_preview=True, reply_markup=get_instructions_button())
        else:
            await message.edit_text(full_response, parse_mode="HTML", disable_web_page_preview=True, reply_markup=get_instructions_button())

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await bot.get_chat(telegram_id)
        full_name = user.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}"
        username = user.username
        user_link = f"<a href='tg://user?id={telegram_id}'>{full_name}</a>"
        username_text = f"@{username}" if username else "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"

        # üîç –ü–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram-—Å—Å—ã–ª–∫–∏
        referrer_link = None
        async with aiosqlite.connect(USERSDATABASE) as db:
            db.row_factory = aiosqlite.Row

            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º referrer_code —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await db.execute(
                "SELECT referrer_code FROM users WHERE telegram_id = ?", (telegram_id,)
            )
            result = await cursor.fetchone()

            if result and (referral_code := result["referrer_code"]):
                # –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π referral_code = referrer_code
                cursor = await db.execute(
                    "SELECT telegram_id, telegram_link FROM users WHERE referral_code = ?",
                    (referral_code,)
                )
                referrer = await cursor.fetchone()

                if referrer:
                    referrer_id = referrer["telegram_id"]
                    referrer_username = referrer["telegram_link"]

                    if referrer_username:
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ @username
                        telegram_link = f"{referrer_username}"
                        referrer_link = f'<a href="{telegram_link}">{referrer_username}</a>'
                    else:
                        # –†–µ–∑–µ—Ä–≤: deep link –ø–æ ID
                        telegram_link = f"tg://user?id={referrer_id}"
                        referrer_link = f'<a href="{telegram_link}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referrer_id}</a>'
                else:
                    referrer_link = "—Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                referrer_link = "–Ω–µ —É–∫–∞–∑–∞–Ω"

        # üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
        try:
            await bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=(
                    f"üì© <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> {user_link} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {expiry_time_description} –¥–æ {userdata}\n"
                    f"üìß Email: {email_raw}\n"
                    f"üîë –ö–ª—é—á –≤—ã–¥–∞–Ω ‚úÖ\n"
                    f"üåç –°–µ—Ä–≤–µ—Ä: {country_name}\n"
                    f"üë• –ü—Ä–∏—à—ë–ª –æ—Ç: {referrer_link}"
                ),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GROUP_CHAT_ID: {GROUP_CHAT_ID}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GROUP_CHAT_ID: {e}")

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ referrer_code == 'eb1a1788' ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ REFERRAL_CHAT_ID
        async with aiosqlite.connect(USERSDATABASE) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                "SELECT referred_by FROM users WHERE telegram_id = ?", (telegram_id,)
            )
            result = await cursor.fetchone()

        if result and result["referred_by"] == "eb1a1788":
            logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø—Ä–∏—à—ë–ª –ø–æ referrer_code=eb1a1788 ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ REFERRAL_CHAT_ID")
            try:
                await bot.send_message(
                    chat_id=REFERRAL_CHAT_ID,
                    text=(
                        f"üéØ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª (eb1a1788)!</b>\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                        f"üÜî ID: <code>{telegram_id}</code>\n"
                        f"üìß Email: {email_raw}\n"
                        f"üîë –ö–ª—é—á –≤—ã–¥–∞–Ω ‚úÖ\n"
                        f"üåç –°–µ—Ä–≤–µ—Ä: {country_name}"
                    ),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ REFERRAL_CHAT_ID")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ REFERRAL_CHAT_ID: {e}", exc_info=True)
        else:
            ref_code = result["referred_by"] if result else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            logger.info(f"üö´ referred_by={ref_code} ‚â† eb1a1788 ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_config_from_state: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")