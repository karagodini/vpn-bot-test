import aiosqlite
import uuid
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from aiogram.enums.parse_mode import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.filters.command import Command
from datetime import datetime
from log import logger
from dotenv import load_dotenv
import os
from admin.notify import notify_admins, notify_referral_chat
from bot import bot
from client.info import show_instructions, show_prices, show_server_info, show_router_instructions
from client.pers_account import process_email_for_all_servers
from client.menu import get_main_menu, main_menu
from db.db import get_emails_from_database, get_user_referral_code, increment_referral_clicks
from client.add_client import start_add_client
from client.referral import referral_info
from buttons.client import BUTTON_TEXTS
from client.menu import get_cabinet_menu
from pay.prices import get_test_menu
from pay.prices import get_subscription_one
from pay.prices import get_subscription_one_device
from pay.prices import get_subscription_one_ios
from pay.prices import get_subscription_one_android
from pay.prices import get_subscription_one_macos
from pay.prices import get_subscription_one_windows
from pay.prices import get_trial_device
from pay.prices import get_trial_ios
from pay.prices import get_trial_android
from pay.prices import get_trial_macos
from pay.prices import get_trial_windows
from client.menu import get_instructions_menu
#from client.text import MENU_TEXT
load_dotenv()

router = Router()
USERSDATABASE = os.getenv("USERSDATABASE")


async def delete_previous_message(chat_id: int, message_id: int):
    """    
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏.
    """
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def handle_user_registration(
    conn: aiosqlite.Connection,  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    telegram_id: int, 
    username: str, 
    telegram_link: str, 
    referral_code: str, 
    referred_by_code: str, 
    entry_date: str
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param conn: –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    :param referred_by_code: —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å—Å—ã–ª–∫–∏)
    """
    async with conn.cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await cursor.execute(
            "SELECT referral_code, referred_by, referrer_code FROM users WHERE telegram_id = ?", 
            (telegram_id,)
        )
        user_data = await cursor.fetchone()

        if user_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cursor.execute(
                """UPDATE users 
                SET username = ?, 
                    telegram_link = ?,
                    entry_date = ?
                WHERE telegram_id = ?""", 
                (username, telegram_link, entry_date, telegram_id)
            )
        else:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
            referrer_id = None
            if referred_by_code:
                await cursor.execute(
                    "SELECT telegram_id FROM users WHERE referral_code = ?", 
                    (referred_by_code,)
                )
                result = await cursor.fetchone()
                referrer_id = result[0] if result else None

            # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cursor.execute(
                """INSERT INTO users 
                (telegram_id, username, telegram_link, referral_code, referral_count, referred_by, referrer_code, entry_date)
                VALUES (?, ?, ?, ?, 0, ?, ?, ?)""",
                (telegram_id, username, telegram_link, referral_code, referrer_id, referred_by_code, entry_date)
            )

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –≤ referral_links
            if referred_by_code:
                await cursor.execute(
                    """INSERT INTO referral_links 
                    (referrer_code, invited_user_id) 
                    VALUES (?, ?)""",
                    (referred_by_code, telegram_id)
                )
            
            await notify_admins(telegram_id, referral_code, username, telegram_link)

            # üîî –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –æ—Ç eb1a1788 ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç
            if referred_by_code == "eb1a1788":
                await notify_referral_chat(telegram_id, username, telegram_link)

        await conn.commit()

@router.message(Command("start"))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–∞–∂–∞–ª /start")

    try:
        await delete_previous_message(message.chat.id, message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    referred_by_code = None
    if message.text.startswith("/start"):
        parts = message.text.split()
        if len(parts) > 1:
            referred_by_code = parts[1]

    async with aiosqlite.connect("users.db", timeout=30) as conn:
        if referred_by_code:
            await increment_referral_clicks(referred_by_code, conn)
            
            cursor = await conn.execute(
                "SELECT 1 FROM referral_links WHERE invited_user_id = ?",
                (telegram_id,)
            )
            if not await cursor.fetchone():
                await conn.execute(
                    "INSERT INTO referral_links (referrer_code, invited_user_id) VALUES (?, ?)",
                    (referred_by_code, telegram_id)
                )
                await conn.commit()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_referral_code = await get_user_referral_code(telegram_id, conn) or str(uuid.uuid4())[:8]
        username = message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        telegram_link = f"https://t.me/{message.from_user.username}" if message.from_user.username else None
        entry_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        try:
            await handle_user_registration(
                conn=conn,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                telegram_id=telegram_id,
                username=username,
                telegram_link=telegram_link,
                referral_code=user_referral_code,
                referred_by_code=referred_by_code,
                entry_date=entry_date
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await main_menu(message)

@router.callback_query(lambda c: c.data == "main_menu")
async def handle_main_menu(callback_query: types.CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user = callback_query.from_user
    name = user.first_name or "–¥—Ä—É–≥"

    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–º–æ—Ä–æ—á–µ–∫?\n\n"
    )

    await callback_query.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=get_main_menu(callback_query)
    )
    await callback_query.answer()



@router.callback_query(lambda query: query.data == "cancel")
async def cancel_action(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    data = await state.get_data()
    sent_message_id = data.get('sent_message_id')
    try:
        if sent_message_id:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=sent_message_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu(callback_query)
            )
        else:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∫—É–ø–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=get_main_menu(callback_query)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu(callback_query)
        )
    await state.clear()
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "cabinet")
async def handle_get_config(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.
    """
    telegram_id = callback_query.from_user.id
    emails = await get_emails_from_database(telegram_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["extend_subscription_subscr"], callback_data="buy_vpn"))
    keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["previous"], callback_data="main_menu"))

    if emails:
        all_responses = []
        for email in emails:
            response = await process_email_for_all_servers(callback_query, email)
            if response:
                all_responses.append(response)
        full_response = "\n\n".join(all_responses)

        if full_response:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=full_response,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard.as_markup()
            )
        else:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                reply_markup=keyboard.as_markup()
            )
    else:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboard.as_markup()
        )


@router.callback_query(lambda c: c.data == "prices")
async def handle_prices(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω.
    """
    await show_prices(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "instructions")
async def handle_server_info(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏.
    """

    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è üìñ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:",
        reply_markup=get_instructions_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "ios_instructions")
async def handle_ios_instructions(callback_query: types.CallbackQuery):
    await show_instructions(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "android_instructions")
async def handle_android_instructions(callback_query: types.CallbackQuery):
    await show_instructions(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "macos_instructions")
async def handle_macos_instructions(callback_query: types.CallbackQuery):
    await show_instructions(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "windows_instructions")
async def handle_windows_instructions(callback_query: types.CallbackQuery):
    await show_instructions(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "about_server")
async def handle_server_info(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    await show_server_info(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "setings_router")
async def handle_setings_router(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ—É—Ç–µ—Ä–∞.
    """
    await show_router_instructions(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "advantages")
async def handle_advantages(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö.
    """
    await show_router_instructions(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "buy_vpn")
async def handle_buy_vpn(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É VPN.
    """
    await start_add_client(callback_query, state)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "referal")
async def referal(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    try:
        await referral_info(callback_query, bot, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")


@router.callback_query(lambda c: c.data == "get_cabinet")
async def cabinet_menu(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text="üìÑ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_cabinet_menu()
    )

@router.callback_query(lambda c: c.data == "pay_menu")
async def test_menu(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text="üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É",
        reply_markup=get_test_menu()
    )

@router.callback_query(lambda c: c.data == "one_m_menu")
async def subscription_one(callback_query: types.CallbackQuery):
    text, markup = get_subscription_one()
    
    await callback_query.message.edit_text(
        text=text,
        parse_mode=ParseMode.HTML,
        reply_markup=markup
    )



@router.callback_query(lambda c: c.data == "one_m_device")
async def subscription_one_device(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("<b>–ö–∞–∫–æ–µ —É –≤–∞—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?</b>"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_subscription_one_device()
    )

@router.callback_query(lambda c: c.data == "one_m_ios")
async def subscription_one_ios(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_subscription_one_ios()
    )

@router.callback_query(lambda c: c.data == "one_m_android")
async def subscription_one_android(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_subscription_one_android()
    )

@router.callback_query(lambda c: c.data == "one_m_macos")
async def subscription_one_macos(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_subscription_one_macos()
    )

@router.callback_query(lambda c: c.data == "one_m_windows")
async def subscription_one_windows(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>Karing</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_subscription_one_windows()
    )

"""–º–µ–Ω—é –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""

@router.callback_query(lambda c: c.data == "trial_device")
async def trial_one_device(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("<b>–ö–∞–∫–æ–µ —É –≤–∞—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?</b>"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_trial_device()
    )

@router.callback_query(lambda c: c.data == "trial_ios")
async def subscription_one_ios(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_trial_ios()
    )

@router.callback_query(lambda c: c.data == "trial_android")
async def trial_android(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_trial_android()
    )

@router.callback_query(lambda c: c.data == "trial_macos")
async def trial_macos(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_trial_macos()
    )

@router.callback_query(lambda c: c.data == "trial_windows")
async def trial_windows(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback_query.message.edit_text(
        text=("–î–ª—è –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>Karing</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá"),
        parse_mode=ParseMode.HTML,
        reply_markup=get_trial_windows()
    )

"""end –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
