from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile, InlineKeyboardButton
from handlers.config import get_server_data
from db.db import get_server_ids_as_list
from buttons.client import BUTTON_TEXTS
from bot import bot
from client.menu import get_back_button
import aiohttp
import asyncio
from aiogram.enums import ChatAction
from log import logger
from dotenv import load_dotenv
import os
from client.text import SERVICE_TEXT, PRICE_TEXT
from aiogram.enums.parse_mode import ParseMode

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ANDR = os.getenv("ANDR")
LINUX = os.getenv("LINUX")
WINDOWS = os.getenv("WINDOWS")
MAC = os.getenv("MAC")
IOS = os.getenv("IOS")
SERVEDATABASE = os.getenv("SERVEDATABASE")


async def check_server_status(server_url: str, server_name: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –µ–≥–æ URL.
    
    :param server_url: URL —Å–µ—Ä–≤–µ—Ä–∞
    :param server_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    :return: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(server_url) as response:
                if response.status == 200:
                    return f"üü¢ –°–µ—Ä–≤–µ—Ä {server_name}: –æ–Ω–ª–∞–π–Ω"
                else:
                    return f"üî¥ –°–µ—Ä–≤–µ—Ä {server_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
        return f"üî¥ –°–µ—Ä–≤–µ—Ä {server_name}: –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"


async def check_all_servers() -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.
    """
    server_ids = await get_server_ids_as_list(SERVEDATABASE)
    statuses = {}

    tasks = []
    for server_id in server_ids:
        server_data = await get_server_data(server_id)
        if server_data:
            server_url = server_data["server"]
            server_name = server_data["name"]
            tasks.append(check_server_status(server_url, server_name))
        else:
            statuses[server_id] = f"üî¥ –°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

    results = await asyncio.gather(*tasks, return_exceptions=True)
    for server_id, result in zip(server_ids, results):
        if isinstance(result, str):
            statuses[server_id] = result

    return statuses

async def show_server_info(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN.
    """
    server_info_text = SERVICE_TEXT
    statuses = await check_all_servers()
    status_text = "\n".join(statuses.values())

    final_text = f"üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n{status_text}\n\n{server_info_text}\n"

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=final_text,
        parse_mode=ParseMode.HTML, 
        disable_web_page_preview=True,
        reply_markup=get_back_button()
    )

async def show_router_instructions(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN.
    """
    server_info_text = SERVICE_TEXT
    statuses = await check_all_servers()
    status_text = "\n".join(statuses.values())

    final_text = f"üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n{status_text}\n\n{server_info_text}\n"

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=final_text,
        parse_mode=ParseMode.HTML, 
        disable_web_page_preview=True,
        reply_markup=get_back_button()
    )


def get_instruction_menu_keyboard() -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["ios"], url=IOS),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["android"], url=ANDR),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["macos"], url=MAC),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["windows"], url=WINDOWS),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["linux"], url=LINUX),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["previous"], callback_data="get_cabinet")
    )
    keyboard.adjust(2, 2, 1)
    return keyboard


async def show_instructions(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.
    """
    await callback_query.message.answer("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:")
    await callback_query.message.answer(
    "–í—ã –≤—ã–±—Ä–∞–ª–∏: iPhone üì±\n\n"
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href=\"https://apps.apple.com/us/app/v2raytun/id6476628951\">v2RayTun</a> –Ω–∞ —Å–≤–æ–π iPhone.\n\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ App Store.",
    parse_mode="HTML"
)

    await bot.send_photo(
        chat_id=callback_query.message.chat.id,
        photo=FSInputFile("client/images/vpn1.jpg"),
        parse_mode="HTML"
    )

    await bot.send_photo(
        chat_id=callback_query.message.chat.id,
        caption="–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun",
        photo=FSInputFile("client/images/vpn2.jpg"),
        parse_mode="HTML"
    )

    await bot.send_photo(
        chat_id=callback_query.message.chat.id,
        caption="–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ ¬´–ø–ª—é—Å¬ª –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–≤ –∫–ª—é—á –≤ –±–æ—Ç–µ –∏ –Ω–∞–∂–∏–º–∞–µ–º - ¬´–¥–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞¬ª",
        photo=FSInputFile("client/images/vpn3.jpg"),
        parse_mode="HTML"
    )

    await bot.send_photo(
        chat_id=callback_query.message.chat.id,
        caption="–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ ¬´–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å—Ç–∞–≤–∫—É¬ª –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ö–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞¬ª",
        photo=FSInputFile("client/images/vpn4.jpg"),
        parse_mode="HTML"
    )

    await bot.send_photo(
        chat_id=callback_query.message.chat.id,
        caption="–í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ ¬´–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π VPN¬ª –Ω–∞–∂–º–∏—Ç–µ ¬´–†–∞–∑—Ä–µ—à–∏—Ç—å¬ª",
        photo=FSInputFile("client/images/vpn5.jpg"),
        parse_mode="HTML"
    )

    await bot.send_photo(
        chat_id=callback_query.message.chat.id,
        caption="–ö–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ç–æ ¬´–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞¬ª —Å—Ç–∞–Ω–µ—Ç –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º.\n–í–æ—Ç —Ç–∞–∫ –≤—Å—ë –ø—Ä–æ—Å—Ç–æ! –í–∞—à VPN —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
        photo=FSInputFile("client/images/vpn6.jpg"),
        parse_mode="HTML"
    )

    await callback_query.message.answer(
    "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
    reply_markup=get_back_button()
)



async def show_prices(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    prices_text = PRICE_TEXT
    # –£–±—Ä–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã –∏ —Ç–æ–≥–¥–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üí∞ –¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏: –±—É–¥–µ—Ç —Å—Ç–∞—Ç—É—Å, –ø–µ—á–∞—Ç–∞–µ—Ç...
    # –ö–∞–∫ –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç–∞–∫–æ–µ —Å–µ–±–µ)
    #bot = callback_query.bot
    #chat_id = callback_query.message.chat.id

    #await bot.send_chat_action(chat_id, ChatAction.TYPING)
    #await asyncio.sleep(5)

    await callback_query.message.edit_text(
        text=prices_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_back_button()
    )
