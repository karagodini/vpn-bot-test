import aiohttp
import asyncio
import json
from datetime import datetime as dt
from aiogram import types
from handlers.config import get_server_data
from log import logger
from db.db import Database, get_server_ids_as_list
from aiogram import Router
from dotenv import load_dotenv
import os

load_dotenv()

AUTOHIDDIFY = os.getenv("AUTOHIDDIFY")
AUTOSTREI = os.getenv("AUTOSTREI")
USERSDATABASE = os.getenv("USERSDATABASE")
SERVEDATABASE = os.getenv("SERVEDATABASE")

router = Router()
semaphore = asyncio.Semaphore(10)

async def process_email_for_all_servers(callback_query: types.CallbackQuery, email: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email.
    """
    db = Database(USERSDATABASE)
    client_server_pairs = await db.get_ids_by_email(email)

    if not client_server_pairs:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º: {email}."

    tasks = [
        process_server_with_semaphore(server_id, client_id, email, callback_query)
        for client_id, server_id in client_server_pairs
    ]
    responses = await asyncio.gather(*tasks, return_exceptions=True)
    full_response = "\n\n".join(filter(None, [str(response) if isinstance(response, str) else "" for response in responses]))

    return full_response

async def process_server_with_semaphore(server_id, client_id, email, message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–º–∞—Ñ–æ—Ä–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
    """
    async with semaphore:
        return await process_server(server_id, client_id, email, message)

async def process_server(server_id, client_id, email, message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —Å–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–æ–¥–ø–∏—Å–∫–µ, –∞ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        server_data = await get_server_data(server_id)
        if not server_data:
            logger.error(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è server_id: {server_id}")
            return ""

        userdata_list, config_list = await config_from_lk(client_id, email, server_data)

        if userdata_list and config_list:
            server_name = server_data['name']
            response = format_response(email, server_name, userdata_list, config_list)
            return response
        else:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {server_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server_id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")

    return ""

def format_response(email: str, server_name: str, userdata_list: list, config_list: list) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∏–Ω–µ, —Å—Ç—Ä–∞–Ω–µ (—Å–µ—Ä–≤–µ—Ä–µ) –∏ –¥–µ—Ç–∞–ª—è—Ö –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ iPhone –∏ Android.
    """
    response = f"<b>–í–∞—à –õ–æ–≥–∏–Ω üîë:</b> <code>{email}</code>\n"
    response += f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {server_name}\n"
    
    if userdata_list and "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞" in userdata_list[0]:
        response += userdata_list[0]
        return response

    response += "\n".join(userdata_list)

    if len(config_list) > 1:
        response += (
            f"\n\n<b>–î–ª—è IPhone ‚Äî Streisand:</b>\n<code>{config_list[0]}</code>\n"
            f"<b>–î–ª—è ANDROID ‚Äî Hiddify:</b>\n<code>{config_list[1]}</code>\n"
            f"<b>–°—Å—ã–ª–∫–∞ üîë –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n<code>{config_list[2]}</code>\n\n"
            f"<a href='{AUTOSTREI}{config_list[0]}'>–ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ IPhone ‚Äî Streisand</a>\n"
            f"<a href='{AUTOHIDDIFY}{config_list[1]}'>–ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ANDROID ‚Äî Hiddify</a>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        )
    elif len(config_list) == 1:
        response += f"\n\n<code>{config_list[0]}</code>"

    return response

async def config_from_lk(client_id, email, server_data):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    LOGIN_DATA = {
        "username": server_data["username"],
        "password": server_data["password"],
    }

    async with aiohttp.ClientSession() as session:
        try:
            login_response = await session.post(server_data["login_url"], json=LOGIN_DATA)
            if login_response.status != 200:
                logger.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + await login_response.text())
                return [], []

            userdata_list, config_list = [], []
            result = await get_client_config(client_id, email, server_data, session)
            userdata, config_url, config_json, config_vless = result

            if userdata:
                userdata_list.append(userdata)
                config_list.extend([config_json, config_url, config_vless])

            return userdata_list, config_list
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return [], []


async def get_client_config(email, server_data, session):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ, –ø–æ—Ä—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. 
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    all_inbound_ids = server_data.get("inbound_ids", [])
    
    for inbound_id in all_inbound_ids:
        try:
            inbound_url = f"{server_data['config_client_url']}/{inbound_id}"
            inbound_response = await session.get(inbound_url, headers={'Accept': 'application/json'})

            if inbound_response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö inbound –¥–ª—è ID {inbound_id}: {await inbound_response.text()}")
                continue

            inbound_data = await inbound_response.json()
            if inbound_data.get('obj') is None:
                logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è inbound ID {inbound_id}")
                continue

            clients = json.loads(inbound_data['obj']['settings']).get('clients', [])
            client = next((c for c in clients if c['email'] == email), None)

            if not client:
                continue
            
            expiry_time = client.get('expiryTime', 0)
            current_time = int(dt.utcnow().timestamp() * 1000)

            if expiry_time < current_time:
                expiry_text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (—Å—Ä–æ–∫ –∏—Å—Ç–µ–∫).\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
                return expiry_text, "", "", ""

            port = inbound_data['obj']['port']
            stream_settings = json.loads(inbound_data['obj']['streamSettings'])
            sub_id = client.get('subId', '')

            expiry_text = f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {dt.fromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')}"
            config_url = f"{server_data['sub_url']}{sub_id}\n"
            config_json = f"{server_data['json_sub']}{sub_id}\n"
            config_vless = (
                f"vless://{client['id']}@{server_data['server_ip']}:{port}?type={stream_settings['network']}&security={stream_settings['security']}"
                f"&pbk={stream_settings['realitySettings']['settings']['publicKey']}&fp={stream_settings['realitySettings']['settings']['fingerprint']}&"
                f"sni={stream_settings['realitySettings']['serverNames'][0]}&sid={stream_settings['realitySettings']['shortIds'][0]}&"
                f"spx={stream_settings['realitySettings']['settings']['spiderX'].replace('/', '%2F')}&flow=xtls-rprx-vision#{email}\n"
            )

            expiry_text = f"\n{expiry_text}"

            return expiry_text, config_url, config_json, config_vless
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inbound ID {inbound_id}: {e}")
            continue

    return "", "", "", ""
