from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, types
import string
import aiosqlite
import asyncio
import random
from log import logger
from client.menu import get_back_button
from handlers.states import PromoCodeState
from buttons.client import BUTTON_TEXTS
from dotenv import load_dotenv
import os
from client.text import REF_TEXT
from datetime import datetime, timedelta

load_dotenv()

SUPPORT = os.getenv("SUPPORT")

USERSDATABASE = os.getenv("USERSDATABASE")
router = Router()


async def get_user_data(telegram_id: int) -> tuple:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with aiosqlite.connect(USERSDATABASE) as conn:
        async with conn.execute("""
            SELECT referral_code, referral_count, promo_code, sum_my, sum_ref
            FROM users
            WHERE telegram_id = ?
        """, (telegram_id,)) as cursor:
            return await cursor.fetchone()


async def update_user_referral_code(telegram_id: int, referral_code: str) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    async with aiosqlite.connect(USERSDATABASE) as conn:
        await conn.execute("""
            UPDATE users SET referral_code = ? WHERE telegram_id = ?
        """, (referral_code, telegram_id))
        await conn.commit()


async def referral_info(callback_query: types.CallbackQuery, bot, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö.
    """
    from pay.prices import get_price_with_referral_info

    telegram_id = callback_query.from_user.id
    user_data = await get_user_data(telegram_id)

    if user_data:
        referral_code, referral_count, user_promo_code, sum_my, sum_ref = user_data

        if referral_code is None:
            referral_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
            await update_user_referral_code(telegram_id, referral_code)

        bot_username = (await bot.get_me()).username
        referral_link = f"https://t.me/{bot_username}?start={referral_code}"
        share_link = f"https://t.me/share/url?url={referral_link}"

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –∏ —Ü–µ–Ω—É
        expiry_time = 30 
        price, total_discount, referral_count = get_price_with_referral_info(expiry_time, telegram_id, user_promo_code)

        # üîΩ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        formatted_ref_text = REF_TEXT.format(
            referral_link=referral_link,
            total_discount=total_discount,
            sum_my=sum_my,
            sum_ref=sum_ref
        )

        referral_button = InlineKeyboardBuilder()
        referral_button.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["support"], url=SUPPORT),
            InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
        )

        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=formatted_ref_text,
            parse_mode="HTML",
            reply_markup=referral_button.adjust(1).as_markup()
        )
    else:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )


@router.callback_query(lambda c: c.data == "enter_promo_code")
async def enter_promo_code_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    try:
        keyboard = InlineKeyboardBuilder().add(
            InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel_promo_code")
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"
        await callback_query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
        sent_message = await callback_query.message.answer(
            text="üéüÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
            reply_markup=keyboard.adjust(1).as_markup()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(sent_message_id=sent_message.message_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await state.set_state(PromoCodeState.WaitingForPromoCode)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∫–Ω–æ–ø–∫–µ
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"Error in enter_promo_code_handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)


@router.message(PromoCodeState.WaitingForPromoCode)
async def process_promo_code(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.
    """
    try:
        promo_code = message.text.strip()
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(input_message_id=message.message_id)
        
        async with aiosqlite.connect(USERSDATABASE) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
            async with conn.execute("""
                SELECT id, discount, days, is_active
                FROM promo_codes
                WHERE code = ?
            """, (promo_code,)) as cursor:
                promo_data = await cursor.fetchone()

            if not promo_data:
                await handle_promo_code_error(message, state, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            promo_id, discount, days, is_active = promo_data

            if not is_active:
                await handle_promo_code_error(message, state, "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
            async with conn.execute("""
                SELECT COUNT(*)
                FROM used_promo_codes
                WHERE promo_code = ? AND user_id = (SELECT id FROM users WHERE telegram_id = ?)
            """, (promo_code, user_id)) as cursor:
                already_used = (await cursor.fetchone())[0]

            if already_used > 0:
                await handle_promo_code_error(message, state, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with conn.execute("""
                SELECT subscription_end FROM users WHERE telegram_id = ?
            """, (user_id,)) as cursor:
                subscription_end = await cursor.fetchone()
                current_end = datetime.strptime(subscription_end[0], "%Y-%m-%d %H:%M:%S") if subscription_end and subscription_end[0] else datetime.now()

            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            new_end = current_end + timedelta(days=days) if current_end > datetime.now() else datetime.now() + timedelta(days=days)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("""
                INSERT INTO used_promo_codes (user_id, promo_code)
                VALUES ((SELECT id FROM users WHERE telegram_id = ?), ?)
            """, (user_id, promo_code))
            
            await conn.execute("""
                UPDATE users
                SET promo_code = ?,
                    promo_code_usage = 0,
                    subscription_end = ?,
                    subscription_active = 1
                WHERE telegram_id = ?
            """, (promo_code, new_end.strftime("%Y-%m-%d %H:%M:%S"), user_id))
            
            await conn.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_msg = (
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n"
                f"üîπ –°–∫–∏–¥–∫–∞: {discount}%\n"
                f"üîπ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π\n"
                f"üîπ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end.strftime('%d.%m.%Y %H:%M')}"
            )
            
            await handle_promo_code_success(message, state, success_msg)
            
    except Exception as e:
        logger.error(f"Error processing promo code: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    finally:
        await state.clear()


async def handle_promo_code_error(message: types.Message, state: FSMContext, error_msg: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'sent_message_id' in data:
            try:
                await message.bot.delete_message(message.chat.id, data['sent_message_id'])
            except:
                pass
        
        if 'input_message_id' in data:
            try:
                await message.bot.delete_message(message.chat.id, data['input_message_id'])
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer(error_msg, reply_markup=get_back_button())
        
    except Exception as e:
        logger.error(f"Error in handle_promo_code_error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=get_back_button())


async def handle_promo_code_success(message: types.Message, state: FSMContext, success_message: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    state_data = await state.get_data()
    await delete_message_if_exists(message, state_data.get('sent_message_id'))
    await delete_message_if_exists(message, state_data.get('input_message_id'))

    await message.answer(success_message, reply_markup=get_back_button())


async def delete_message_if_exists(message: types.Message, message_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    if message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")