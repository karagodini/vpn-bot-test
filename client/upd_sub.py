import asyncio, json, requests, time, uuid
from datetime import datetime as dt
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import ClientSession, TCPConnector
from aiogram import Router, F
from uuid import uuid4
from aiogram.enums.parse_mode import ParseMode
from bot import bot
from log import logger
from client.menu import get_main_menu, get_back_button
from db.db import Database, get_emails_from_database, get_server_id, update_sum_my, update_sum_ref, add_free_days, get_db_connection
from handlers.config import get_server_data
from pay.prices import *
from pay.payments import (
    create_payment_yookassa,
    check_payment_yookassa, 
    create_paymentupdate, 
    create_payment_robokassa, 
    check_payment_robokassa, 
    create_payment_cryptobot, 
    check_payment_cryptobot, 
    create_payment_tgpay, 
    create_cloudpayments_invoice, 
    check_payment_cloud,
    create_yoomoney_invoice,
    check_yoomoney_payment_status
)
from pay.process_bay import is_valid_email
from db.db import  handle_database_operations
from handlers.states import UpdClient
from pay.promocode import log_promo_code_usage
from pay.pay_metod import PAYMENT_METHODS
from buttons.client import BUTTON_TEXTS
from dotenv import load_dotenv
from admin.notify import GROUP_CHAT_ID
import os

load_dotenv()

EMAIL = os.getenv("EMAIL")
YOOMONEY_CARD = int(os.getenv("YOOMONEY_CARD"))

FIRST_CHECK_DELAY = int(os.getenv("FIRST_CHECK_DELAY", 15))
SUBSEQUENT_CHECK_INTERVAL = int(os.getenv("SUBSEQUENT_CHECK_INTERVAL", 30))
MAX_ATTEMPTS = int(os.getenv("MAX_ATTEMPTS", 15))

PASS2 = os.getenv("PASS2")
SERVEDATABASE = os.getenv("SERVEDATABASE")
FREE_DAYS = os.getenv("FREE_DAYS")
ENABLE_FREE_UPD = os.getenv("ENABLE_FREE_UPD")

router = Router()

async def gather_in_chunks(tasks, chunk_size):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —á–∞—Å—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.

    - –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ –≥—Ä—É–ø–ø—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
    """
    results = []
    for i in range(0, len(tasks), chunk_size):
        chunk = tasks[i:i + chunk_size]
        results.extend(await asyncio.gather(*chunk))
    return results


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

@router.callback_query(lambda callback_query: callback_query.data == "extend_subscription")
async def handle_get_config2(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    - –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Ö –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
    - –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–≥–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    telegram_id = callback_query.from_user.id
    logger.info(f"DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è telegram_id {telegram_id}")

    emails = await get_emails_from_database(telegram_id)
    if not emails:
        logger.error(f"DEBUG: –ù–µ –Ω–∞–π–¥–µ–Ω–æ email –¥–ª—è telegram_id {telegram_id}")
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["previous"], callback_data="main_menu"))
        keyboard.adjust(1)
        await callback_query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        return

    responses = await gather_in_chunks([from_upd_sub(email) for email in emails], chunk_size=10)
    keyboard = InlineKeyboardBuilder()
    full_response = []

    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    for email, response in zip(emails, responses):
        if response:
            full_response.append(response)
            if "üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ</b>:" in response:
                keyboard.add(InlineKeyboardButton(
                    text=f"üîë –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data=f"extend_subscription_{email}"
                ))

    keyboard.adjust(1)  # <--- –í–∞–∂–Ω–æ: 1 –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫

    if full_response:
        response_text = "\n\n".join(full_response)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–æ—Ç–¥–µ–ª—å–Ω—ã–π builder —Å 2 –∫–æ–ª–æ–Ω–∫–∞–º–∏)
        instruction_keyboard = InlineKeyboardBuilder()
        instruction_keyboard.add(
            InlineKeyboardButton(text="üçè IOS", callback_data="show_instruction_ios"),
            InlineKeyboardButton(text="üì± Android", callback_data="show_instruction_android"),
            InlineKeyboardButton(text="üíª MacOS", callback_data="show_instruction_macos"),
            InlineKeyboardButton(text="üñ• Windows", callback_data="show_instruction_windows"),
        )
        instruction_keyboard.adjust(2)  # <--- –í–∞–∂–Ω–æ: 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π

        # –ö–Ω–æ–ø–∫–∞ main_menu (–æ—Ç–¥–µ–ª—å–Ω—ã–π builder —Å 1 –∫–æ–ª–æ–Ω–∫–æ–π)
        main_menu_keyboard = InlineKeyboardBuilder()
        main_menu_keyboard.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["previous"], callback_data="main_menu")
        )
        main_menu_keyboard.adjust(1)  # <--- –í–∞–∂–Ω–æ: 1 –∫–æ–ª–æ–Ω–∫–∞

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë
        keyboard.attach(instruction_keyboard)
        keyboard.attach(main_menu_keyboard)

        await callback_query.message.edit_text(
            response_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["previous"], callback_data="main_menu"))
        keyboard.adjust(1)
        await callback_query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )

    await state.update_data(emails=emails)

@router.callback_query(lambda c: c.data.startswith("show_instruction_ios"))
async def process_instruction_callback_ios(callback_query: types.CallbackQuery, state: FSMContext):

    instruction_text = (
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b><a href='https://apps.apple.com/app/id6476628951'>v2RayTun</a></b> –∏–∑ Appstore\n\n"
        "2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ\n\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É "
        "-> \"–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞\" –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://telegra.ph/MoyVPN-na-IOS-v2RayTun-04-28")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ
    await callback_query.message.answer(
        instruction_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("show_instruction_android"))
async def process_instruction_callback_android(callback_query: types.CallbackQuery, state: FSMContext):

    instruction_text = (
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b><a href='https://play.google.com/store/apps/details?id=com.v2raytun.android&pli=1'>v2Box</a></b> –∏–∑ Google Play\n\n"
        "2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ\n\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2Box</b>, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É "
        "-> \"–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞\" –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://telegra.ph/MoyVPN-na-Android-04-28")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ
    await callback_query.message.answer(
        instruction_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("show_instruction_macos"))
async def process_instruction_callback_macos(callback_query: types.CallbackQuery, state: FSMContext):

    instruction_text = (
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b><a href='https://apps.apple.com/app/id6476628951'>v2RayTun</a></b> –∏–∑ Appstore\n\n"
        "2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ\n\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>v2RayTun</b>, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É "
        "-> \"–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞\" –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://telegra.ph/MoyVPN-na-MacOS-v2RayTun-04-28")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ
    await callback_query.message.answer(
        instruction_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("show_instruction_windows"))
async def process_instruction_callback_windows(callback_query: types.CallbackQuery, state: FSMContext):

    instruction_text = (
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b><a href='https://hiddify.com/'>Hiddify</a></b>\n\n"
        "2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ\n\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>Hiddify</b>, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É "
        "-> \"–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞\" –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://telegra.ph/Instrukciya-po-ustanovke-Hiddify-ot-MoyVPN-08-19")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ
    await callback_query.message.answer(
        instruction_text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback_query.answer()


async def from_upd_sub(email: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ —Å–µ—Ä–≤–µ—Ä—É, –∞ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö.

    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
    """
    server_ids = await get_server_id(SERVEDATABASE)
    db = Database(USERSDATABASE)
    client_ids = await db.get_ids_by_email(email)

    if not client_ids:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å email: {email}"
    responses = await gather_in_chunks(
        [sub_server(server_id, client_id, email) for client_id in client_ids for server_id in server_ids], 
        chunk_size=5
    )
    return "\n\n".join(filter(None, responses)) if responses else f"‚ùå –ü—Ä–æ—à–ª–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {email}."

async def sub_server(server_id, client_id, email):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    - –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ.
    - –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ config.
    """
    server_data = await get_server_data(server_id)
    if not server_data:
        return ""
    try:
        expiry_text = await sub_client(client_id, email, server_data)
        if expiry_text:
            # –ü–æ–ª—É—á–∞–µ–º config –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_configs
            conn = await get_db_connection()
            config = "‚ùó Config –Ω–µ –Ω–∞–π–¥–µ–Ω"
            try:
                cursor = conn.cursor()
                cursor.execute(
                    """
                    SELECT config FROM user_configs WHERE email = ?
                    """,
                    (email,)
                )
                row = cursor.fetchone()
                if row and row[0]:
                    config = row[0]
            except Exception as e:
                logger.error(f"[sub_server] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ config: {e}")
                config = "‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è config"
            finally:
                conn.close()

            return (
                f"üë§ <b>–í–∞—à –∞–π–¥–∏</b>: {email}\n"
                f"{expiry_text}\n\n"
                f"üîë <b>–í–∞—à –∫–ª—é—á</b>:\n\n<pre><code>{config}</code></pre>\n"
                f"*–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å‚òùÔ∏è\n\n"
                f"üö® <b>–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>: @moy_help\n\n"
                f"<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b> üëá"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É {server_id}: {e}")
    return ""



async def sub_client(client_id, email, server_data):
    """
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    LOGIN_DATA = {
        "username": server_data["username"],
        "password": server_data["password"],
    }
    async with ClientSession(connector=TCPConnector(limit=100)) as session:
        login_response = await session.post(server_data["login_url"], json=LOGIN_DATA)
        if login_response.status != 200:
            logger.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + await login_response.text())
            return None

        all_inbound_ids = server_data.get("inbound_ids", [])
        tasks = [fetch_inbound_data(session, inbound_id, email, server_data) for inbound_id in all_inbound_ids]
        results = await asyncio.gather(*tasks)
        return next((result for result in results if result), None)


async def fetch_inbound_data(session, inbound_id, email, server_data):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ inbound –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ inbound –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ inbound ID
    —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ
    —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    inbound_url = f"{server_data['config_client_url']}/{inbound_id}"
    inbound_response = await session.get(inbound_url, headers={'Accept': 'application/json'})
    if inbound_response.status != 200:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è inbound ID {inbound_id}: {await inbound_response.text()}")
        return None

    inbound_data = await inbound_response.json()
    if inbound_data.get('obj') is None:
        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è inbound ID {inbound_id}")
        return None

    clients = json.loads(inbound_data['obj']['settings']).get('clients', [])
    client = next((client for client in clients if client['email'] == email), None)
    if not client:
        return None
    expiry_time = int(client['expiryTime'])
    if expiry_time < 0:
        return "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
    return f"üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ</b>: {dt.fromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d')}"


@router.callback_query(lambda c: c.data.startswith('extend_subscription_'))
async def process_extension(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ) –∏–ª–∏ –ø–æ–∫—É–ø–∫—É.
    """
    email = callback_query.data.split("_", 2)[-1]
    await state.update_data(selected_email=email)
    telegram_id = callback_query.from_user.id
    
    db = Database(USERSDATABASE)
    free_days = db.get_free_days_by_telegram_id(telegram_id)
    is_free_extension_enabled = ENABLE_FREE_UPD.lower() == "true"
    keyboard = InlineKeyboardBuilder()
    
    if free_days > 0 and is_free_extension_enabled:
        keyboard.add(InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data=f"extend_free_{email}"))
    
    keyboard.add(InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"extend_paid_{email}"))
    keyboard.add(InlineKeyboardButton(text=BUTTON_TEXTS["previous"], callback_data="main_menu"))
    keyboard.adjust(1)

    if free_days > 0 and is_free_extension_enabled:
        message_text = f"üéâ –£ –≤–∞—Å –µ—Å—Ç—å <b>{int(free_days)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π</b>! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    else:
        message_text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."

    try:
        sent_message = await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        await state.update_data(sent_message_id=sent_message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith('extend_free_'))
async def process_free(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏.
    """    
    email = callback_query.data.split("_", 2)[-1]
    await state.update_data(selected_email=email)

    telegram_id = callback_query.from_user.id
    await state.update_data(selected_email=email)

    db = Database(USERSDATABASE)
    free_days = db.get_free_days_by_telegram_id(telegram_id)
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è {telegram_id}: {free_days}")
    payment_methods_keyboard = InlineKeyboardBuilder()
    payment_methods_keyboard.add(InlineKeyboardButton(
            text=BUTTON_TEXTS["previous"], callback_data="main_menu"
        ))
    update_response = await update_client_subscription(telegram_id, email, free_days)
    if free_days > 0:
        new_free_days = free_days - free_days
        db.update_free_days_by_telegram_id(telegram_id, new_free_days)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è {telegram_id}: {new_free_days}")

    if free_days > 0:
        message_text = f"üéâ –í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>{email}</b> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>{int(free_days)}</b> –¥–Ω—è(–µ–π)."
    else:
        message_text = f"üîî –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å email <b>{email}</b> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!"
    try:
        await callback_query.message.edit_text(
            message_text,
            reply_markup=payment_methods_keyboard.adjust(1).as_markup(),
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å email {email} –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {free_days} –¥–Ω–µ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith('extend_paid_'))
async def process_paid(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏.
    """
    email = callback_query.data.split("_", 2)[-1]
    await state.update_data(selected_email=email)

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text=BUTTON_TEXTS["one_m"], callback_data=f"extend_31_{email}"),
        InlineKeyboardButton(text=BUTTON_TEXTS["three_m"], callback_data=f"extend_93_{email}"),
        InlineKeyboardButton(text=BUTTON_TEXTS["twelve_m"], callback_data=f"extend_365_{email}"),
        InlineKeyboardButton(text=BUTTON_TEXTS["previous"], callback_data="main_menu")
    ).adjust(2)

    try:
        sent_message = await callback_query.message.edit_text(
            f"–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {email}?",
            reply_markup=keyboard.as_markup()
        )
        await state.update_data(sent_message_id=sent_message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith('extend_'))
async def process_month_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏–Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–µ—Å—Ç–∏ email –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ email.
    """
    data = callback_query.data.split('_')
    if len(data) != 3 or not data[1].isdigit():
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        return

    months = int(data[1])
    name = data[2]
    logger.info(f"DEBUG: –í—ã–±—Ä–∞–Ω–æ {months} –¥–Ω—è(–µ–π) –¥–ª—è {name}")

    # –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if months == 31:
        price = "80.00"  # –¶–µ–Ω–∞ –¥–ª—è 1 –º–µ—Å—è—Ü–∞
    elif months == 93:
        price = "200.00"  # –¶–µ–Ω–∞ –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤
    elif months == 365:
        price = "750.00"  # –¶–µ–Ω–∞ –¥–ª—è 12 –º–µ—Å—è—Ü–µ–≤
    else:
        price = "80.00"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_months=months)
    await state.update_data(name=name)
    await state.update_data(email="default@mail.ru")
    await state.update_data(price=price)  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ state
    await callback_query.answer()

    cancel_keyboard = InlineKeyboardBuilder()
    cancel_keyboard.add(
        InlineKeyboardButton(text=BUTTON_TEXTS["without_mail"], callback_data="continue_without_email"),
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel")
    )

    state_data = await state.get_data()

    # –°—Ä–∞–∑—É –∏–¥—ë–º –∫ –æ–ø–ª–∞—Ç–µ
    await process_yookassa(callback_query, state)
    return

    

@router.callback_query(lambda c: c.data == "continue_without_email", UpdClient.WaitingForEmail)
@router.message(UpdClient.WaitingForEmail)
async def handle_email_or_continue(callback: types.CallbackQuery | types.Message, state: FSMContext):
    #await state.set_state(UpdClient.WaitingForEmail)
    email = None
    user_id = None
    name = (await state.get_data()).get('selected_email')

    if isinstance(callback, types.CallbackQuery):
        email = EMAIL
        user_id = callback.from_user.id
        chat_id = user_id
        sent_message_id = (await state.get_data()).get('sent_message_id')
    elif isinstance(callback, types.Message):
        email = callback.text

        if not is_valid_email(email):
            invalid_email_msg = await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
            await callback.delete()
            await asyncio.sleep(2)
            await invalid_email_msg.delete()
            return

        await callback.delete()
        user_id = callback.from_user.id
        chat_id = user_id
        sent_message_id = (await state.get_data()).get('sent_message_id')

    await state.update_data(email=email)
    await state.update_data(name=name)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–Æ–∫–∞—Å—Å–∞" –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    payment_methods_keyboard = InlineKeyboardBuilder()
    payment_methods_keyboard.add(
        InlineKeyboardButton(
            text=BUTTON_TEXTS["yokassa"],
            callback_data="payment_method_yookassa"
        )
    )
    payment_methods_keyboard.add(
        InlineKeyboardButton(
            text=BUTTON_TEXTS["previous"],
            callback_data="main_menu"
        )
    )

    payment_method_text = (
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "üí≥ <b>–Æ–∫–∞—Å—Å–∞:</b> –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏."
    )

    if sent_message_id:
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=sent_message_id,
                text=payment_method_text,
                parse_mode='HTML',
                reply_markup=payment_methods_keyboard.adjust(1).as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=payment_method_text,
                parse_mode='HTML',
                reply_markup=payment_methods_keyboard.adjust(1).as_markup()
            )
            await state.update_data(sent_message_id=sent_message.message_id)
    else:
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=payment_method_text,
            parse_mode='HTML',
            reply_markup=payment_methods_keyboard.adjust(1).as_markup()
        )
        await state.update_data(sent_message_id=sent_message.message_id)

    await state.set_state(UpdClient.WaitingForPaymentMethod)

@router.callback_query(lambda c: c.data == "payment_method_yookassa")
async def process_yookassa(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    chat_id = callback.from_user.id
    email = data.get("email")
    name = data.get("name")
    expiry_time = data.get("expiry_time")  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ
    amount = data.get("price") or "80.00"  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ state –∏–ª–∏ –∑–∞–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é

    try:
        payment_url, payment_id = create_payment_yookassa(amount, chat_id, name, expiry_time, email)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_id –≤ state –∏–ª–∏ –ë–î, –µ—Å–ª–∏ –ø–æ—Ç–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å
        await state.update_data(payment_id=payment_id)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
            ]]
        )

        await bot.send_message(
            chat_id=chat_id,
            text="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=keyboard
        )

        await state.set_state(UpdClient.WaitingForPaymentMethod)
        await state.set_state(UpdClient.WaitingForPayment)
        asyncio.create_task(start_payment_status_update(callback, state, payment_id, "yookassa"))

    except Exception as e:
        import traceback
        error_text = f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:\n{str(e)}\n\n{traceback.format_exc()}"
        logger.error(error_text)
        await bot.send_message(chat_id=chat_id, text=error_text[:4000])  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤




@router.callback_query(lambda c: c.data.startswith("payment_method_"))
async def handle_payment_method_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.
    """
    await state.set_state(UpdClient.WaitingForPaymentMethod)

    payment_method = callback_query.data.split("_")[2]
    await state.update_data(payment_method=payment_method)
    data = await state.get_data()
    name = data.get("name")
    email = data.get("email")
    user_id = callback_query.from_user.id
    months = data.get("selected_months", 1)
    expiry_time = {
        31: ONE_M,
        93: THREE_M,
        185: SIX_M,
        365: ONE_YEAR,
    }.get(months, ONE_M)
    conn_users = sqlite3.connect(USERSDATABASE)
    cursor_users = conn_users.cursor()

    cursor_users.execute("""
        SELECT promo_code
        FROM users
        WHERE telegram_id = ?
    """, (user_id,))
    user_promo_code = cursor_users.fetchone()

    if user_promo_code and user_promo_code[0]:
        user_promo_code = user_promo_code[0]
    else:
        user_promo_code = None
        
    price_info = get_price_with_referral_info(expiry_time, user_id, user_promo_code)
    final_price = int(price_info[0])
    try:
        if payment_method == "yookassa":
            payment_url, payment_id = create_paymentupdate(final_price, user_id, email)
        elif payment_method == "yoomoney":
            label = str(uuid.uuid4()) 
            payment_url, payment_id = create_yoomoney_invoice(final_price, YOOMONEY_CARD, label)
            logger.info(f"DEBUG: —é–º–∞–Ω–∏ - {payment_url}, payment_id - {payment_id}")
        elif payment_method == "robokassa":
            payment_url, payment_id = create_payment_robokassa(final_price, user_id, name, expiry_time, email)
        elif payment_method == "cryptobot":
            payment_url, payment_id = await create_payment_cryptobot(final_price, user_id)
        elif payment_method == "cloudpay":
            invoice_id = str(uuid4())
            payment_url, payment_id = await create_cloudpayments_invoice(final_price, user_id, invoice_id)
        elif payment_method == "tgpay":
            sent_message = await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text="üîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...",
                parse_mode='HTML'
            )
            await asyncio.sleep(2)
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=sent_message.message_id)

            await create_payment_tgpay(final_price, user_id, name, expiry_time, payment_type="subscription_renewal", pay_currency="tgpay")
            return
        elif payment_method == "star":
            sent_message = await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text="üîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...",
                parse_mode='HTML'
            )
            await asyncio.sleep(2)
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=sent_message.message_id)

            await create_payment_tgpay(final_price, user_id, name, expiry_time, payment_type="subscription_renewal", pay_currency="xtr")
            return
        else:
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
            return

        keyboard = InlineKeyboardBuilder()

        keyboard.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["pay"], url=payment_url),
            InlineKeyboardButton(text=BUTTON_TEXTS["check_pay"], callback_data=f"find_payment:{payment_id}:{payment_method}"),
            InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="upd_cancel")
        )
        payment_text = (
            f"üí≥ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: <b>{months}</b>\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{final_price} ‚ÇΩ</b>\n\n"
            "‚ö†Ô∏è <i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ, –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.</i>\n\n"
        )
        if email != EMAIL:
            payment_text += f"üìß –ß–µ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: {email}"

        sent_message_id = data.get('sent_message_id')
        if sent_message_id:
            await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=sent_message_id,
                text=payment_text,
                parse_mode='HTML',
                reply_markup=keyboard.adjust(2).as_markup()
            )
        else:
            sent_message = await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=payment_text,
                parse_mode='HTML',
                reply_markup=keyboard.adjust(2).as_markup()
            )
            await state.update_data(sent_message_id=sent_message.message_id, user_promo_code=user_promo_code)
        await state.update_data(payment_id=payment_id, final_price=final_price)
        await state.set_state(UpdClient.WaitingForPayment)
        asyncio.create_task(start_payment_status_update(callback_query, state, payment_id, payment_method))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_payment_status_common(payment_id: str, payment_method: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç–æ–¥–∞–º.
    """
    try:
        if payment_method == "yookassa":
            return await check_payment_yookassa(payment_id)
        elif payment_method == "yoomoney":
            return await check_yoomoney_payment_status(payment_id)
        elif payment_method == "robokassa":
            password2 = PASS2
            result = await check_payment_robokassa(payment_id, password2)
            return result == "100"
        elif payment_method == "cryptobot":
            return await check_payment_cryptobot(payment_id)
        elif payment_method == "cloudpay":
            return await check_payment_cloud(payment_id)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ({payment_method}): {e}")
        return False
    

async def finalize_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ.
    """
    try:
        data = await state.get_data()
        name = data.get("name")
        final_price = data.get("price")
        months = data.get("selected_months")
        user_promo_code = data.get("user_promo_code")
        telegram_id = callback_query.from_user.id

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await update_client_subscription(telegram_id, name, months)
        await handle_database_operations(telegram_id, name, months)
        await log_promo_code_usage(telegram_id, user_promo_code)
        await update_sum_my(telegram_id, float(final_price))
        await update_sum_ref(telegram_id, final_price)
        await add_free_days(telegram_id, FREE_DAYS)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        await callback_query.message.edit_text(
            text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months} –¥–µ–Ω—å(–Ω–µ–π)!",
            parse_mode='HTML',
            reply_markup=get_back_button()  # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
        )

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É "–ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ" –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π —ç–ª–µ–º–µ–Ω—Ç—ã
        #await callback_query.message.edit_message_reply_markup(reply_markup=None)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏

        # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
        #await callback_query.message.edit_message_reply_markup(reply_markup=get_back_button())  # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
        #await callback_query.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!")

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


        
renewal_tasks = {}

async def start_payment_status_update(callback_query: types.CallbackQuery, state: FSMContext, payment_id: str, payment_method: str):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø—ã—Ç–∞—è—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑
    –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (–Æ–∫–∞—Å—Å–∞, –†–æ–±–æ–∫–∞—Å—Å–∞ –∏ —Ç.–¥.) –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π
    –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    task_id = f"{callback_query.from_user.id}_{payment_id}"
    try:
        attempts = 0
        renewal_tasks[task_id] = asyncio.current_task()

        await asyncio.sleep(FIRST_CHECK_DELAY)

        while attempts < MAX_ATTEMPTS:
            payment_check = await check_payment_status_common(payment_id, payment_method)
            if payment_check:
                await finalize_subscription(callback_query, state)
                return

            attempts += 1
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts}: –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –∂–¥–µ–º {SUBSEQUENT_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(SUBSEQUENT_CHECK_INTERVAL)

        await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
    except asyncio.CancelledError:
        logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    finally:
        renewal_tasks.pop(task_id, None)

@router.callback_query(lambda c: c.data.startswith("find_payment:"), UpdClient.WaitingForPayment)
async def check_payment_status(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–ª–∞—Ç–µ–∂–∞.
    """
    try:
        payment_data = callback_query.data.split(':')
        if len(payment_data) < 3:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        payment_id = payment_data[1]
        payment_method = payment_data[2]

        payment_check = await check_payment_status_common(payment_id, payment_method)
        if not payment_check:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await finalize_subscription(callback_query, state)

        task_id = f"{callback_query.from_user.id}_{payment_id}"
        if task_id in renewal_tasks:
            task = renewal_tasks.pop(task_id)
            task.cancel()
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def create_update_data(client_id, email, new_expiry_time, client, INBOUND_ID, UPDATE_CLIENT):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    return {
        "id": INBOUND_ID,
        "settings": json.dumps({
            "clients": [{
                "id": f"{client_id}",
                "email": email,
                "expiryTime": new_expiry_time,
                "enable": client.get('enable', True),
                "tgId": client.get('tgId', ''),
                "limitIp": client.get('limitIp', 3),
                "subId": client.get('subId', ''),
                "flow": 'xtls-rprx-vision',
                "reset": 0
            }]
        }, indent=4)
    }

async def update_client_subscription(telegram_id, email, days):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –¥–Ω–∏.
    """
    server_ids = await get_server_id(SERVEDATABASE)
    full_response = []
    for server_id in server_ids:
        server_data = await get_server_data(server_id)
        if not server_data:
            continue
        LOGIN_URL = server_data.get('login_url')
        CONFIG_CLIENT_URL = server_data.get('config_client_url')
        INBOUND_IDS = server_data.get('inbound_ids')
        UPDATE_CLIENT = server_data.get('update_url')
        if not LOGIN_URL:
            continue
        email = email
        session = requests.Session()
        login_response = session.post(LOGIN_URL, json={'username': server_data['username'], 'password': server_data['password']})
        if login_response.status_code != 200:
            continue
        for INBOUND_ID in INBOUND_IDS:
            try:
                inbound_url = f"{CONFIG_CLIENT_URL}/{INBOUND_ID}"
                inbound_response = session.get(inbound_url, headers={'Accept': 'application/json'})
                if inbound_response.status_code != 200:
                    continue
                inbound_data = inbound_response.json().get('obj')
                if inbound_data is None:
                    continue

                settings = json.loads(inbound_data['settings'])
                client = next((client for client in settings['clients'] if client['email'] == email), None)
                if not client:
                    continue
                client_id = client['id']
                client_expiry_time = client.get('expiryTime', 0)
                current_time_ms = int(time.time() * 1000)
                
                if client_expiry_time < current_time_ms:
                    # –ï—Å–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                    new_expiry_time = current_time_ms + (days * 24 * 60 * 60 * 1000)  # –¥–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                else:
                    # –ï—Å–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∏—Å—Ç–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    new_expiry_time = int(client_expiry_time) + (days * 24 * 60 * 60 * 1000)  # –¥–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                
                logger.info(f"–ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç —Å email {email} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {client_expiry_time}.")
                logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å email {email} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}, –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_expiry_time}.")
                
                update_data = await create_update_data(client_id, email, new_expiry_time, client, INBOUND_ID, UPDATE_CLIENT)
                headers = {'Accept': 'application/json'}
                response = session.post(f"{UPDATE_CLIENT}/{client_id}", json=update_data, headers=headers)
                logger.info(f"–î–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –≤ POST-–∑–∞–ø—Ä–æ—Å–µ: {json.dumps(update_data, indent=2)}")
                
                if response.status_code == 200:
                    full_response.append(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å email {email} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}.")
                    await send_telegram_message(telegram_id, "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
		    
		    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
                    user = await bot.get_chat(telegram_id)
                    full_name = user.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}"
                    user_link = f"<a href='tg://user?id={telegram_id}'>{full_name}</a>"
                    expiry_time_description = time.strftime('%d.%m.%Y %H:%M', time.localtime(new_expiry_time / 1000))  # —á–∏—Ç–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                    userdata = f"ID: {telegram_id}"
                    email_raw = email

                    await bot.send_message(
                        chat_id=GROUP_CHAT_ID,
                        text=(
                            f"üì© <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> {user_link} –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –¥–æ <b>{expiry_time_description}</b>\n"
                            f"üë§ {userdata}\n"
                            f"üìß Email: <code>{email_raw}</code>"
                        ),
                        parse_mode=ParseMode.HTML
                    )
                else:
                    full_response.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å email {email} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id}. –û—Ç–≤–µ—Ç: {response.text}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")
                continue
    if full_response:
        return "\n".join(full_response)
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω, –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä."

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_telegram_message(telegram_id, message):
    try:
        await bot.send_message(chat_id=telegram_id, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

@router.callback_query(lambda c: c.data == "upd_cancel")
async def handle_cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    """
    try:
        data = await state.get_data()
        sent_message_id = data.get('sent_message_id')
        payment_id = data.get('payment_id')
        payment_method = data.get('payment_method')

        if not payment_id:
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        is_payment_completed = await check_payment_status_common(payment_id, payment_method)
        if is_payment_completed:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")
            return

        task_id = f"{callback_query.from_user.id}_{payment_id}"
        if task_id in renewal_tasks:
            task = renewal_tasks.pop(task_id)
            task.cancel()
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
            await callback_query.answer("‚ùå –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await callback_query.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")

        if sent_message_id:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=sent_message_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu(callback_query)
            )
        else:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∫—É–ø–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=get_main_menu(callback_query)
            )

        await state.clear()
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu(callback_query)
        )


from aiogram import Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
dp = Dispatcher()
REFERRAL_CHAT_ID = -1003045150256
@router.message(Command("test_chats"))
async def test_chats(message: Message):
    try:
        await bot.send_message(GROUP_CHAT_ID, "‚úÖ –¢–µ—Å—Ç: –±–æ—Ç –≤–∏–¥–∏—Ç GROUP_CHAT_ID")
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ GROUP_CHAT_ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ GROUP_CHAT_ID: {e}")

    try:
        await bot.send_message(REFERRAL_CHAT_ID, "‚úÖ –¢–µ—Å—Ç: –±–æ—Ç –≤–∏–¥–∏—Ç REFERRAL_CHAT_ID")
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ REFERRAL_CHAT_ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ REFERRAL_CHAT_ID: {e}")

from aiogram import Router, types
from aiogram.filters import Command
import aiosqlite

router = Router()

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
TARGET_USER_ID = 1311997119
DB_PATH = "database.db"  # ‚Üê –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É .db —Ñ–∞–π–ª—É

@router.message(Command("ref_freez"))
async def cmd_ref_freez(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–Ω–µ –≤ –≥—Ä—É–ø–ø–µ)
    if message.chat.type != "private":
        await message.answer("‚ùó –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
        return

    

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(DB_PATH) as db:
            # –ó–∞–ø—Ä–æ—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            async with db.execute(
                "SELECT COUNT(*) FROM users WHERE referred_by = ?", (TARGET_USER_ID,)
            ) as cursor:
                count_row = await cursor.fetchone()
                count_referrals = count_row[0] if count_row else 0

            # –ó–∞–ø—Ä–æ—Å: —Å—É–º–º–∞ sum_my
            async with db.execute(
                "SELECT COALESCE(SUM(sum_my), 0) FROM users WHERE referred_by = ?", (TARGET_USER_ID,)
            ) as cursor:
                sum_row = await cursor.fetchone()
                total_sum = sum_row[0] if sum_row else 0.0

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            f"üîê <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ID {TARGET_USER_ID}:</b>\n\n"
            f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{count_referrals}</b>\n"
            f"üí∞ –°—É–º–º–∞ (sum_my): <b>{total_sum:.2f}</b>",
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:\n{e}")