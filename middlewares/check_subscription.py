import os
from datetime import datetime
import uuid
from typing import Callable, Awaitable, Dict, Any

from aiogram import BaseMiddleware, Router
from aiogram.types import Message, CallbackQuery, Update, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from buttons.client import BUTTON_TEXTS
from client.menu import main_menu


load_dotenv()

router = Router()

CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        super().__init__()

    async def is_subscribed(self, user_id: int, bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
        try:
            chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
            return chat_member.status in ["member", "administrator", "creator"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery | Update,
        data: Dict[str, Any],
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞."""
        bot = data["bot"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
        if isinstance(event, (Message, CallbackQuery)) and event.from_user:
            user_id = event.from_user.id
        else:
            return await handler(event, data)

        # ‚úÖ –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω)
        from client.dp_menu import handle_user_registration
        from db.db import get_user_referral_code

        telegram_id = event.from_user.id
        username = event.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        telegram_link = f"https://t.me/{event.from_user.username}" if event.from_user.username else None
        referral_code = await get_user_referral_code(telegram_id) or str(uuid.uuid4())[:8]
        entry_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        referred_by = None

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        if isinstance(event, Message) and event.text and len(event.text.split()) > 1:
            referred_by = event.text.split()[1]

        await handle_user_registration(telegram_id, username, telegram_link, referral_code, referred_by, entry_date)

        # ‚úÖ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if await self.is_subscribed(user_id, bot):
            return await handler(event, data)

        # ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –Ω–æ –æ–Ω —É–∂–µ –≤ –ë–î
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=BUTTON_TEXTS["sub"], url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton(text=BUTTON_TEXTS["check_sub"], callback_data="check_subscription")]
            ]
        )

        text = "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!\n"
        if isinstance(event, CallbackQuery):
            await bot.send_message(event.from_user.id, text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)
        elif isinstance(event, Message):
            await bot.send_message(event.chat.id, text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)

        return  # üö´ –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω


@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback_query: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."""
    bot = callback_query.bot
    user_id = callback_query.from_user.id

    if await SubscriptionMiddleware().is_subscribed(user_id, bot):
        await callback_query.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
        await main_menu(callback_query.message)
    else:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.")
