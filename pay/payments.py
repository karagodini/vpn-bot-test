import os
import json
import uuid
import random
import asyncio
import hashlib
import requests
import aiohttp
import yookassa
import urllib.parse
import xml.etree.ElementTree as ET
from decimal import Decimal, ROUND_UP

from aiogram.types import LabeledPrice
from aiocryptopay import AioCryptoPay, Networks
from yookassa import Payment

from pay.prices import get_expiry_time_description
from log import logger
from dotenv import load_dotenv
from bot import bot

load_dotenv()

ACCOUNT_ID = os.getenv("ACCOUNT_ID")
SECRET_KEY = os.getenv("SECRET_KEY")
PASS1 = os.getenv("PASS1")
RUB_TO_USDT_DEF = int(os.getenv("RUB_TO_USDT_DEF"))
MERCH_LOGIN = os.getenv("MERCH_LOGIN")
CRYPROBOT = os.getenv("CRYPROBOT")
BOT_LINK = os.getenv("BOT_LINK")
PAYMENTS_TOKEN = os.getenv("PAYMENTS_TOKEN")
PUBLIC_ID = os.getenv("PUBLIC_ID")
SECRET_CP = os.getenv("SECRET_CP")
YOMOONEY = os.getenv("YOMOONEY")

yookassa.Configuration.account_id = ACCOUNT_ID
yookassa.Configuration.secret_key = SECRET_KEY

from yoomoney import Client
from yoomoney import Quickpay

def create_yoomoney_invoice(amount: float, receiver: str, label: str, targets: str = "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏"):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –≤ YooMoney.
    """
    logger.info(
        f"üí≥ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –≤ YooMoney:\n"
        f"   ‚Üí –°—É–º–º–∞: {amount} RUB\n"
        f"   ‚Üí –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {receiver}\n"
        f"   ‚Üí –ú–µ—Ç–∫–∞ (label): {label}\n"
        f"   ‚Üí –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {targets}"
    )

    try:
        quickpay = Quickpay(
            receiver=receiver,
            quickpay_form="shop",
            targets=targets,
            paymentType="SB",  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            sum=amount,
            label=label
        )

        logger.info(
            f"‚úÖ –°—á—ë—Ç –≤ YooMoney —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:\n"
            f"   ‚Üí –°—Å—ã–ª–∫–∞: {quickpay.base_url}\n"
            f"   ‚Üí –ú–µ—Ç–∫–∞: {quickpay.label}"
        )
        return quickpay.base_url, quickpay.label

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞ YooMoney:\n"
            f"   ‚Üí –ú–µ—Ç–∫–∞: {label}\n"
            f"   ‚Üí –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}",
            exc_info=True
        )
        return None, None


async def check_yoomoney_payment_status(payment_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –º–µ—Ç–∫–µ (label) –≤ YooMoney.
    """
    logger.info(f"üîç –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooMoney: label={payment_id}")

    try:
        client = Client(YOMOONEY)
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–µ–Ω—Ç YooMoney –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")

        history = client.operation_history(label=payment_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–µ—Ç–∫–∏: {payment_id}. –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(history.operations)}")

        for operation in history.operations:
            logger.info(
                f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è:\n"
                f"   ‚Üí ID: {operation.operation_id}\n"
                f"   ‚Üí –°—Ç–∞—Ç—É—Å: {operation.status}\n"
                f"   ‚Üí –°—É–º–º–∞: {operation.amount}\n"
                f"   ‚Üí –î–∞—Ç–∞: {operation.datetime}\n"
                f"   ‚Üí –ú–µ—Ç–∫–∞: {operation.label}"
            )

            if operation.label == payment_id and operation.status == "success":
                logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ –º–µ—Ç–∫–µ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (—Å—Ç–∞—Ç—É—Å: success)")
                return True

        logger.info(f"‚è≥ –ü–ª–∞—Ç—ë–∂ —Å –º–µ—Ç–∫–æ–π {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return False

    except Exception as e:
        logger.error(
            f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ YooMoney (label={payment_id}):\n"
            f"   ‚Üí –û—à–∏–±–∫–∞: {e}",
            exc_info=True
        )
        return False


async def create_payment_tgpay(amount, chat_id, name, expiry_time, payment_type, pay_currency):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Pay –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∑–≤–µ–∑–¥ (XTR).
    """
    expiry_time_text = f"{expiry_time} –¥–Ω–µ–π"
    
    if pay_currency == "tgpay":
        currency = "rub"
        provider_token = PAYMENTS_TOKEN
        f_amount = int(amount * 100)
    elif pay_currency == "xtr":
        currency = "XTR"
        provider_token = None
        f_amount = int(amount / 2.3)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'tgpay', 'xtr'")
    
    invoice_payload = json.dumps({
        "name": name,
        "expiry_time": expiry_time,
        "payment_type": payment_type
    })
    
    await bot.send_invoice(
        chat_id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {name} –Ω–∞ {expiry_time_text}",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {expiry_time_text}",
        provider_token=provider_token,
        photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
        photo_width=416,
        photo_height=234,
        photo_size=416,
        is_flexible=False,
        currency=currency,
        prices=[LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {expiry_time_text}", amount=f_amount)],
        start_parameter=f"vpn_subscription_{chat_id}_{expiry_time}",
        payload=invoice_payload,
    )


def create_payment_yookassa(amount, chat_id, name, expiry_time, email):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ YooKassa.
    """
    logger.info(
        f"üí≥ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa:\n"
        f"   ‚Üí –°—É–º–º–∞: {amount} RUB\n"
        f"   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id): {chat_id}\n"
        f"   ‚Üí –õ–æ–≥–∏–Ω: {name}\n"
        f"   ‚Üí –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {expiry_time} –¥–Ω–µ–π\n"
        f"   ‚Üí Email: {email}"
    )

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–ª–∞—Ç–µ–∂–∞
        id_key = str(uuid.uuid4())
        logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞: {id_key}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expiry_time_text = get_expiry_time_description(expiry_time)
        description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –ª–æ–≥–∏–Ω: {name} –Ω–∞ {expiry_time_text}"
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {description}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            "amount": {
                "value": str(float(amount)),
                "currency": "RUB"
            },
            "receipt": {
                "customer": {
                    "email": email
                },
                "items": [
                    {
                        "description": description,
                        "quantity": 1.000,
                        "amount": {
                            "value": str(float(amount)),
                            "currency": "RUB"
                        },
                        "vat_code": 1,
                        "payment_mode": "full_prepayment",
                        "payment_subject": "commodity"
                    }
                ]
            },
            "confirmation": {
                "type": "redirect",
                "return_url": BOT_LINK
            },
            "capture": True,
            "metadata": {
                "chat_id": chat_id,
                "name": name,
                "expiry_time": expiry_time
            },
            "description": description
        }

        logger.debug("–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ YooKassa...")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        payment = Payment.create(payment_data, id_key)

        confirmation_url = payment.confirmation.confirmation_url
        payment_id = payment.id

        logger.info(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ YooKassa:\n"
            f"   ‚Üí ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
            f"   ‚Üí –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {confirmation_url}\n"
            f"   ‚Üí –ú–µ—Ç–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: redirect"
        )

        return confirmation_url, payment_id

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa:\n"
            f"   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}\n"
            f"   ‚Üí –°—É–º–º–∞: {amount}\n"
            f"   ‚Üí –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}",
            exc_info=True  # –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞
        )
        return None, None

async def check_payment_yookassa(payment_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa.
    """
    logger.info(f"üîç –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa: payment_id={payment_id}")

    try:
        loop = asyncio.get_event_loop()
        logger.debug(f"–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ YooKassa (Payment.find_one) –¥–ª—è payment_id={payment_id}")
        
        payment = await loop.run_in_executor(None, yookassa.Payment.find_one, payment_id)

        if not payment:
            logger.warning(f"‚ùå –ü–ª–∞—Ç—ë–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ YooKassa.")
            return False

        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status}")

        if payment.status == 'succeeded':
            metadata = dict(payment.metadata)
            logger.info(
                f"‚úÖ –ü–ª–∞—Ç—ë–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                f"   ‚Üí –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}"
            )
            return metadata
        elif payment.status == 'pending':
            logger.info(f"‚è≥ –ü–ª–∞—Ç—ë–∂ {payment_id} –µ—â—ë –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending'.")
            return False
        elif payment.status in ('canceled', 'expired'):
            logger.warning(f"üö´ –ü–ª–∞—Ç—ë–∂ {payment_id} –æ—Ç–º–µ–Ω—ë–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: {payment.status})")
            return False
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status}")
            return False

    except Exception as e:
        logger.error(
            f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –≤ YooKassa:\n"
            f"   ‚Üí –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}",
            exc_info=True
        )
        return False

def create_paymentupdate(amount, chat_id, email):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ YooKassa.
    """
    logger.info(
        f"üí≥ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        f"   ‚Üí –°—É–º–º–∞: {amount} RUB\n"
        f"   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id): {chat_id}\n"
        f"   ‚Üí Email: {email}"
    )

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–ª–∞—Ç–µ–∂–∞
        id_key = str(uuid.uuid4())
        description = "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"
        logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω payment_id: {id_key}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            "amount": {
                "value": str(float(amount)),
                "currency": "RUB"
            },
            "receipt": {
                "customer": {
                    "email": email
                },
                "items": [
                    {
                        "description": description,
                        "quantity": 1.000,
                        "amount": {
                            "value": str(float(amount)),
                            "currency": "RUB"
                        },
                        "vat_code": 1,
                        "payment_mode": "full_prepayment",
                        "payment_subject": "commodity"
                    }
                ]
            },
            "confirmation": {
                "type": "redirect",
                "return_url": BOT_LINK
            },
            "capture": True,
            "metadata": {
                "chat_id": chat_id,
                "name": description,
            },
            "description": description
        }

        logger.debug("–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ YooKassa...")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        payment = Payment.create(payment_data, id_key)

        confirmation_url = payment.confirmation.confirmation_url
        payment_id = payment.id

        logger.info(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:\n"
            f"   ‚Üí ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
            f"   ‚Üí –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {confirmation_url}\n"
            f"   ‚Üí –ú–µ—Ç–æ–¥: redirect ‚Üí {BOT_LINK}"
        )

        return confirmation_url, payment_id

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YooKassa:\n"
            f"   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}\n"
            f"   ‚Üí –°—É–º–º–∞: {amount}\n"
            f"   ‚Üí –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}",
            exc_info=True
        )
        return None, None

#–†–æ–±–æ–∫–∞—Å—Å–∞
def calculate_signature(merchant_login, amount, invoice_id, password1, receipt_json, shp_params=None):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –†–æ–±–æ–∫–∞—Å—Å–µ —Å —É—á–µ—Ç–æ–º Receipt.
    """
    signature_data = f"{merchant_login}:{amount}:{invoice_id}:{receipt_json}:{password1}"
    
    if shp_params:
        for key, value in sorted(shp_params.items()):
            signature_data += f":{key}={value}"
    
    return hashlib.md5(signature_data.encode('utf-8')).hexdigest().upper()

def calculate_signature_check(merchant_login: str, invoice_id: int, password2: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏"""
    signature_string = f"{merchant_login}:{invoice_id}:{password2}"
    return hashlib.md5(signature_string.encode()).hexdigest()

def create_payment_robokassa(amount, chat_id, name, expiry_time, email):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É —Å —É—á–µ—Ç–æ–º JSON Receipt.
    """
    merchant_login = MERCH_LOGIN
    password1 = PASS1
    invoice_id = random.randint(1, 2147483647)
    expiry_time_text = get_expiry_time_description(expiry_time)
    description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –ª–æ–≥–∏–Ω: {name} –Ω–∞ {expiry_time_text}"
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    shp_params = {
        'shp_chat_id': chat_id,
        'shp_name': name,
        'shp_expiry_time': expiry_time
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è Receipt
    receipt = {
        "items": [
            {
                "name": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –ª–æ–≥–∏–Ω: {name} –Ω–∞ {expiry_time} –¥–Ω–µ–π",
                "quantity": 1,
                "sum": amount,
                "payment_method": "full_payment",
                "tax": "none"
            }
        ]
    }
    
    receipt_json = json.dumps(receipt, separators=(',', ':'), ensure_ascii=True)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –≤ ASCII
    encoded_receipt = urllib.parse.quote(receipt_json)  # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è URL
    

    signature = calculate_signature(merchant_login, amount, invoice_id, password1, receipt_json, shp_params)
    
    payment_url = (
        f"https://auth.robokassa.ru/Merchant/Index.aspx?"
        f"MerchantLogin={merchant_login}&"
        f"OutSum={amount}&"
        f"InvId={invoice_id}&"
        f"Description={urllib.parse.quote(description)}&"
        f"Receipt={encoded_receipt}&"
        f"SignatureValue={signature}&"
        f"shp_chat_id={shp_params['shp_chat_id']}&"
        f"shp_name={urllib.parse.quote(shp_params['shp_name'])}&"
        f"shp_expiry_time={shp_params['shp_expiry_time']}&"
        f"Email={email}&"
        f"Culture=ru&"
        f"Encoding=utf-8"
    )
    
    return payment_url, invoice_id


async def check_payment_robokassa(invoice_id: int, password2: str) -> str | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –†–æ–±–æ–∫–∞—Å—Å–µ.
    """
    merchant_login = MERCH_LOGIN
    signature = calculate_signature_check(merchant_login, invoice_id, password2)

    url = "https://auth.robokassa.ru/Merchant/WebService/Service.asmx/OpStateExt"
    params = {
        "MerchantLogin": merchant_login,
        "InvoiceID": invoice_id,
        "Signature": signature,
    }
    full_url = url + "?" + urllib.parse.urlencode(params)

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(full_url) as response:
                response.raise_for_status()
                response_text = await response.text()
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Robokassa: {response_text}")

                # –†–∞–∑–±–∏—Ä–∞–µ–º XML-–æ—Ç–≤–µ—Ç
                root = ET.fromstring(response_text)
                namespace = {"ns": "http://merchant.roboxchange.com/WebService/"}

                result_code_element = root.find("ns:Result/ns:Code", namespaces=namespace)
                if result_code_element is None:
                    logger.error("–≠–ª–µ–º–µ–Ω—Ç <Result><Code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return None

                result_code = result_code_element.text

                state_code_element = root.find("ns:State/ns:Code", namespaces=namespace)
                if state_code_element is None:
                    logger.error("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞!")
                    return None

                state_code = state_code_element.text
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: result_code={result_code}, state_code={state_code}")

                if result_code == "0" and state_code == "100":
                    return "100"
                elif result_code == "3":
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é. –ü–ª–∞—Ç–µ–∂ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return "3"
                else:
                    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: result_code={result_code}, state_code={state_code}")
                    return None

    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    except ET.ParseError:
        logger.error("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ XML.")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None
    
async def create_payment_cryptobot(amount, chat_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ CryptoBot.
    """
    async with AioCryptoPay(token=CRYPROBOT, network=Networks.MAIN_NET) as crypto:
        try:
            exchange_rates = await crypto.get_exchange_rates()
            RUB_TO_USDT = next(
                (rate.rate for rate in exchange_rates if rate.source == "USDT" and rate.target == "RUB"), 
                RUB_TO_USDT_DEF
            )
            logger.info(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT –∫ —Ä—É–±–ª—é: {RUB_TO_USDT}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞, –∫—É—Ä—Å: {RUB_TO_USDT_DEF}. –û—à–∏–±–∫–∞: {e}")
        try:
            usdt_amount = Decimal(amount) / Decimal(RUB_TO_USDT)
            usdt_amount = usdt_amount.quantize(Decimal("0.01"), rounding=ROUND_UP)

            invoice = await crypto.create_invoice(
                asset="USDT",
                amount=str(usdt_amount),
                description="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
                fiat=None,
                payload=f"{chat_id}:{int(amount)}",
            )
            payment_url = invoice.bot_invoice_url
            payment_id = invoice.invoice_id
            return payment_url, payment_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
            return None, None


async def check_payment_cryptobot(invoice_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ CryptoBot.
    """
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å—á–µ—Ç–∞ —Å ID: {invoice_id}")
    async with AioCryptoPay(token=CRYPROBOT, network=Networks.MAIN_NET) as crypto:
        try:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å—á–µ—Ç—É —Å ID: {invoice_id}")
            invoices_info = await crypto.get_invoices(invoice_ids=[invoice_id])
            logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç API: {invoices_info}")
            invoice_info = invoices_info[0] if invoices_info else None

            if invoice_info:
                logger.info(f"–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ —Å ID {invoice_id}: {invoice_info.status}")
                if invoice_info.status == 'paid':
                    logger.info(f"–ü–ª–∞—Ç–µ–∂ –ø–æ —Å—á–µ—Ç—É {invoice_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    return True 
                else:
                    logger.warning(f"–ü–ª–∞—Ç–µ–∂ –ø–æ —Å—á–µ—Ç—É {invoice_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: {invoice_info.status}")
                    return False
            else:
                logger.error(f"–°—á–µ—Ç —Å ID {invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞ —Å ID {invoice_id}: {e}")
            return False


async def create_cloudpayments_invoice(amount, account_id, invoice_id):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CloudPayments.
    """
    payload = {
        "Amount": amount,
        "Currency": "RUB",
        "Description": "–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É",
        "RequireConfirmation": False,
        "SendEmail": True,
        "InvoiceId": invoice_id,
        "AccountId": str(account_id),
        "SuccessRedirectUrl": "https://cp.ru",
        "FailRedirectUrl": "https://cp.ru"
    }

    try:
        response = requests.post(
            "https://api.cloudpayments.ru/orders/create",
            json=payload,
            auth=(PUBLIC_ID, SECRET_CP)
        )
        response_data = response.json()

        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ CloudPayments:")
        logger.info(response_data)

        if not response_data.get("Success"):
            raise ValueError(f"–û—à–∏–±–∫–∞ CloudPayments API: {response_data.get('Message')}")

        return response_data["Model"]["Url"], invoice_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        raise


async def check_payment_cloud(invoice_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ CloudPayments.
    
    """
    if not invoice_id:
        logger.error("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return None

    try:
        payload = {"InvoiceId": invoice_id}
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ CloudPayments:")
        logger.info(json.dumps(payload, indent=4, ensure_ascii=False))

        response = requests.post(
            "https://api.cloudpayments.ru/payments/find",
            json=payload,
            auth=(PUBLIC_ID, SECRET_CP)
        )
        
        response_data = response.json()

        logger.info("–û—Ç–≤–µ—Ç –æ—Ç CloudPayments:")
        logger.info(json.dumps(response_data, indent=4, ensure_ascii=False))

        if response_data.get("Success"):
            payment_status = response_data["Model"]["Status"]
            amount = float(response_data["Model"]["Amount"])

            if payment_status == "Completed":
                return {
                    "status": payment_status,
                    "amount": amount,
                    "data": response_data["Model"]
                }
            else:
                logger.warning(f"–ü–ª–∞—Ç–µ–∂ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {payment_status}.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ CloudPayments: {response_data.get('Message')}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    return None
