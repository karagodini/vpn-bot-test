"""
üìå –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è

–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –≤—ã –∑–∞–¥–∞–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫, –≤–∫–ª—é—á–∞—è:  
- –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤.  
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ –¥–Ω—è—Ö).  
- –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏.  
- –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º).  
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).  

üìå –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã:
- `BASE_PRICES` ‚Äì –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫.  
- `total_gb_values` ‚Äì –ª–∏–º–∏—Ç—ã –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).  

"""

from aiogram import types
import sqlite3
from aiogram.utils.keyboard import InlineKeyboardBuilder
from log import logger
from buttons.client import BUTTON_TEXTS
from dotenv import load_dotenv
from aiogram.types import CallbackQuery
import os

load_dotenv()
USERSDATABASE = os.getenv("USERSDATABASE")
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–æ–¥–ø–∏—Å–∫–µ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É, –ø—Ä–æ–±–Ω—ã–π, 1 –º–µ—Å—è—Ü, 3, 6, 12
TRIAL = 3
ONE_M = 30
THREE_M = 93
ONE_YEAR = 365

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, 0 = –±–µ–∑–ª–∏–º–∏—Ç.
total_gb_values = {
    TRIAL: 0,    # –Ω–∞ 3 –¥–Ω—è
    ONE_M: 0,    # 1 –º–µ—Å—è—Ü
    THREE_M: 0,  # 3 –º–µ—Å—è—Ü–∞
    ONE_YEAR: 0, # –ù–∞ –≥–æ–¥
}
# –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, –≤ —Ä—É–±–ª—è—Ö
BASE_PRICES = {
    TRIAL: 0,   
    ONE_M: 80,    # 1 –º–µ—Å—è—Ü - 81 —Ä—É–±–ª–µ–π
    THREE_M: 200,  # 3 –º–µ—Å—è—Ü–∞ - 200 —Ä—É–±–ª–µ–π
    ONE_YEAR: 750 # 1 –≥–æ–¥ - 800 —Ä—É–±–ª–µ–π
}
# –¢–æ –∫–∞–∫ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥ –≤ —Å–≤–æ–¥–Ω–æ–π –∏–Ω–≤–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.
def get_expiry_time_description(expiry_time):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    descriptions = {
        ONE_M: "30 –¥–Ω–µ–π",
        THREE_M: "90 –¥–Ω–µ–π",
        ONE_YEAR: "365 –¥–Ω–µ–π"
    }
    return descriptions.get(expiry_time, "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

# –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–∫–∏–¥–∫—É –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∏–º–µ–µ—Ç—Å—è.
def get_price_with_referral_info(expiry_time_ms, telegram_id, promo_code=None):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø—Ä–æ–º–æ–∫–æ–¥.
    """
    referral_count = get_referral_count(telegram_id)

    if referral_count >= 10: #–ï—Å–ª–∏ 10 –∏ –±–æ–ª–µ–µ
        referral_discount = 0.4  # 40%
    elif referral_count >= 5:#–ï—Å–ª–∏ 5 –∏ –±–æ–ª–µ–µ
        referral_discount = 0.15  # 15%
    elif referral_count >= 1: #–ï—Å–ª–∏ 1 –∏ –±–æ–ª–µ–µ
        referral_discount = 0.05  # 5%
    else:
        referral_discount = 0.0  # –ë–µ–∑ —Å–∫–∏–¥–∫–∏
    promo_discount = 0

    if promo_code:
        conn_users = sqlite3.connect(USERSDATABASE)
        cursor_users = conn_users.cursor()
        cursor_users.execute(""" 
            SELECT promo_code_usage 
            FROM users
            WHERE telegram_id = ?
        """, (telegram_id,))
        promo_usage_data = cursor_users.fetchone()

        if promo_usage_data and promo_usage_data[0] == 1:
            cursor_users.close()
            conn_users.close()
            return str(int(BASE_PRICES.get(expiry_time_ms, 0) * (1 - referral_discount))), f"{int(referral_discount * 100)}", referral_count
        cursor_users.execute("""
            SELECT COUNT(*) 
            FROM used_promo_codes 
            WHERE user_id = ? AND promo_code = ?
        """, (telegram_id, promo_code))
        used_count = cursor_users.fetchone()[0]

        if used_count > 0:
            cursor_users.close()
            conn_users.close()
            return str(int(BASE_PRICES.get(expiry_time_ms, 0) * (1 - referral_discount))), f"{int(referral_discount * 100)}", referral_count
        cursor_users.execute("""
            SELECT discount
            FROM promo_codes
            WHERE code = ? AND is_active = 1
        """, (promo_code,))
        promo_data = cursor_users.fetchone()

        if promo_data:
            promo_discount = promo_data[0] / 100

        cursor_users.close()
        conn_users.close()
    total_discount = referral_discount + promo_discount
    if total_discount > 0.8:# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫–∏—Å–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏, –Ω–µ –±–æ–ª—å—à–µ 80%
        total_discount = 0.8
    base_price = BASE_PRICES.get(expiry_time_ms, 1)
    
    if base_price == 0:
        return 0, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", referral_count
    
    final_price = int(base_price * (1 - total_discount))
    discount_percentage = int(total_discount * 100)
    if discount_percentage == 0:
        discount_percentage = "0"
    return str(final_price), f"{discount_percentage}", referral_count

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
def get_expiry_time_keyboard(callback_query: types.CallbackQuery):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    telegram_id = callback_query.from_user.id 
    logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω telegram_id {telegram_id} –∏–∑ callback_query")
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["one_m"], callback_data=str(ONE_M))
    )
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["three_m"], callback_data=str(THREE_M))
    )
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["twelve_m"], callback_data=str(ONE_YEAR))
    )
    keyboard.add(types.InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="main_menu"))
    return keyboard.adjust(1).as_markup()


def get_test_menu():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["one_m"], callback_data="one_m_menu"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["three_m"], callback_data="main_menu"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["twelve_m"], callback_data="main_menu"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return builder.adjust(1).as_markup()

def get_subscription_one():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="one_m_device")
    )
    return builder.adjust(1).as_markup()
    
def get_subscription_one_device():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["ios"], callback_data="one_m_ios"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["android"], callback_data="one_m_android")
    )
    builder.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["macos"], callback_data="one_m_macos"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["windows"], callback_data="one_m_windows")
    )
    return builder.adjust(2).as_markup()

def get_subscription_one_ios():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å1", url="https://apps.apple.com/app/id6476628951"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="confirm_expiry_time"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

def get_subscription_one_android():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", url="https://play.google.com/store/apps/details?id=com.v2raytun.android&pli=1"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="confirm_expiry_time"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

def get_subscription_one_macos():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", url="https://apps.apple.com/app/id6476628951"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="confirm_expiry_time"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

def get_subscription_one_windows():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", url="https://github.com/KaringX/karing/releases/tag/v1.1.2.606"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="confirm_expiry_time"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

"""–º–µ–Ω—é –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
def get_trial_device():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["ios"], callback_data="trial_ios"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["android"], callback_data="trial_android")
    )
    builder.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["macos"], callback_data="trial_macos"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["windows"], callback_data="trial_windows")
    )
    return builder.adjust(2).as_markup()

def get_trial_ios():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å2", url="https://apps.apple.com/app/id6476628951"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="trial_1"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

def get_trial_android():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", url="https://play.google.com/store/apps/details?id=com.v2raytun.android&pli=1"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="trial_1"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

def get_trial_macos():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", url="https://apps.apple.com/app/id6476628951"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="trial_1"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

def get_trial_windows():
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", url="https://github.com/KaringX/karing/releases/tag/v1.1.2.606"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="trial_1"),
        types.InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
    )
    return keyboard.adjust(1).as_markup()

"""end –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""

def get_referral_count(telegram_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    conn = sqlite3.connect(USERSDATABASE)
    cursor = conn.cursor() 
    cursor.execute("SELECT referral_count FROM users WHERE telegram_id = ?", (telegram_id,))
    referral_count = cursor.fetchone()
    cursor.close()
    conn.close()
    if referral_count:
        return referral_count[0]
    else:
        return 0
    
    
#–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π    
def has_active_subscription(telegram_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.
    """
    conn = sqlite3.connect(USERSDATABASE)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT has_trial FROM users WHERE telegram_id = ?
    ''', (telegram_id,))

    result = cursor.fetchone()
    
    cursor.close()
    conn.close()

    return result is not None and result[0] == 1

def should_show_prodlit_button(telegram_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–ª–∏—Ç—å' –≤–º–µ—Å—Ç–æ '–ö—É–ø–∏—Ç—å VPN'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ has_trial –∏–ª–∏ sum_my –Ω–µ —Ä–∞–≤–Ω—ã 0.
    """
    conn = sqlite3.connect(USERSDATABASE)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT has_trial, sum_my FROM users WHERE telegram_id = ?
    ''', (telegram_id,))

    result = cursor.fetchone()
    cursor.close()
    conn.close()

    if result is None:
        return False

    has_trial, sum_my = result
    return has_trial != 0 or sum_my != 0