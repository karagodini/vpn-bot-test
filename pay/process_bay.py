import asyncio
import aiosqlite
import re, uuid
from datetime import datetime, timedelta
from uuid import uuid4
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.utils import markdown as md
from aiogram import Router, F
from aiogram.enums.parse_mode import ParseMode

from bot import bot
from log import logger
from client.add_client import (
    add_client, 
    generate_config_from_pay, 
    login, 
    send_config_from_state
)
from db.db import (
    handle_database_operations, 
    insert_or_update_user, 
    update_user_trial_status,
    update_sum_my,
    update_sum_ref,
    add_free_days
)
from handlers.config import get_server_data
from handlers.select_server import get_optimal_server
from handlers.states import AddClient
from pay.prices import *
from pay.payments import (
    check_payment_yookassa, 
    create_payment_yookassa, 
    create_payment_robokassa, 
    check_payment_robokassa, 
    create_payment_cryptobot, 
    check_payment_cryptobot, 
    create_payment_tgpay, 
    create_cloudpayments_invoice, 
    check_payment_cloud,
    create_yoomoney_invoice,
    check_yoomoney_payment_status
)

from pay.promocode import log_promo_code_usage
from pay.pay_metod import PAYMENT_METHODS
from client.menu import get_main_menu
from client.add_client import generate_login
from buttons.client import BUTTON_TEXTS
from dotenv import load_dotenv
import os
from db.db import ServerDatabase
load_dotenv()


SERVEDATABASE = os.getenv("SERVEDATABASE")
server_db = ServerDatabase(SERVEDATABASE)


PASS2 = os.getenv("PASS2")

YOOMONEY_CARD = int(os.getenv("YOOMONEY_CARD"))

EMAIL = os.getenv("EMAIL")
FIRST_CHECK_DELAY = int(os.getenv("FIRST_CHECK_DELAY", 15))
SUBSEQUENT_CHECK_INTERVAL = int(os.getenv("SUBSEQUENT_CHECK_INTERVAL", 30))
MAX_ATTEMPTS = int(os.getenv("MAX_ATTEMPTS", 15))
FREE_DAYS = os.getenv("FREE_DAYS")

router = Router()

purchase_tasks = {}

def is_valid_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.

    –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@domain.com). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É,
    –∏ `False` –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(email_regex, email) is not None

@router.message(AddClient.WaitingForPayment, AddClient.WaitingForExpiryTime)
async def handle_invalid_message(message: types.Message, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–µ–±—É–µ—Ç—Å—è 
    –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã).
    """
    await message.delete()

    current_state = await state.get_state()
    reminder_message = None

    if current_state == AddClient.WaitingForPayment.state:
        reminder_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")
    elif current_state == AddClient.WaitingForExpiryTime.state:
        reminder_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")

    await asyncio.sleep(5)

    if reminder_message:
        await reminder_message.delete()


@router.callback_query(lambda query: query.data == "trial_1")
async def process_trial_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
    """
    telegram_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if not has_active_subscription(telegram_id):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–±–Ω–æ–π –≤–µ—Ä—Å–∏–∏.")
        
        try:
            # –≠—Ç–∞–ø 1: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            current_time = datetime.utcnow()
            expiry_timestamp = current_time + timedelta(days=TRIAL)
            expiry_time = int(expiry_timestamp.timestamp() * 1000)
            logger.debug(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {expiry_timestamp} (timestamp: {expiry_time})")

            # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
            name = generate_login(telegram_id)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {name}")

            # –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            await state.update_data(expiry_time=expiry_time)
            logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ–±–Ω–æ–≤–ª–µ–Ω–æ: expiry_time={expiry_time}")

            # –≠—Ç–∞–ø 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
            await update_user_trial_status(telegram_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

            # –≠—Ç–∞–ø 5: –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
            server_selection = "random"
            selected_server = await get_optimal_server(server_selection, server_db)
            logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {selected_server}")
            
            if not selected_server:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback_query.answer()
                return

            # –≠—Ç–∞–ø 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
            server_data = await get_server_data(selected_server)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: {selected_server}")
            if not server_data:
                logger.error(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ {selected_server} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞.")
                await callback_query.answer()
                return

            country_name = server_data.get('name', "üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞")
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞: {country_name}")

            # –≠—Ç–∞–ø 7: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            logger.info(f"–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data['login_url']}")
            session_id = await login(server_data['login_url'], {
                "username": server_data['username'],
                "password": server_data['password']
            })
            if not session_id:
                logger.error(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data['login_url']}")
                await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                await callback_query.answer()
                return
            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {selected_server}")

            # –≠—Ç–∞–ø 8: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            inbound_ids = server_data['inbound_ids']
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä {selected_server} —Å inbound_ids: {inbound_ids}")
            await add_client(
                name, expiry_time, inbound_ids, telegram_id,
                server_data['add_client_url'], server_data['login_url'],
                {"username": server_data['username'], "password": server_data['password']}
            )
            logger.info(f"–ö–ª–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä {selected_server}")

            # –≠—Ç–∞–ø 9: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ FSM
            await state.update_data(
                email=name,
                client_id=telegram_id,
                login_data={"username": server_data['username'], "password": server_data['password']},
                selected_country_name=country_name,
                server_ip=server_data['server_ip'],
                config_client_url=server_data['config_client_url'],
                inbound_ids=inbound_ids,
                login_url=server_data['login_url'],
                sub_url=server_data['sub_url'],
                json_sub=server_data['json_sub']
            )
            logger.debug("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSM.")

            # –≠—Ç–∞–ø 10: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            userdata, config, config2, config3 = await generate_config_from_pay(telegram_id, name, state)
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {name}")

            # –≠—Ç–∞–ø 11: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            await send_config_from_state(callback_query.message, state, telegram_id=callback_query.from_user.id, edit=True)

            # –≠—Ç–∞–ø 12: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()
            logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ.")

            # –≠—Ç–∞–ø 13: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            user_id = await insert_or_update_user(telegram_id, name, selected_server)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å user_id={user_id}")

            logger.info(f"–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é.")
        await callback_query.message.edit_text(
            "‚ö† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=get_main_menu(callback_query)
        )

    await callback_query.answer()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@router.callback_query(lambda query: query.data == "trial_go")
async def trial_go(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
    """

    text = (
            "<b>–ì–æ—Ç–æ–≤ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å</b> @vpnmoy? üöÄ\n\n"
            "‚Äî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
            "‚Äî –†–∞–±–æ—Ç–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ <b>–†—É–Ω–µ—Ç–∞</b> –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è <b>VPN</b>\n"
            "‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ <b>5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b> –Ω–∞ –æ–¥–∏–Ω –∫–ª—é—á.\n\n"
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: <b>–æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –¥–æ —Å–º–∞—Ä—Ç-—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤.</b>"
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="trial_1"),
        InlineKeyboardButton(text=BUTTON_TEXTS["promocode"], callback_data="enter_promo_code")
    )

    await callback_query.message.edit_text(
        text=text,
        reply_markup=keyboard.adjust(1).as_markup(),
        parse_mode="HTML"
    )

    await callback_query.answer()

@router.callback_query(lambda c: c.data in [str(ONE_M), str(THREE_M), str(ONE_YEAR)])
async def ask_to_confirm_tariff(callback_query: types.CallbackQuery, state: FSMContext):
    expiry_time = int(callback_query.data)
    await state.update_data(pending_expiry_time=expiry_time)

    text = (
            "<b>–ì–æ—Ç–æ–≤ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å</b> @vpnmoy? üöÄ\n\n"
            "‚Äî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
            "‚Äî –†–∞–±–æ—Ç–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ <b>–†—É–Ω–µ—Ç–∞</b> –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è <b>VPN</b>\n"
            "‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ <b>5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b> –Ω–∞ –æ–¥–∏–Ω –∫–ª—é—á.\n\n"
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: <b>–æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –¥–æ —Å–º–∞—Ä—Ç-—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤.</b>"
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="confirm_expiry_time"),
        InlineKeyboardButton(text=BUTTON_TEXTS["promocode"], callback_data="enter_promo_code")
    )

    await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.adjust(1).as_markup())
    await callback_query.answer()

@router.callback_query(F.data == "confirm_expiry_time")
async def confirmed_expiry_time(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")

    # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    expiry_time = data.get("pending_expiry_time")

    if not expiry_time:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –Ω–æ expiry_time –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await callback_query.answer("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω pending_expiry_time: {expiry_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")

    telegram_id = callback_query.from_user.id
    name = generate_login(telegram_id)
    email = "default@mail.ru"
    user_promo_code = None

    # –≠—Ç–∞–ø 2: –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} (—Ä–µ–∂–∏–º 'random')")
    selected_server = await get_optimal_server("random", server_db)

    if isinstance(selected_server, str):
        if "–∑–∞–Ω—è—Ç" in selected_server.lower():
            logger.warning(f"–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–Ω—è—Ç—ã. –û—Ç–≤–µ—Ç –æ—Ç get_optimal_server: {selected_server}")
            await callback_query.answer("‚ùå –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
        else:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ—Ç get_optimal_server, –Ω–æ –Ω–µ '–∑–∞–Ω—è—Ç': {selected_server}")
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.", show_alert=True)
            return
    elif not selected_server:
        logger.error(f"get_optimal_server –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.", show_alert=True)
        return

    # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID —Å–µ—Ä–≤–µ—Ä–∞
    if not str(selected_server).isdigit():
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–µ—Ä–≤–µ—Ä–∞: {selected_server} (—Ç–∏–ø: {type(selected_server)})")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.", show_alert=True)
        return

    selected_server = int(selected_server)
    logger.info(f"–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä —Å ID: {selected_server} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

    # –≠—Ç–∞–ø 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ FSM
    await state.update_data({
        "expiry_time": expiry_time,
        "email": email,
        "name": name,
        "selected_server": selected_server,
        "user_promo_code": user_promo_code,
        "sent_message_id": callback_query.message.message_id,
    })
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ–±–Ω–æ–≤–ª–µ–Ω–æ: expiry_time={expiry_time}, name={name}, selected_server={selected_server}")

    # –≠—Ç–∞–ø 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ —Å ID {selected_server}")
    server_data = await get_server_data(selected_server)

    if not server_data:
        logger.error(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å ID {selected_server} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: {server_data['name']} ({server_data['server_ip']})")

    # –≠—Ç–∞–ø 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞ –≤ FSM
    await state.update_data({
        "selected_country_name": server_data.get("name"),
        "login_data": {"username": server_data['username'], "password": server_data['password']},
        "server_ip": server_data['server_ip'],
        "config_client_url": server_data['config_client_url'],
        "inbound_ids": server_data['inbound_ids'],
        "login_url": server_data['login_url'],
        "sub_url": server_data['sub_url'],
        "json_sub": server_data['json_sub'],
    })
    logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSM: {server_data['name']}")

    # –≠—Ç–∞–ø 7: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(AddClient.WaitingForPaymentMethod)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: WaitingForPaymentMethod")

    # –≠—Ç–∞–ø 8: –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    logger.info(f"–ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: YooKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    fake_callback = types.CallbackQuery(
        id=callback_query.id,
        from_user=callback_query.from_user,
        chat_instance=callback_query.chat_instance,
        message=callback_query.message,
        data="payment_method_yookassa"
    )

    try:
        await handle_payment_method_selection(fake_callback, state)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω handle_payment_method_selection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ handle_payment_method_selection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –≠—Ç–∞–ø 9: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback
    await callback_query.answer()
    logger.info(f"Callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}. –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.")



    
@router.callback_query(lambda query: query.data.isdigit(), AddClient.WaitingForExpiryTime)
async def process_paid_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ —Å–∫–∏–¥–∫–µ.

    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∂–µ–ª–∞—é—â–µ–≥–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –í–∫–ª—é—á–∞–µ—Ç —ç—Ç–∞–ø—ã 
    –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

    data = callback_query.data
    telegram_id = callback_query.from_user.id

    # –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ expiry_time
    try:
        expiry_time = int(data)
        logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (expiry_time): {expiry_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback.data: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    # –≠—Ç–∞–ø 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ expiry_time –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(expiry_time=expiry_time)
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ–±–Ω–æ–≤–ª–µ–Ω–æ: expiry_time={expiry_time}")

    # –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –∏–∑ FSM: {state_data}")

    sent_message_id = state_data.get('sent_message_id')
    server_selection = state_data.get('selected_country_id')
    country_name = state_data.get('selected_country_name')

    if not sent_message_id or not server_selection:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ FSM: sent_message_id={sent_message_id}, selected_country_id={server_selection}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return

    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: sent_message_id={sent_message_id}, selected_country_id={server_selection}, —Å—Ç—Ä–∞–Ω–∞={country_name}")

    # –≠—Ç–∞–ø 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    conn_users = sqlite3.connect(USERSDATABASE)
    cursor_users = conn_users.cursor()

    try:
        cursor_users.execute("""
            SELECT promo_code 
            FROM users 
            WHERE telegram_id = ? 
        """, (telegram_id,))
        result = cursor_users.fetchone()
        user_promo_code = result[0] if result and result[0] else None
        logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {user_promo_code}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        user_promo_code = None
    finally:
        cursor_users.close()
        conn_users.close()

    # –≠—Ç–∞–ø 5: –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏
    logger.info(f"–†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —Å expiry_time={expiry_time}, –ø—Ä–æ–º–æ–∫–æ–¥={user_promo_code}")
    price, total_discount, referral_count = get_price_with_referral_info(expiry_time, telegram_id, user_promo_code)
    expiry_time_description = get_expiry_time_description(expiry_time)

    logger.info(f"–¶–µ–Ω–∞: {price}, –°–∫–∏–¥–∫–∞: {total_discount}%, –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: {referral_count}")

    # –≠—Ç–∞–ø 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞: {expiry_time_description}.\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}.\n"
        f"üíµ –¶–µ–Ω–∞: {price}.\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {referral_count}.\n"
        f"üéÅ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {total_discount}%.\n\n"
        "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ email':"
    )

    # –≠—Ç–∞–ø 7: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text=BUTTON_TEXTS["without_mail"], callback_data="continue_without_email"),
        InlineKeyboardButton(text=BUTTON_TEXTS["promocode"], callback_data="enter_promo_code"),
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel")
    )
    logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ email —Å–æ–∑–¥–∞–Ω–∞.")

    # –≠—Ç–∞–ø 8: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        sent_message = await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=sent_message_id,
            text=message_text,
            reply_markup=keyboard.adjust(1).as_markup()
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {sent_message_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return

    # –≠—Ç–∞–ø 9: –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã —Å ID {server_selection}")
    optimal_server = await get_optimal_server(server_selection, server_db)

    if optimal_server == "–°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ":
        logger.warning(f"–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {server_selection} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç.")
        busy_keyboard = InlineKeyboardBuilder()
        busy_keyboard.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
        )
        try:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=sent_message_id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä –ø–æ–∑–∂–µ.",
                reply_markup=busy_keyboard.adjust(1).as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ: {e}")
        return

    if not optimal_server:
        logger.error(f"get_optimal_server –≤–µ—Ä–Ω—É–ª None –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {server_selection}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=sent_message_id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    logger.info(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤—ã–±—Ä–∞–Ω: {optimal_server}")

    # –≠—Ç–∞–ø 10: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(
        selected_server=optimal_server,
        sent_message_id=sent_message.message_id,
        user_promo_code=user_promo_code
    )
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: selected_server={optimal_server}, user_promo_code={user_promo_code}")

    await state.set_state(AddClient.WaitingForEmail)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingForEmail")

    await callback_query.answer()
    logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

@router.callback_query(lambda c: c.data == "continue_without_email", AddClient.WaitingForEmail)
@router.message(AddClient.WaitingForEmail)
async def handle_email_or_continue(callback: types.CallbackQuery | types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π email –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ email, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.
    """
    logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ email (–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ –Ω–µ–≥–æ) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    email = None
    user_id = None
    chat_id = None
    sent_message_id = None

    # –≠—Ç–∞–ø 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (CallbackQuery –∏–ª–∏ Message)
    if isinstance(callback, types.CallbackQuery):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ email'")
        email = EMAIL  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ EMAIL ‚Äî —ç—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –≤—Ä–æ–¥–µ "no_email@service.com"
        user_id = callback.from_user.id
        chat_id = user_id
        state_data = await state.get_data()
        sent_message_id = state_data.get('sent_message_id')
        logger.debug(f"CallbackQuery: email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ {email}, sent_message_id={sent_message_id}")

    elif isinstance(callback, types.Message):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        email = callback.text.strip()
        user_id = callback.from_user.id
        chat_id = user_id
        state_data = await state.get_data()
        sent_message_id = state_data.get('sent_message_id')

        # –≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if not is_valid_email(email):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{email}'")
            await callback.delete()
            invalid_email_msg = await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
            await asyncio.sleep(2)
            try:
                await invalid_email_msg.delete()
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π email: {e}")
            return
        else:
            logger.info(f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {email}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å email –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        try:
            await callback.delete()
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å email: {e}")

    # –≠—Ç–∞–ø 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email –≤ FSM
    await state.update_data(email=email)
    logger.info(f"Email '{email}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –≠—Ç–∞–ø 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    logger.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    payment_methods_keyboard = InlineKeyboardBuilder()
    payment_method_text = "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n"

    available_methods = 0
    for method, details in PAYMENT_METHODS.items():
        if details["enabled"]:
            payment_methods_keyboard.add(InlineKeyboardButton(
                text=details["text"],
                callback_data=details["callback_data"]
            ))
            payment_method_text += details["description"] + "\n"
            available_methods += 1
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method}")

    if available_methods == 0:
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        error_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if sent_message_id:
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=sent_message_id,
                    text=error_text
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await bot.send_message(chat_id, error_text)
        else:
            await bot.send_message(chat_id, error_text)
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    payment_methods_keyboard.add(InlineKeyboardButton(
        text=BUTTON_TEXTS["cancel"],
        callback_data="cancel"
    ))

    # –≠—Ç–∞–ø 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if sent_message_id:
            logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {sent_message_id}")
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=sent_message_id,
                text=payment_method_text,
                parse_mode='HTML',
                reply_markup=payment_methods_keyboard.adjust(1).as_markup()
            )
        else:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (sent_message_id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=payment_method_text,
                parse_mode='HTML',
                reply_markup=payment_methods_keyboard.adjust(1).as_markup()
            )
            await state.update_data(sent_message_id=sent_message.message_id)
            logger.debug(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: {sent_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã: {e}", exc_info=True)
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –≠—Ç–∞–ø 6: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(AddClient.WaitingForPaymentMethod)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingForPaymentMethod")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback (–µ—Å–ª–∏ —ç—Ç–æ callback)
    if isinstance(callback, types.CallbackQuery):
        await callback.answer()
        logger.debug(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


@router.callback_query(lambda c: c.data.startswith("payment_method_"), AddClient.WaitingForPaymentMethod)
async def handle_payment_method_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞—á–∞–ª –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.")

    # –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    try:
        payment_method = callback_query.data.split("_", 2)[2]  # –ß—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä "payment_method_tgpay"
        logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: '{payment_method}'")
    except IndexError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤ FSM
    await state.update_data(payment_method=payment_method)
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ–±–Ω–æ–≤–ª–µ–Ω–æ: payment_method={payment_method}")

    # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_promo_code = data.get('user_promo_code')
    name = "MoyServise"
    email = data.get('email')
    expiry_time = data.get('expiry_time')
    user_id = callback_query.from_user.id

    if not expiry_time:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: expiry_time –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.", show_alert=True)
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(
        f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (user_id={user_id}):\n"
        f"   ‚Üí user_promo_code: '{user_promo_code}'\n"
        f"   ‚Üí name: '{name}'\n"
        f"   ‚Üí email: '{email}'\n"
        f"   ‚Üí expiry_time: {expiry_time} ({get_expiry_time_description(expiry_time)})\n"
        f"   ‚Üí payment_method: {payment_method}"
    )

    # –≠—Ç–∞–ø 3: –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    try:
        price_info = get_price_with_referral_info(expiry_time, user_id, user_promo_code)
        final_price = int(price_info[0])
        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {final_price} RUB (user_id={user_id})")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        return

    # –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
    payment_url = None
    payment_id = None

    try:
        if payment_method == "yookassa":
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            payment_url, payment_id = create_payment_yookassa(final_price, user_id, name, expiry_time, email)
            logger.info(f"–ÆKassa: payment_url={payment_url}, payment_id={payment_id}")

        elif payment_method == "yoomoney":
            label = str(uuid.uuid4())
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooMoney (label={label}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            payment_url, payment_id = create_yoomoney_invoice(final_price, YOOMONEY_CARD, label)
            logger.info(f"YooMoney: payment_url={payment_url}, payment_id={payment_id}")

        elif payment_method == "robokassa":
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Robokassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            payment_url, payment_id = create_payment_robokassa(final_price, user_id, name, expiry_time, email)
            logger.info(f"Robokassa: payment_url={payment_url}, payment_id={payment_id}")

        elif payment_method == "cryptobot":
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            payment_url, payment_id = await create_payment_cryptobot(final_price, user_id)
            logger.info(f"CryptoBot: payment_url={payment_url}, payment_id={payment_id}")

        elif payment_method == "cloudpay":
            invoice_id = str(uuid.uuid4())
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CloudPayments (invoice_id={invoice_id}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            payment_url, payment_id = await create_cloudpayments_invoice(final_price, user_id, invoice_id)
            logger.info(f"CloudPayments: payment_url={payment_url}, payment_id={payment_id}")

        elif payment_method == "tgpay":
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars (tgpay) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            sent_message = await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text="üîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...",
                parse_mode='HTML'
            )
            await asyncio.sleep(2)
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=sent_message.message_id)

            await create_payment_tgpay(
                final_price, user_id, name, expiry_time,
                payment_type="initial_payment",
                pay_currency="tgpay"
            )
            logger.info(f"–ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Telegram Stars (tgpay) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω—É–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã

        elif payment_method == "star":
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars (XTR) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            sent_message = await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text="üîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...",
                parse_mode='HTML'
            )
            await asyncio.sleep(2)
            await bot.delete_message(chat_id=callback_query.from_user.id, message_id=sent_message.message_id)

            await create_payment_tgpay(
                final_price, user_id, name, expiry_time,
                payment_type="initial_payment",
                pay_currency="xtr"
            )
            logger.info(f"–ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Telegram Stars (XTR) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}")
            await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.", show_alert=True)
            return

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ {payment_method} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ payment_url –∏ payment_id —Å–æ–∑–¥–∞–Ω—ã (–∫—Ä–æ–º–µ tgpay/star)
    if payment_method not in ["tgpay", "star"]:
        if not payment_url or not payment_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂: payment_url={payment_url}, payment_id={payment_id}, method={payment_method}")
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        else:
            logger.info(f"–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: URL={payment_url}, ID={payment_id}")

    # –≠—Ç–∞–ø 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    keyboard = InlineKeyboardBuilder()
    if payment_method not in ["tgpay", "star"]:
        keyboard.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["pay"], url=payment_url),
            # InlineKeyboardButton(text=BUTTON_TEXTS["check_pay"], callback_data=f"check_payment:{payment_id}:{payment_method}"),
            InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="bay_cancel")
        )
    else:
        keyboard.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="bay_cancel")
        )

    # –≠—Ç–∞–ø 7: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    payment_text = (
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b> –Ω–∞ <b>{get_expiry_time_description(expiry_time)}</b>\n\n"
        "‚ö†Ô∏è <i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ, –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.</i>\n\n"
    )
    if email and email != EMAIL:
        payment_text += f"üìß –ß–µ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: <code>{email}</code>\n\n"

    # –≠—Ç–∞–ø 8: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        sent_message_id = data.get('sent_message_id')
        if sent_message_id:
            logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {sent_message_id}")
            await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=sent_message_id,
                text=payment_text,
                parse_mode='HTML',
                reply_markup=keyboard.adjust(2).as_markup()
            )
        else:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (sent_message_id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            sent_message = await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=payment_text,
                parse_mode='HTML',
                reply_markup=keyboard.adjust(2).as_markup()
            )
            await state.update_data(sent_message_id=sent_message.message_id)
            logger.debug(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: {sent_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π: {e}", exc_info=True)
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return

    # –≠—Ç–∞–ø 9: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ü–µ–Ω—ã –≤ FSM
    if payment_method not in ["tgpay", "star"]:
        await state.update_data(payment_id=payment_id, final_price=final_price)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSM: payment_id={payment_id}, final_price={final_price}")

    # –≠—Ç–∞–ø 10: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    if payment_method not in ["tgpay", "star"]:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è payment_id={payment_id}, –º–µ—Ç–æ–¥={payment_method}")
        asyncio.create_task(start_payment_status_check(callback_query, state, payment_id, payment_method))
    else:
        logger.info(f"–ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ {payment_method} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram API)")

    # –≠—Ç–∞–ø 11: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(AddClient.WaitingForPayment)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingForPayment")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback
    await callback_query.answer()
    logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")


async def start_payment_status_check(callback_query: types.CallbackQuery, state: FSMContext, payment_id: str, payment_method: str):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø—ã—Ç–∞—è—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑
    –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (–Æ–∫–∞—Å—Å–∞, –†–æ–±–æ–∫–∞—Å—Å–∞ –∏ —Ç.–¥.) –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π
    –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    user_id = callback_query.from_user.id
    task_id = f"{user_id}_{payment_id}"
    
    logger.info(
        f"üü¢ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:\n"
        f"   ‚Üí user_id: {user_id}\n"
        f"   ‚Üí payment_id: {payment_id}\n"
        f"   ‚Üí payment_method: {payment_method}\n"
        f"   ‚Üí task_id: {task_id}\n"
        f"   ‚Üí –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {MAX_ATTEMPTS}, –ü–µ—Ä–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {FIRST_CHECK_DELAY} —Å–µ–∫"
    )

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        purchase_tasks[task_id] = asyncio.current_task()
        logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã.")

        # –ü–µ—Ä–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        logger.info(f"–ü–µ—Ä–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: –æ–∂–∏–¥–∞–Ω–∏–µ {FIRST_CHECK_DELAY} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        await asyncio.sleep(FIRST_CHECK_DELAY)

        attempts = 0

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–æ–∫
        while attempts < MAX_ATTEMPTS:
            attempts += 1
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{MAX_ATTEMPTS} –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} (–º–µ—Ç–æ–¥: {payment_method})")

            payment_check_result = None

            try:
                if payment_method == "yookassa":
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa: payment_id={payment_id}")
                    payment_check_result = await check_payment_yookassa(payment_id)
                    if payment_check_result:
                        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –ÆKassa (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
                        await finalize_payment(callback_query, state)
                        return

                elif payment_method == "yoomoney":
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooMoney: payment_id={payment_id}")
                    payment_check_result = await check_yoomoney_payment_status(payment_id)
                    if payment_check_result:
                        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ YooMoney (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
                        await finalize_payment(callback_query, state)
                        return

                elif payment_method == "robokassa":
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Robokassa: payment_id={payment_id}")
                    password2 = PASS2
                    payment_check_result = await check_payment_robokassa(payment_id, password2)
                    if payment_check_result == "100":
                        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Robokassa (ID: {payment_id}) –∑–∞–≤–µ—Ä—à—ë–Ω (—Å—Ç–∞—Ç—É—Å: {payment_check_result}).")
                        await finalize_payment(callback_query, state)
                        return
                    else:
                        logger.debug(f"Robokassa: —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} = {payment_check_result} (–æ–∂–∏–¥–∞–µ—Ç—Å—è '100')")

                elif payment_method == "cryptobot":
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot: payment_id={payment_id}")
                    payment_check_result = await check_payment_cryptobot(payment_id)
                    if payment_check_result:
                        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ CryptoBot (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
                        await finalize_payment(callback_query, state)
                        return

                elif payment_method == "cloudpay":
                    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CloudPayments: payment_id={payment_id}")
                    payment_check_result = await check_payment_cloud(payment_id)
                    if payment_check_result:
                        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ CloudPayments (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
                        await finalize_payment(callback_query, state)
                        return

                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {payment_method}")
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} —á–µ—Ä–µ–∑ {payment_method} (–ø–æ–ø—ã—Ç–∫–∞ {attempts}): {e}",
                    exc_info=True
                )
                # –ù–µ –≤—ã—Ö–æ–¥–∏–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not payment_check_result:
                logger.info(
                    f"‚è≥ –ü–ª–∞—Ç—ë–∂ {payment_id} –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω (–º–µ—Ç–æ–¥: {payment_method}). "
                    f"–û–∂–∏–¥–∞–Ω–∏–µ {SUBSEQUENT_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π..."
                )
            else:
                logger.debug(f"–ü–ª–∞—Ç—ë–∂ {payment_id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempts}")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(SUBSEQUENT_CHECK_INTERVAL)

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.warning(f"‚è∞ –ò—Å—á–µ—Ä–ø–∞–Ω–æ {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}. –ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        try:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")

    except asyncio.CancelledError:
        logger.info(f"üõë –ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (asyncio.CancelledError).")
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ), —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {task_id}: {e}")

    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if task_id in purchase_tasks:
            removed_task = purchase_tasks.pop(task_id, None)
            logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã.")
        else:
            logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")

        logger.info(f"üî¥ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: user_id={user_id}, payment_id={payment_id}, method={payment_method}")
        

async def process_successful_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    telegram_id = callback_query.from_user.id
    data = await state.get_data()
    payment_id = data.get('payment_id')
    task_id = f"{telegram_id}_{payment_id}"

    # –≠—Ç–∞–ø 1: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if task_id in purchase_tasks:
        logger.warning(f"üö´ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {task_id}. –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    purchase_tasks[task_id] = True
    logger.info(
        f"üü¢ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:\n"
        f"   ‚Üí user_id: {telegram_id}\n"
        f"   ‚Üí task_id: {task_id}\n"
        f"   ‚Üí payment_id: {payment_id}\n"
        f"   ‚Üí final_price: {data.get('final_price')} RUB"
    )

    try:
        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_price = data.get("final_price")
        name = data.get('name')
        expiry_days = data.get('expiry_time')  # –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 30, 90, 365
        selected_server = data.get('selected_server')

        if not all([name, expiry_days, selected_server]):
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: –∏–º—è={name}, —Å—Ä–æ–∫={expiry_days} –¥–Ω–µ–π, —Å–µ—Ä–≤–µ—Ä={selected_server}")

        # –≠—Ç–∞–ø 3: –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        current_time = datetime.utcnow()
        expiry_timestamp = current_time + timedelta(days=expiry_days)
        expiry_time = int(expiry_timestamp.timestamp() * 1000)
        logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {expiry_timestamp} (timestamp: {expiry_time})")

        # –≠—Ç–∞–ø 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
        server_data = await get_server_data(selected_server)
        if not server_data:
            logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä —Å ID {selected_server} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: {server_data['name']} ({server_data['server_ip']})")

        # === 1. –í—Ö–æ–¥ –≤ 3x UI ===
        logger.info(f"üîê –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {server_data['login_url']}")
        session_id = await login(server_data['login_url'], {
            "username": server_data['username'],
            "password": server_data['password']
        })
        if not session_id:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data['server_ip']}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ 3x UI")

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data['name']}")

        # === 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ ===
        inbound_ids = server_data['inbound_ids']
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {name}, expiry_time={expiry_time}, inbounds={inbound_ids}")
        await add_client(
            name, expiry_time, inbound_ids, telegram_id,
            server_data['add_client_url'], server_data['login_url'],
            {"username": server_data['username'], "password": server_data['password']}
        )
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_data['name']}")

        # === 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
        logger.info(f"‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await state.update_data(
            email=name,
            client_id=telegram_id,
            server_ip=server_data['server_ip'],
            config_client_url=server_data['config_client_url'],
            json_sub=server_data['json_sub'],
            sub_url=server_data['sub_url'],
            login_data={"username": server_data['username'], "password": server_data['password']},
            user_promo_code=data.get('user_promo_code')
        )

        userdata, config, config2, config3 = await generate_config_from_pay(telegram_id, name, state)
        approx_months = max(1, round(expiry_days / 30))  # –º–∏–Ω–∏–º—É–º 1 –º–µ—Å—è—Ü
        tickets_msg = {1: "1 –±–∏–ª–µ—Ç", 3: "3 –±–∏–ª–µ—Ç–∞", 12: "12 –±–∏–ª–µ—Ç–æ–≤"}.get(approx_months)

        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} (–±–∏–ª–µ—Ç—ã: {tickets_msg})")
        await send_config_from_state(callback_query.message, state, telegram_id, edit=False, tickets_message=tickets_msg)

        # === 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö ===
        logger.info(f"üíæ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await handle_database_operations(telegram_id, name, expiry_time)
        await insert_or_update_user(telegram_id, name, selected_server)
        await log_promo_code_usage(telegram_id, data.get('user_promo_code'))
        await update_sum_my(telegram_id, final_price)
        await update_sum_ref(telegram_id, final_price)
        logger.info(f"‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        # === 5. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –∑–∞ –æ–ø–ª–∞—Ç—É ===
        insert_count = {1: 1, 3: 3, 12: 12}.get(approx_months, 0)
        if insert_count > 0:
            user = callback_query.from_user
            telegram_ref = f"https://t.me/{user.username}" if user.username else user.first_name
            logger.info(f"üéüÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ {insert_count} –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
            try:
                async with aiosqlite.connect("users.db") as conn:
                    await conn.execute('PRAGMA busy_timeout = 5000')
                    await conn.executemany(
                        "INSERT INTO referal_tables (telegram_user) VALUES (?)",
                        [(telegram_ref,)] * insert_count
                    )
                    await conn.commit()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {insert_count} –∑–∞–ø–∏—Å–µ–π –≤ referal_tables –¥–ª—è {telegram_ref}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –±–∏–ª–µ—Ç–æ–≤ –≤ referal_tables: {e}", exc_info=True)

        # === 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, +3 –∑–∞ –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É) ===
        if FREE_DAYS > 0:
            logger.info(f"üéÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {FREE_DAYS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–π –∑–∞ –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É")
            await add_free_days(telegram_id, FREE_DAYS)
            logger.info(f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

        # –≠—Ç–∞–ø —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        await state.clear()
        logger.info(f"üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞
        logger.info(
            f"üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:\n"
            f"   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}\n"
            f"   ‚Üí –ü–æ–¥–ø–∏—Å–∫–∞: {expiry_days} –¥–Ω–µ–π\n"
            f"   ‚Üí –°–µ—Ä–≤–µ—Ä: {server_data['name']}\n"
            f"   ‚Üí –°—É–º–º–∞: {final_price} RUB\n"
            f"   ‚Üí –ë–∏–ª–µ—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã: {insert_count}\n"
            f"   ‚Üí –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏: {FREE_DAYS}"
        )

    except Exception as e:
        logger.error(
            f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} (task_id={task_id}): {e}",
            exc_info=True
        )
        try:
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except Exception as send_error:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {send_error}")

    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞
        if task_id in purchase_tasks:
            del purchase_tasks[task_id]
            logger.debug(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ purchase_tasks")
        else:
            logger.debug(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ purchase_tasks –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")


async def handle_payment_check(callback_query: types.CallbackQuery, payment_id: str, payment_method: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.

    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Æ–∫–∞—Å—Å–∞, –†–æ–±–æ–∫–∞—Å—Å–∞ –∏ —Ç.–¥.)
    """
    user_id = callback_query.from_user.id
    logger.info(
        f"üîç –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:\n"
        f"   ‚Üí user_id: {user_id}\n"
        f"   ‚Üí payment_id: {payment_id}\n"
        f"   ‚Üí payment_method: {payment_method}"
    )

    try:
        if payment_method == "yookassa":
            logger.info(f"üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa (ID: {payment_id})")
            result = await check_payment_yookassa(payment_id)
            if result:
                logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –ÆKassa (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            else:
                logger.debug(f"‚è≥ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –ÆKassa (ID: {payment_id}) –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω.")
            return result

        elif payment_method == "robokassa":
            logger.info(f"üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Robokassa (ID: {payment_id})")
            password2 = PASS2
            result = await check_payment_robokassa(payment_id, password2)
            if result == "100":
                logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ Robokassa (ID: {payment_id}) —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: {result}).")
            else:
                logger.debug(f"‚ùå –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ Robokassa: {result} (–æ–∂–∏–¥–∞–µ—Ç—Å—è '100')")
            return result == "100"

        elif payment_method == "yoomoney":
            logger.info(f"üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooMoney (ID: {payment_id})")
            result = await check_yoomoney_payment_status(payment_id)
            if result:
                logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ YooMoney (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            else:
                logger.debug(f"‚è≥ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ YooMoney (ID: {payment_id}) –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω.")
            return result

        elif payment_method == "cryptobot":
            logger.info(f"üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot (ID: {payment_id})")
            result = await check_payment_cryptobot(payment_id)
            if result:
                logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ CryptoBot (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            else:
                logger.debug(f"‚è≥ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ CryptoBot (ID: {payment_id}) –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω.")
            return result

        elif payment_method == "cloudpay":
            logger.info(f"üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CloudPayments (ID: {payment_id})")
            result = await check_payment_cloud(payment_id)
            if result:
                logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ CloudPayments (ID: {payment_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            else:
                logger.debug(f"‚è≥ –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ CloudPayments (ID: {payment_id}) –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω.")
            return result

        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {payment_method}")
            return False

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} (–º–µ—Ç–æ–¥: {payment_method}, user_id: {user_id}): {e}",
            exc_info=True
        )
        return False


@router.callback_query(lambda query: query.data.startswith("check_payment:"), AddClient.WaitingForPayment)
async def check_payment_status(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É `payment_id` –∏ `payment_method`. 
    –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ 
    –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.")

    try:
        # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        payment_data = callback_query.data.split(":", 2)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏
        if len(payment_data) < 3:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
            return

        payment_id = payment_data[1]
        payment_method = payment_data[2]

        logger.info(
            f"–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:\n"
            f"   ‚Üí user_id: {user_id}\n"
            f"   ‚Üí payment_id: {payment_id}\n"
            f"   ‚Üí payment_method: {payment_method}"
        )

        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ '{payment_method}'")
        is_paid = await handle_payment_check(callback_query, payment_id, payment_method)

        if not is_paid:
            logger.info(f"–ü–ª–∞—Ç—ë–∂ {payment_id} –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω (–º–µ—Ç–æ–¥: {payment_method})")
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return
        else:
            logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —á–µ—Ä–µ–∑ {payment_method}. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

        # –≠—Ç–∞–ø 3: –û—Ç–º–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        task_id = f"{user_id}_{payment_id}"
        if task_id in purchase_tasks:
            task = purchase_tasks.pop(task_id)
            task.cancel()
            logger.info(f"üõë –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {task_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.")
        else:
            logger.debug(f"‚ÑπÔ∏è –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å.")

        # –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await process_successful_payment(callback_query, state)

        # –≠—Ç–∞–ø 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback
        await callback_query.answer()
        logger.info(f"‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(
            f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n"
            f"   ‚Üí –û—à–∏–±–∫–∞: {e}\n"
            f"   ‚Üí –î–∞–Ω–Ω—ã–µ callback: {callback_query.data}",
            exc_info=True  # –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞
        )
        try:
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        except Exception as inner_e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {inner_e}")

        
async def finalize_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.

    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∏–µ–Ω—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    –∏ –≤—ã–ø–æ–ª–Ω—è—è –¥—Ä—É–≥–∏–µ —à–∞–≥–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = callback_query.from_user.id
    logger.info(
        f"üèÅ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:\n"
        f"   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"   ‚Üí Chat ID: {callback_query.message.chat.id}\n"
        f"   ‚Üí Message ID: {callback_query.message.message_id}"
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        data = await state.get_data()
        payment_id = data.get('payment_id')
        payment_method = data.get('payment_method')
        final_price = data.get('final_price')
        expiry_time = data.get('expiry_time')

        logger.info(
            f"üìä –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:\n"
            f"   ‚Üí payment_id: {payment_id}\n"
            f"   ‚Üí method: {payment_method}\n"
            f"   ‚Üí —Å—É–º–º–∞: {final_price} RUB\n"
            f"   ‚Üí —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {expiry_time} –¥–Ω–µ–π"
        )

        # –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ process_successful_payment –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await process_successful_payment(callback_query, state)

        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    except Exception as e:
        logger.error(
            f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n"
            f"   ‚Üí –û—à–∏–±–∫–∞: {e}",
            exc_info=True
        )
        try:
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except Exception as send_error:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {send_error}")
    
    
@router.callback_query(lambda c: c.data == "bay_cancel")
async def handle_cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞, –∑–∞–¥–∞—á–∞ –ø–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
    """
    try:
        data = await state.get_data()
        sent_message_id = data.get('sent_message_id')
        payment_id = data.get('payment_id')
        payment_method = data.get('payment_method')

        if not payment_id:
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        is_payment_completed = await handle_payment_check(callback_query, payment_id, payment_method)
        if is_payment_completed:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")
            return

        task_id = f"{callback_query.from_user.id}_{payment_id}"
        if task_id in purchase_tasks:
            task = purchase_tasks.pop(task_id)
            task.cancel()
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
            await callback_query.answer("‚ùå –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await callback_query.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")

        if sent_message_id:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=sent_message_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu(callback_query)
            )
        else:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∫—É–ø–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=get_main_menu(callback_query)
            )

        await state.clear()
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu(callback_query)
        )
