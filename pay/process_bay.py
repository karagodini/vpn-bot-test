import asyncio
import aiosqlite
import re, uuid
from datetime import datetime, timedelta
from uuid import uuid4
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.utils import markdown as md
from aiogram import Router, F
from aiogram.enums.parse_mode import ParseMode

from bot import bot
from log import logger
from client.add_client import (
    add_client, 
    generate_config_from_pay, 
    login, 
    send_config_from_state
)
from db.db import (
    handle_database_operations, 
    insert_or_update_user, 
    update_user_trial_status,
    update_sum_my,
    update_sum_ref,
    add_free_days
)
from handlers.config import get_server_data
from handlers.select_server import get_optimal_server
from handlers.states import AddClient
from pay.prices import *
from pay.payments import (
    check_payment_yookassa, 
    create_payment_yookassa, 
    create_payment_robokassa, 
    check_payment_robokassa, 
    create_payment_cryptobot, 
    check_payment_cryptobot, 
    create_payment_tgpay, 
    create_cloudpayments_invoice, 
    check_payment_cloud,
    create_yoomoney_invoice,
    check_yoomoney_payment_status
)

from pay.promocode import log_promo_code_usage
from pay.pay_metod import PAYMENT_METHODS
from client.menu import get_main_menu
from client.add_client import generate_login
from buttons.client import BUTTON_TEXTS
from dotenv import load_dotenv
import os
from db.db import ServerDatabase
load_dotenv()


SERVEDATABASE = os.getenv("SERVEDATABASE")
server_db = ServerDatabase(SERVEDATABASE)


PASS2 = os.getenv("PASS2")

YOOMONEY_CARD = int(os.getenv("YOOMONEY_CARD"))

EMAIL = os.getenv("EMAIL")
FIRST_CHECK_DELAY = int(os.getenv("FIRST_CHECK_DELAY", 15))
SUBSEQUENT_CHECK_INTERVAL = int(os.getenv("SUBSEQUENT_CHECK_INTERVAL", 30))
MAX_ATTEMPTS = int(os.getenv("MAX_ATTEMPTS", 15))
FREE_DAYS = os.getenv("FREE_DAYS")

router = Router()

purchase_tasks = {}

def is_valid_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.

    –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@domain.com). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ –∞–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É,
    –∏ `False` –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(email_regex, email) is not None

@router.message(AddClient.WaitingForPayment, AddClient.WaitingForExpiryTime)
async def handle_invalid_message(message: types.Message, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–µ–±—É–µ—Ç—Å—è 
    –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã).
    """
    await message.delete()

    current_state = await state.get_state()
    reminder_message = None

    if current_state == AddClient.WaitingForPayment.state:
        reminder_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")
    elif current_state == AddClient.WaitingForExpiryTime.state:
        reminder_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")

    await asyncio.sleep(5)

    if reminder_message:
        await reminder_message.delete()


@router.callback_query(lambda query: query.data == "trial_1")
async def process_trial_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
    """
    telegram_id = callback_query.from_user.id
    
    if not has_active_subscription(telegram_id):
        current_time = datetime.utcnow()
        expiry_timestamp = current_time + timedelta(days=TRIAL)
        expiry_time = int(expiry_timestamp.timestamp() * 1000)

        name = generate_login(telegram_id)
        
        await state.update_data(
            expiry_time=expiry_time
        )
        server_selection = "random"
        await update_user_trial_status(telegram_id)

        selected_server = await get_optimal_server(server_selection, server_db)
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {selected_server}")
        
        server_id = selected_server
        server_data = await get_server_data(selected_server)
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞: {server_data}")
        country_name = server_data.get('name') if server_data else "üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"
        if not server_data:
            await bot.send_message(callback_query.from_user.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞.")
            return

        try:
            session_id = await login(server_data['login_url'], {
                "username": server_data['username'],
                "password": server_data['password']
            })
            inbound_ids = server_data['inbound_ids']
            await add_client(name, expiry_time, inbound_ids, telegram_id, server_data['add_client_url'], server_data['login_url'], {
                "username": server_data['username'],
                "password": server_data['password']
            })

            await state.update_data(
                email=name,
                client_id=telegram_id,
                login_data={"username": server_data['username'], "password": server_data['password']},
                selected_country_name=country_name,
                server_ip=server_data['server_ip'],
                config_client_url=server_data['config_client_url'],
                inbound_ids=server_data['inbound_ids'],
                login_url=server_data['login_url'],
                sub_url=server_data['sub_url'],
                json_sub=server_data['json_sub']
            )

            userdata, config, config2, config3 = await generate_config_from_pay(telegram_id, name, state)
            await send_config_from_state(callback_query.message, state, telegram_id=callback_query.from_user.id, edit=True)

            await state.clear()

            user_id = await insert_or_update_user(telegram_id, name, server_id)

        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    else:
        await callback_query.message.edit_text(
            "‚ö† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=get_main_menu(callback_query)
        )

    await callback_query.answer()

@router.callback_query(lambda query: query.data == "trial_go")
async def trial_go(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
    """

    text = (
            "<b>–ì–æ—Ç–æ–≤ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å</b> @vpnmoy? üöÄ\n\n"
            "‚Äî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
            "‚Äî –†–∞–±–æ—Ç–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ <b>–†—É–Ω–µ—Ç–∞</b> –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è <b>VPN</b>\n"
            "‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ <b>5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b> –Ω–∞ –æ–¥–∏–Ω –∫–ª—é—á.\n\n"
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: <b>–æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –¥–æ —Å–º–∞—Ä—Ç-—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤.</b>"
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="trial_1"),
        InlineKeyboardButton(text=BUTTON_TEXTS["promocode"], callback_data="enter_promo_code")
    )

    await callback_query.message.edit_text(
        text=text,
        reply_markup=keyboard.adjust(1).as_markup(),
        parse_mode="HTML"
    )

    await callback_query.answer()

@router.callback_query(lambda c: c.data in [str(ONE_M), str(THREE_M), str(ONE_YEAR)])
async def ask_to_confirm_tariff(callback_query: types.CallbackQuery, state: FSMContext):
    expiry_time = int(callback_query.data)
    await state.update_data(pending_expiry_time=expiry_time)

    text = (
            "<b>–ì–æ—Ç–æ–≤ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å</b> @vpnmoy? üöÄ\n\n"
            "‚Äî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
            "‚Äî –†–∞–±–æ—Ç–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ <b>–†—É–Ω–µ—Ç–∞</b> –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è <b>VPN</b>\n"
            "‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ <b>5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b> –Ω–∞ –æ–¥–∏–Ω –∫–ª—é—á.\n\n"
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: <b>–æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –¥–æ —Å–º–∞—Ä—Ç-—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤.</b>"
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text=BUTTON_TEXTS["key"], callback_data="confirm_expiry_time"),
        InlineKeyboardButton(text=BUTTON_TEXTS["promocode"], callback_data="enter_promo_code")
    )

    await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard.adjust(1).as_markup())
    await callback_query.answer()

@router.callback_query(F.data == "confirm_expiry_time")
async def confirmed_expiry_time(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    expiry_time = data.get("pending_expiry_time")

    if not expiry_time:
        await callback_query.answer("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    telegram_id = callback_query.from_user.id
    name = generate_login(telegram_id)
    email = "default@mail.ru"
    #selected_server = 2
    user_promo_code = None

    selected_server = await get_optimal_server("random", server_db)
    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {selected_server}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if isinstance(selected_server, str) and "–∑–∞–Ω—è—Ç" in selected_server:
        await callback_query.answer("‚ùå –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    if not selected_server or not str(selected_server).isdigit():
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.", show_alert=True)
        return

    selected_server = int(selected_server)

    await state.update_data({
        "expiry_time": expiry_time,
        "email": email,
        "name": name,
        "selected_server": selected_server,
        "user_promo_code": user_promo_code,
        "sent_message_id": callback_query.message.message_id,  # –Ω—É–∂–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    })

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–µ
    server_data = await get_server_data(selected_server)
    if not server_data:
        await callback_query.message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data({
        "selected_country_name": server_data.get("name"),
        "login_data": {"username": server_data['username'], "password": server_data['password']},
        "server_ip": server_data['server_ip'],
        "config_client_url": server_data['config_client_url'],
        "inbound_ids": server_data['inbound_ids'],
        "login_url": server_data['login_url'],
        "sub_url": server_data['sub_url'],
        "json_sub": server_data['json_sub'],
    })

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    await state.set_state(AddClient.WaitingForPaymentMethod)

    # –°–æ–∑–¥–∞–µ–º "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π" callback —Å –Ω—É–∂–Ω—ã–º data
    fake_callback = types.CallbackQuery(
        id=callback_query.id,
        from_user=callback_query.from_user,
        chat_instance=callback_query.chat_instance,
        message=callback_query.message,
        data="payment_method_yookassa"
    )

    await handle_payment_method_selection(fake_callback, state)



    
@router.callback_query(lambda query: query.data.isdigit(), AddClient.WaitingForExpiryTime)
async def process_paid_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –≤—ã–±–∏—Ä–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ —Å–∫–∏–¥–∫–µ.

    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∂–µ–ª–∞—é—â–µ–≥–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –í–∫–ª—é—á–∞–µ—Ç —ç—Ç–∞–ø—ã 
    –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ –∏ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    data = callback_query.data
    telegram_id = callback_query.from_user.id
    expiry_time = int(data.split("_")[0])

    logger.info(f"–ü–æ–ª—É—á–µ–Ω expiry_time: {expiry_time}")

    await state.update_data(
        expiry_time=expiry_time
    )
    
    data = await state.get_data()

    sent_message_id = data['sent_message_id']
    server_selection = data['selected_country_id']
    country_name = data['selected_country_name']
    logger.info(f"Selected country ID retrieved: {server_selection}, Country name: {country_name}")

    logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

    conn_users = sqlite3.connect(USERSDATABASE)
    cursor_users = conn_users.cursor()

    cursor_users.execute(""" 
        SELECT promo_code 
        FROM users 
        WHERE telegram_id = ? 
    """, (telegram_id,))
    user_promo_code = cursor_users.fetchone()

    if user_promo_code and user_promo_code[0]:
        user_promo_code = user_promo_code[0]
    else:
        user_promo_code = None

    cursor_users.close()
    conn_users.close()

    price, total_discount, referral_count = get_price_with_referral_info(expiry_time, telegram_id, user_promo_code)
    expiry_time_description = get_expiry_time_description(expiry_time)

    message_text = (
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞: {expiry_time_description}.\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}.\n" 
        f"üíµ –¶–µ–Ω–∞: {price}.\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {referral_count}.\n"
        f"üéÅ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {total_discount}%.\n\n"
        "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ email':"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text=BUTTON_TEXTS["without_mail"], callback_data="continue_without_email"),
        InlineKeyboardButton(text=BUTTON_TEXTS["promocode"], callback_data="enter_promo_code"),
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="cancel")
    )

    sent_message = await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=sent_message_id,
        text=message_text,
        reply_markup=keyboard.adjust(1).as_markup()
    )

    optimal_server = await get_optimal_server(server_selection, server_db)

    if optimal_server == "–°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ":
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text=BUTTON_TEXTS["main_menu"], callback_data="main_menu")
        )
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=sent_message_id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä –ø–æ–∑–∂–µ.",
        reply_markup=keyboard.adjust(1).as_markup()
        )
        logger.warning("–°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç")
        return 

    logger.info(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {optimal_server}")

    await state.update_data(
        selected_server=optimal_server,
        sent_message_id=sent_message.message_id,
        user_promo_code=user_promo_code 
    )
    
    await state.set_state(AddClient.WaitingForEmail)
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingForEmail")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "continue_without_email", AddClient.WaitingForEmail)
@router.message(AddClient.WaitingForEmail)
async def handle_email_or_continue(callback: types.CallbackQuery | types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π email –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ email, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.
    """
    email = None

    if isinstance(callback, types.CallbackQuery):
        email = EMAIL
        user_id = callback.from_user.id
        chat_id = user_id
        sent_message_id = (await state.get_data()).get('sent_message_id')
    elif isinstance(callback, types.Message):
        email = callback.text

        if not is_valid_email(email):
            await callback.delete()
            invalid_email_msg = await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
            await asyncio.sleep(2)
            await invalid_email_msg.delete()
            return

        await callback.delete()
        user_id = callback.from_user.id
        chat_id = user_id
        sent_message_id = (await state.get_data()).get('sent_message_id')

    await state.update_data(email=email)

    payment_methods_keyboard = InlineKeyboardBuilder()

    payment_method_text = "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n"
    
    for method, details in PAYMENT_METHODS.items():
        if details["enabled"]:
            payment_methods_keyboard.add(InlineKeyboardButton(
                text=details["text"],
                callback_data=details["callback_data"]
            ))
            payment_method_text += details["description"] + "\n"

    payment_methods_keyboard.add(InlineKeyboardButton(
        text=BUTTON_TEXTS["cancel"], callback_data="cancel"
    ))

    if sent_message_id:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=sent_message_id,
            text=payment_method_text,
            parse_mode='HTML',
            reply_markup=payment_methods_keyboard.adjust(1).as_markup()
        )
    else:
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=payment_method_text,
            parse_mode='HTML',
            reply_markup=payment_methods_keyboard.adjust(1).as_markup()
        )
        await state.update_data(sent_message_id=sent_message.message_id)

    await state.set_state(AddClient.WaitingForPaymentMethod)


@router.callback_query(lambda c: c.data.startswith("payment_method_"), AddClient.WaitingForPaymentMethod)
async def handle_payment_method_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.
    """
    payment_method = callback_query.data.split("_")[2]
    await state.update_data(payment_method=payment_method)
    payment_url = None
    payment_id = None
    data = await state.get_data()
    user_promo_code = data['user_promo_code']
    name = "MoyServise"
    email = data['email']
    expiry_time = data['expiry_time']
    user_id = callback_query.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(
        f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (user_id={user_id}):\n"
        f"   ‚Üí user_promo_code: '{user_promo_code}'\n"
        f"   ‚Üí name: '{name}'\n"
        f"   ‚Üí email: '{email}'\n"
        f"   ‚Üí expiry_time: {expiry_time} ({get_expiry_time_description(expiry_time)})\n"
        f"   ‚Üí final_price –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
    )

    price_info = get_price_with_referral_info(expiry_time, user_id, user_promo_code)
    final_price = int(price_info[0])

    if payment_method == "yookassa":
        payment_url, payment_id = create_payment_yookassa(final_price, user_id, name, expiry_time, email)
        logger.info(f"DEBUG: —é–∫–∞—Å—Å–∞ - {payment_url}, payment_id - {payment_id}")
    elif payment_method == "yoomoney":
        label = str(uuid.uuid4()) 
        payment_url, payment_id = create_yoomoney_invoice(final_price, YOOMONEY_CARD, label)
        logger.info(f"DEBUG: —é–º–∞–Ω–∏ - {payment_url}, payment_id - {payment_id}")
    elif payment_method == "robokassa":
        payment_url, payment_id = create_payment_robokassa(final_price, user_id, name, expiry_time, email)
        logger.info(f"DEBUG: —Ä–æ–±–æ–∫–∞—Å—Å–∞ - {payment_url}, payment_id - {payment_id}")
    elif payment_method == "cryptobot":
        payment_url, payment_id = await create_payment_cryptobot(final_price, user_id)
        logger.info(f"DEBUG: –∫—Ä–∏–ø—Ç–æ–±–æ—Ç - {payment_url}, payment_id - {payment_id}")
    elif payment_method == "cloudpay":
        invoice_id = str(uuid4())
        payment_url, payment_id = await create_cloudpayments_invoice(final_price, user_id, invoice_id)
        logger.info(f"DEBUG: cloudpay - {payment_url}, payment_id - {payment_id}")
    elif payment_method == "tgpay":
        sent_message = await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="üîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...",
            parse_mode='HTML'
        )
        await asyncio.sleep(2)
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=sent_message.message_id)

        await create_payment_tgpay(final_price, user_id, name, expiry_time, payment_type="initial_payment", pay_currency="tgpay")
        return

    elif payment_method == "star":
        sent_message = await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="üîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...",
            parse_mode='HTML'
        )
        await asyncio.sleep(2)
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=sent_message.message_id)

        await create_payment_tgpay(final_price, user_id, name, expiry_time, payment_type="initial_payment", pay_currency="xtr")
        return       
    if payment_method != "tgpay" and (not payment_url or not payment_id):
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text=BUTTON_TEXTS["pay"], url=payment_url),
        #InlineKeyboardButton(text=BUTTON_TEXTS["check_pay"], callback_data=f"check_payment:{payment_id}:{payment_method}"),
        InlineKeyboardButton(text=BUTTON_TEXTS["cancel"], callback_data="bay_cancel")
    )
    payment_text = (
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b> –Ω–∞ <b>{get_expiry_time_description(expiry_time)}</b>\n\n"
        "‚ö†Ô∏è <i>–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç–æ, –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.</i>\n\n"
    )
    if email != EMAIL:
        payment_text += f""

    try:
        sent_message_id = (await state.get_data()).get('sent_message_id')
        if sent_message_id:
            await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=sent_message_id,
                text=payment_text,
                parse_mode='HTML',
                reply_markup=keyboard.adjust(2).as_markup()
            )
        else:
            sent_message = await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=payment_text,
                parse_mode='HTML',
                reply_markup=keyboard.adjust(2).as_markup()
            )
            await state.update_data(sent_message_id=sent_message.message_id)
        await state.update_data(payment_id=payment_id, final_price=final_price)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    asyncio.create_task(start_payment_status_check(callback_query, state, payment_id, payment_method))
    await state.set_state(AddClient.WaitingForPayment)


async def start_payment_status_check(callback_query: types.CallbackQuery, state: FSMContext, payment_id: str, payment_method: str):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø—ã—Ç–∞—è—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑
    –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (–Æ–∫–∞—Å—Å–∞, –†–æ–±–æ–∫–∞—Å—Å–∞ –∏ —Ç.–¥.) –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π
    –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    task_id = f"{callback_query.from_user.id}_{payment_id}"
    try:
        attempts = 0
        purchase_tasks[task_id] = asyncio.current_task()
    
        await asyncio.sleep(FIRST_CHECK_DELAY)

        while attempts < MAX_ATTEMPTS:
            if payment_method == "yookassa":
                payment_check = await check_payment_yookassa(payment_id)
                if payment_check:
                    await finalize_payment(callback_query, state)
                    return
            elif payment_method == "yoomoney":
                payment_check = await check_yoomoney_payment_status(payment_id)
                if payment_check:
                    await finalize_payment(callback_query, state)
                    return
            elif payment_method == "robokassa":
                password2 = PASS2
                payment_check_result = await check_payment_robokassa(payment_id, password2)
                if payment_check_result == "100":
                    await finalize_payment(callback_query, state)
                    return
            elif payment_method == "cryptobot":
                payment_check_result = await check_payment_cryptobot(payment_id)
                if payment_check_result:
                    await finalize_payment(callback_query, state)
                    return
            elif payment_method == "cloudpay":
                payment_check_result = await check_payment_cloud(payment_id)
                if payment_check_result:
                    await finalize_payment(callback_query, state)
                    return

            attempts += 1
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts}: –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –∂–¥–µ–º {SUBSEQUENT_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(SUBSEQUENT_CHECK_INTERVAL)

        await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
    except asyncio.CancelledError:
        logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    finally:
        purchase_tasks.pop(task_id, None)
        

async def process_successful_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    telegram_id = callback_query.from_user.id
    task_id = f"{telegram_id}_{data.get('payment_id')}"

    if task_id in purchase_tasks:
        logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –ø–ª–∞—Ç–µ–∂–∞ {task_id}")
        return
    purchase_tasks[task_id] = True

    try:
        data = await state.get_data()
        final_price = data.get("final_price")
        name = data['name']
        expiry_days = data['expiry_time']
        current_time = datetime.utcnow()
        expiry_timestamp = current_time + timedelta(days=expiry_days)
        expiry_time = int(expiry_timestamp.timestamp() * 1000)

        selected_server = data['selected_server']
        server_data = await get_server_data(selected_server)
        if not server_data:
            await callback_query.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # === 1. –í—Ö–æ–¥ –≤ 3x UI ===
        session_id = await login(server_data['login_url'], {
            "username": server_data['username'],
            "password": server_data['password']
        })
        if not session_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ 3x UI")

        # === 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ ===
        await add_client(
            name, expiry_time, server_data['inbound_ids'], telegram_id,
            server_data['add_client_url'], server_data['login_url'],
            {"username": server_data['username'], "password": server_data['password']}
        )

        # === 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É ===
        await state.update_data(
            email=name,
            client_id=telegram_id,
            server_ip=server_data['server_ip'],
            config_client_url=server_data['config_client_url'],
            json_sub=server_data['json_sub'],
            sub_url=server_data['sub_url'],
            login_data={"username": server_data['username'], "password": server_data['password']},
            user_promo_code=data.get('user_promo_code')
        )

        userdata, config, config2, config3 = await generate_config_from_pay(telegram_id, name, state)
        approx_months = round(expiry_days / 30)
        tickets_msg = {1: "1 –±–∏–ª–µ—Ç", 3: "3 –±–∏–ª–µ—Ç–∞", 12: "12 –±–∏–ª–µ—Ç–æ–≤"}.get(approx_months)

        await send_config_from_state(callback_query.message, state, telegram_id, edit=False, tickets_message=tickets_msg)

        # === 4. –û–±–Ω–æ–≤–ª—è–µ–º –ë–î ===
        await handle_database_operations(telegram_id, name, expiry_time)
        await insert_or_update_user(telegram_id, name, selected_server)
        await log_promo_code_usage(telegram_id, data.get('user_promo_code'))
        await update_sum_my(telegram_id, final_price)
        await update_sum_ref(telegram_id, final_price)

        # === 5. –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ–ø–ª–∞—Ç—É (–±–∏–ª–µ—Ç—ã) ===
        insert_count = {1: 1, 3: 3, 12: 12}.get(approx_months, 0)
        if insert_count > 0:
            user = callback_query.from_user
            telegram_ref = f"https://t.me/{user.username}" if user.username else user.first_name
            async with aiosqlite.connect("users.db") as conn:
                await conn.execute('PRAGMA busy_timeout = 5000')  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                await conn.executemany(
                    "INSERT INTO referal_tables (telegram_user) VALUES (?)",
                    [(telegram_ref,)] * insert_count
                )
                await conn.commit()

        # === 6. –î–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +3 –∑–∞ –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É) ===
        await add_free_days(telegram_id, FREE_DAYS)

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {telegram_id}: {e}", exc_info=True)
        try:
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except:
            pass
    finally:
        purchase_tasks.pop(task_id, None)


async def handle_payment_check(callback_query: types.CallbackQuery, payment_id: str, payment_method: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.

    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Æ–∫–∞—Å—Å–∞, –†–æ–±–æ–∫–∞—Å—Å–∞ –∏ —Ç.–¥.)
    """
    if payment_method == "yookassa":
        return await check_payment_yookassa(payment_id)
    elif payment_method == "robokassa":
        password2 = PASS2
        return await check_payment_robokassa(payment_id, password2) == "100"
    elif payment_method == "yoomoney":
        return await check_yoomoney_payment_status(payment_id)
    elif payment_method == "cryptobot":
        return await check_payment_cryptobot(payment_id)
    elif payment_method == "cloudpay":
        return await check_payment_cloud(payment_id)
    return False


@router.callback_query(lambda query: query.data.startswith("check_payment:"), AddClient.WaitingForPayment)
async def check_payment_status(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É `payment_id` –∏ `payment_method`. 
    –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ 
    –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.
    """
    try:
        payment_data = callback_query.data.split(":")
        payment_id = payment_data[1]
        payment_method = payment_data[2]

        if not await handle_payment_check(callback_query, payment_id, payment_method):
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        task_id = f"{callback_query.from_user.id}_{payment_id}"
        if task_id in purchase_tasks:
            task = purchase_tasks.pop(task_id)
            task.cancel()
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")

        await process_successful_payment(callback_query, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")

        
async def finalize_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.

    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∏–µ–Ω—Ç–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    –∏ –≤—ã–ø–æ–ª–Ω—è—è –¥—Ä—É–≥–∏–µ —à–∞–≥–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    await process_successful_payment(callback_query, state)
    
    
@router.callback_query(lambda c: c.data == "bay_cancel")
async def handle_cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞, –∑–∞–¥–∞—á–∞ –ø–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
    """
    try:
        data = await state.get_data()
        sent_message_id = data.get('sent_message_id')
        payment_id = data.get('payment_id')
        payment_method = data.get('payment_method')

        if not payment_id:
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        is_payment_completed = await handle_payment_check(callback_query, payment_id, payment_method)
        if is_payment_completed:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")
            return

        task_id = f"{callback_query.from_user.id}_{payment_id}"
        if task_id in purchase_tasks:
            task = purchase_tasks.pop(task_id)
            task.cancel()
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
            await callback_query.answer("‚ùå –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await callback_query.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")

        if sent_message_id:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=sent_message_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu(callback_query)
            )
        else:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∫—É–ø–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=get_main_menu(callback_query)
            )

        await state.clear()
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu(callback_query)
        )
